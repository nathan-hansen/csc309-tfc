commit 0823529d8c97a368eecf986bed5a4095f672f89f
Merge: f6ebb14 dd6813f
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 20:10:58 2022 -0500

    Merge remote-tracking branch 'origin/master'

commit f6ebb14a648f02b724a1c0c37b8947c4d4c58081
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 20:10:28 2022 -0500

    minor bug fix, commente dout test in generate_payments.py

diff --git a/generate_payments.py b/generate_payments.py
index 05ba8ae..746c41c 100644
--- a/generate_payments.py
+++ b/generate_payments.py
@@ -23,9 +23,9 @@ def generate_payments_today():
             # convert datetime string in serialized object to datetime object
             # source: https://stackoverflow.com/a/13182163
             pay_time = datetime.date.fromisoformat(pay_time_str)
-            test_time = pay_time.replace(year=pay_time.year - 1, month=pay_time.month - 1)
+            # test_time = pay_time.replace(month=pay_time.month - 1)
             # in order to compare if payment is due today
-            if test_time == datetime.date.today():  # check if payment time is today
+            if pay_time == datetime.date.today():  # check if payment time is today
                 # deserialize response data and save the PaymentHistory object
                 payment_history = PaymentHistorySerializer(data=response_data)
                 # check if deserialized is valid
diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
index d41be71..2adf6fd 100644
--- a/subscriptions/serializers.py
+++ b/subscriptions/serializers.py
@@ -73,12 +73,12 @@ class CurrentSubscriptionSerializer(ModelSerializer):
         interval = SubscriptionPlan.objects.get(id=validated_data['plan'].pk).interval
         today = datetime.date.today()
         if interval == 'yearly':
-            expiry = today.replace(year=today.year + 1, month=1, day=1)
+            expiry = today.replace(year=today.year + 1)
         elif interval == 'monthly':
             if today.month == 12:
                 expiry = today.replace(year=today.year + 1, month=1, day=1)
             else:
-                expiry = today.replace(month=today.month + 1, day=1)
+                expiry = today.replace(month=today.month + 1)
         else:
             raise ValidationError('invalid interval')
         return CurrentSubscription.objects.create(account=current_account, 

commit dd6813f81dc2226b0fdcdd61e51cfec6bd0564bf
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 20:00:13 2022 -0500

    token extended

diff --git a/TFC/settings.py b/TFC/settings.py
index 65eafa5..0af1367 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -11,6 +11,7 @@ https://docs.djangoproject.com/en/4.1/ref/settings/
 """
 
 from pathlib import Path
+from datetime import timedelta
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
 BASE_DIR = Path(__file__).resolve().parent.parent
@@ -47,6 +48,10 @@ INSTALLED_APPS = [
     "drf_yasg",
 ]
 
+SIMPLE_JWT = {
+        'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
+}
+
 REST_FRAMEWORK = {
     'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework_simplejwt.authentication.JWTAuthentication',

commit daff4e65bab0144c62c8a00fef13b51617c49928
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 19:53:28 2022 -0500

    run script

diff --git a/run.sh b/run.sh
new file mode 100755
index 0000000..7fe22f2
--- /dev/null
+++ b/run.sh
@@ -0,0 +1,2 @@
+#!/usr/bin/bash
+python3 manage.py runserver

commit 1c0955697c502945b2efc7dc15e2e27775b2ce95
Merge: 3d72c3a d35b04f
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 19:47:03 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 3d72c3a4ef5a6a8e39228c01bbbd6e57b9d82c53
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 19:46:57 2022 -0500

    added git history for Markus

diff --git a/commit_history.txt b/commit_history.txt
new file mode 100644
index 0000000..f0b50e3
--- /dev/null
+++ b/commit_history.txt
@@ -0,0 +1,11208 @@
+commit 312af270edb6b42e4cafac53b57059b5f4006b1f
+Merge: 7aed007 2605993
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 19:32:04 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 7aed00793bc622b65c4b2f18c1bb8cc7501248ab
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 19:31:53 2022 -0500
+
+    handle undefined lat lon values
+
+diff --git a/studios/views.py b/studios/views.py
+index b30aaaa..bc1a9f5 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -1,6 +1,7 @@
+ from django.shortcuts import get_object_or_404
+ from rest_framework import generics
+ from rest_framework import filters
++from rest_framework.response import Response
+ from django_filters.rest_framework import DjangoFilterBackend
+ from studios.serializers import (
+         StudioSerializer, 
+@@ -20,8 +21,13 @@ class ListStudioByProximityView(generics.ListAPIView):
+     filterset_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
+     search_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
+     def get_queryset(self):
+-        lat = float(self.kwargs['latitude'])
+-        lon = float(self.kwargs['longitude'])
++        try:
++            lat = float(self.kwargs['latitude'])
++            lon = float(self.kwargs['longitude'])
++        except:
++            lat = 0
++            lon = 0
++
+ 
+         queryset = Studio.get_locations_nearby_coords(lat, lon)
+ 
+
+commit 26059937f9ec97afb4fb0ca2b77eda854076d73d
+Merge: c06fa54 9b31175
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sat Nov 19 19:12:35 2022 -0500
+
+    Merge remote-tracking branch 'origin/master'
+
+commit c06fa54c982d30776b1ff508ef66485c5348f6c6
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sat Nov 19 19:12:19 2022 -0500
+
+    changed shell script to usr
+
+diff --git a/generate_payments.sh b/generate_payments.sh
+index 7182764..aca328b 100644
+--- a/generate_payments.sh
++++ b/generate_payments.sh
+@@ -1,4 +1,4 @@
+-#! /bin/bash
++#!/usr/bin/bash
+ if [ $# -ne 0 ]
+ then
+     echo "Usage: ./generate_payments.sh no arguments"
+
+commit 9b311756d61e5ab1a5a2187815af8153703a2d25
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 19:12:00 2022 -0500
+
+    /usr/bin/bash
+
+diff --git a/startup.sh b/startup.sh
+index b0241b0..15d926f 100755
+--- a/startup.sh
++++ b/startup.sh
+@@ -1,4 +1,4 @@
+-#!/bin/bash
++#!/usr/bin/bash
+ 
+ python3.10 -m venv env
+ source env/bin/activate
+
+commit bb44e97f80e72d7cfff66fef6ce7a5e2d7acc026
+Merge: 6904db9 887deba
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 18:59:58 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 6904db9ae3c6151d289aace87a9383ebec15c6cb
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 18:59:20 2022 -0500
+
+    sh to bash
+
+diff --git a/startup.sh b/startup.sh
+index 1cd986c..b0241b0 100755
+--- a/startup.sh
++++ b/startup.sh
+@@ -1,4 +1,4 @@
+-#!/bin/sh
++#!/bin/bash
+ 
+ python3.10 -m venv env
+ source env/bin/activate
+
+commit 887deba1a4632b9fd497384823aed84a94f2bcdb
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 18:51:54 2022 -0500
+
+    add one more req
+
+diff --git a/requirements.txt b/requirements.txt
+index 94b6d06..b59f64c 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -5,3 +5,4 @@ django-filter
+ drf-yasg
+ geopy
+ Pillow
++tzdata
+\ No newline at end of file
+
+commit 67ae2c76730baf598d2c3a9ff686ad31a2fb1999
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 18:46:01 2022 -0500
+
+    delete migration
+
+diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
+deleted file mode 100644
+index 1b8d389..0000000
+--- a/accounts/migrations/0001_initial.py
++++ /dev/null
+@@ -1,59 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-16 19:48
+-
+-from django.conf import settings
+-import django.contrib.auth.models
+-import django.core.validators
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ("auth", "0012_alter_user_first_name_max_length"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="Account",
+-            fields=[
+-                (
+-                    "user_ptr",
+-                    models.OneToOneField(
+-                        auto_created=True,
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        parent_link=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        to=settings.AUTH_USER_MODEL,
+-                    ),
+-                ),
+-                ("avatar", models.ImageField(upload_to="account_avatars/")),
+-                (
+-                    "phone_number",
+-                    models.CharField(
+-                        blank=True,
+-                        max_length=250,
+-                        null=True,
+-                        validators=[
+-                            django.core.validators.RegexValidator(
+-                                message="Phone number must be in the format: '+999999999', with a maximum of 15 digits",
+-                                regex="^\\+?1?\\d{9,15}$",
+-                            )
+-                        ],
+-                    ),
+-                ),
+-            ],
+-            options={
+-                "verbose_name": "user",
+-                "verbose_name_plural": "users",
+-                "abstract": False,
+-            },
+-            bases=("auth.user",),
+-            managers=[
+-                ("objects", django.contrib.auth.models.UserManager()),
+-            ],
+-        ),
+-    ]
+diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
+deleted file mode 100644
+index c623526..0000000
+--- a/classes/migrations/0001_initial.py
++++ /dev/null
+@@ -1,120 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-16 19:48
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ("studios", "0001_initial"),
+-        ("accounts", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="Class",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("name", models.CharField(max_length=250)),
+-                ("description", models.TextField()),
+-                ("coach", models.CharField(max_length=250)),
+-                ("duration", models.DurationField()),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="tfc_class",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="ClassTimeTable",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("time", models.DateTimeField()),
+-                ("spotleft", models.IntegerField()),
+-                (
+-                    "classid",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="timetable",
+-                        to="classes.class",
+-                    ),
+-                ),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="Keywords",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("keyword", models.CharField(max_length=250)),
+-                (
+-                    "classid",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="keywords",
+-                        to="classes.class",
+-                    ),
+-                ),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="EnrollClass",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                (
+-                    "account",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="enrollclass",
+-                        to="accounts.account",
+-                    ),
+-                ),
+-                (
+-                    "classtime",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="enrollclass",
+-                        to="classes.classtimetable",
+-                    ),
+-                ),
+-            ],
+-        ),
+-    ]
+diff --git a/payments/migrations/0001_initial.py b/payments/migrations/0001_initial.py
+deleted file mode 100644
+index dfbc5ea..0000000
+--- a/payments/migrations/0001_initial.py
++++ /dev/null
+@@ -1,68 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-16 21:56
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ("accounts", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="PaymentInfo",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("card_number", models.CharField(max_length=250)),
+-                ("expiry_date", models.DateField()),
+-                ("cvv", models.IntegerField()),
+-                ("name_on_card", models.CharField(max_length=250)),
+-                (
+-                    "account",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="payment_info",
+-                        to="accounts.account",
+-                    ),
+-                ),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="PaymentHistory",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("timestamp", models.DateTimeField()),
+-                ("amount", models.FloatField()),
+-                ("card_number", models.CharField(max_length=250)),
+-                ("card_expiry", models.DateField()),
+-                (
+-                    "account",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="payment_history",
+-                        to="accounts.account",
+-                    ),
+-                ),
+-            ],
+-        ),
+-    ]
+diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
+deleted file mode 100644
+index f29133e..0000000
+--- a/studios/migrations/0001_initial.py
++++ /dev/null
+@@ -1,84 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-16 19:48
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = []
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="Studio",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("name", models.CharField(max_length=250)),
+-                ("address", models.CharField(max_length=250)),
+-                ("latitude", models.FloatField()),
+-                ("longitude", models.FloatField()),
+-                ("postal_code", models.CharField(max_length=250)),
+-                ("phone_number", models.CharField(max_length=250)),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="StudioImage",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("image", models.ImageField(upload_to="studios/")),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="image",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="Amenities",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("amenity_type", models.CharField(max_length=250)),
+-                ("quantity", models.IntegerField()),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="amenities",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-            options={
+-                "verbose_name_plural": "Amenities",
+-            },
+-        ),
+-    ]
+diff --git a/subscriptions/migrations/0001_initial.py b/subscriptions/migrations/0001_initial.py
+deleted file mode 100644
+index 16d2ac5..0000000
+--- a/subscriptions/migrations/0001_initial.py
++++ /dev/null
+@@ -1,74 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-16 22:14
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ("studios", "0001_initial"),
+-        ("accounts", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="SubscriptionPlan",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("payment", models.DecimalField(decimal_places=2, max_digits=12)),
+-                ("interval", models.DurationField()),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="CurrentSubscription",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("expiration", models.DateTimeField(blank=True, null=True)),
+-                (
+-                    "account",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="account_subscription",
+-                        to="accounts.account",
+-                    ),
+-                ),
+-                (
+-                    "plan",
+-                    models.ForeignKey(
+-                        blank=True,
+-                        null=True,
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="current_plan",
+-                        to="subscriptions.subscriptionplan",
+-                    ),
+-                ),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="studio_subscription",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-        ),
+-    ]
+
+commit c6df4260df4135bdee3ce537b7a63e874bf6f760
+Merge: 2041306 f5293f2
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 18:21:45 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 204130632da947916909bc71b0aef2989fce83fb
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 18:20:50 2022 -0500
+
+    minor change to class test
+
+diff --git a/classes/tests.py b/classes/tests.py
+index 70ef6fe..a37960c 100644
+--- a/classes/tests.py
++++ b/classes/tests.py
+@@ -243,4 +243,4 @@ class TestClasses(TestCase):
+         self.assertEqual(response.status_code, 200)
+         response = json.loads(response.content.decode('utf-8'))
+         
+-        self.assertEqual(len(response), len(total_list))
+\ No newline at end of file
++        self.assertEqual(len(response["results"]), len(total_list))
+
+commit f5293f2eee2cea7007d15795e5a0d3b9910b6c56
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sat Nov 19 18:13:29 2022 -0500
+
+    Updated postman.json postman collection class modify thing.
+
+diff --git a/postman.json b/postman.json
+index 05851da..ac233fa 100644
+--- a/postman.json
++++ b/postman.json
+@@ -691,8 +691,12 @@
+ 					"request": {
+ 						"method": "POST",
+ 						"header": [],
++						"body": {
++							"mode": "raw",
++							"raw": "{\r\n    \"classtime\": \"14:00:00\", \r\n    \"op\": \"eiusmod veniam ullamco\"\r\n}"
++						},
+ 						"url": {
+-							"raw": "{{baseUrl}}/classes/modify/?classtime id=eiusmod veniam ullamco&account id=-69603318&op=eiusmod veniam ullamco",
++							"raw": "{{baseUrl}}/classes/modify/",
+ 							"host": [
+ 								"{{baseUrl}}"
+ 							],
+@@ -700,23 +704,6 @@
+ 								"classes",
+ 								"modify",
+ 								""
+-							],
+-							"query": [
+-								{
+-									"key": "classtime id",
+-									"value": "eiusmod veniam ullamco",
+-									"description": "Class time"
+-								},
+-								{
+-									"key": "account id",
+-									"value": "-69603318",
+-									"description": "User ID"
+-								},
+-								{
+-									"key": "op",
+-									"value": "eiusmod veniam ullamco",
+-									"description": "Operation: either enroll or drop"
+-								}
+ 							]
+ 						},
+ 						"description": "Enroll or drop a class"
+
+commit 7900a9ab42e13fb98122c5199e7828558dc721bd
+Merge: ce8a4a8 56c2287
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sat Nov 19 18:02:08 2022 -0500
+
+    Merge remote-tracking branch 'origin/master'
+
+commit ce8a4a8faf04373746e767453e1642afc8125caf
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sat Nov 19 17:50:28 2022 -0500
+
+    Updated docs.pdf for subscription commit and added postman.json postman collection with variables.
+
+diff --git a/docs.pdf b/docs.pdf
+index 162cf27..ddcee4d 100644
+Binary files a/docs.pdf and b/docs.pdf differ
+diff --git a/postman.json b/postman.json
+new file mode 100644
+index 0000000..05851da
+--- /dev/null
++++ b/postman.json
+@@ -0,0 +1,1808 @@
++{
++	"info": {
++		"_postman_id": "3f010057-dc49-4124-9e98-07181300afb8",
++		"name": "CSC309 TFC Project Backend",
++		"description": "Built by Letian Cheng, Nathan Hansen, Edward Leung",
++		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
++	},
++	"item": [
++		{
++			"name": "accounts",
++			"item": [
++				{
++					"name": "update",
++					"item": [
++						{
++							"name": "accounts update update",
++							"request": {
++								"method": "PUT",
++								"header": [
++									{
++										"key": "Content-Type",
++										"value": "application/json"
++									},
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"username\": \"cKy2Eid\",\n  \"first_name\": \"incididunt\",\n  \"last_name\": \"consec\",\n  \"email\": \"UtKElrPc@ZHlgiiXGMskzPXkOKGrsLohwhrFr.pyvg\",\n  \"phone_number\": \"+134671078958\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/accounts/update/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"accounts",
++										"update",
++										""
++									]
++								},
++								"description": "Allows a user to update their account details."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "PUT",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/accounts/update/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"accounts",
++												"update",
++												""
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"username\": \"m\",\n  \"first_name\": \"culpa exercitation\",\n  \"last_name\": \"laboris incididunt\",\n  \"email\": \"JnfNm@uuwxBMJKAyTkeYXMxWgYe.purc\",\n  \"avatar\": \"http://bZaprN.rxxka8bV0f,lYI+\",\n  \"phone_number\": \"8346953504\"\n}"
++								}
++							]
++						},
++						{
++							"name": "accounts update partial update",
++							"request": {
++								"method": "PATCH",
++								"header": [
++									{
++										"key": "Content-Type",
++										"value": "application/json"
++									},
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"username\": \"cKy2Eid\",\n  \"first_name\": \"incididunt\",\n  \"last_name\": \"consec\",\n  \"email\": \"UtKElrPc@ZHlgiiXGMskzPXkOKGrsLohwhrFr.pyvg\",\n  \"phone_number\": \"+134671078958\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/accounts/update/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"accounts",
++										"update",
++										""
++									]
++								},
++								"description": "Allows a user to update their account details."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "PATCH",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/accounts/update/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"accounts",
++												"update",
++												""
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"username\": \"m\",\n  \"first_name\": \"culpa exercitation\",\n  \"last_name\": \"laboris incididunt\",\n  \"email\": \"JnfNm@uuwxBMJKAyTkeYXMxWgYe.purc\",\n  \"avatar\": \"http://bZaprN.rxxka8bV0f,lYI+\",\n  \"phone_number\": \"8346953504\"\n}"
++								}
++							]
++						}
++					]
++				},
++				{
++					"name": "accounts api token refresh create",
++					"request": {
++						"method": "POST",
++						"header": [
++							{
++								"key": "Content-Type",
++								"value": "application/json"
++							},
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"body": {
++							"mode": "raw",
++							"raw": "{\n  \"refresh\": \"aute\"\n}",
++							"options": {
++								"raw": {
++									"language": "json"
++								}
++							}
++						},
++						"url": {
++							"raw": "{{baseUrl}}/accounts/api/token/refresh/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"accounts",
++								"api",
++								"token",
++								"refresh",
++								""
++							]
++						},
++						"description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "POST",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"refresh\": \"aute\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/accounts/api/token/refresh/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"accounts",
++										"api",
++										"token",
++										"refresh",
++										""
++									]
++								}
++							},
++							"status": "Created",
++							"code": 201,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"refresh\": \"id\",\n  \"access\": \"nostrud commodo\"\n}"
++						}
++					]
++				},
++				{
++					"name": "accounts login create",
++					"request": {
++						"auth": {
++							"type": "noauth"
++						},
++						"method": "POST",
++						"header": [
++							{
++								"key": "Content-Type",
++								"value": "application/json"
++							},
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"body": {
++							"mode": "raw",
++							"raw": "{\n  \"username\": \"deserunt cillum\",\n  \"password\": \"eiusmod fugiat\"\n}",
++							"options": {
++								"raw": {
++									"language": "json"
++								}
++							}
++						},
++						"url": {
++							"raw": "{{baseUrl}}/accounts/login/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"accounts",
++								"login",
++								""
++							]
++						},
++						"description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "POST",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"username\": \"deserunt cillum\",\n  \"password\": \"eiusmod fugiat\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/accounts/login/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"accounts",
++										"login",
++										""
++									]
++								}
++							},
++							"status": "Created",
++							"code": 201,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"username\": \"deserunt cillum\",\n  \"password\": \"eiusmod fugiat\"\n}"
++						}
++					]
++				},
++				{
++					"name": "accounts signup create",
++					"request": {
++						"auth": {
++							"type": "noauth"
++						},
++						"method": "POST",
++						"header": [
++							{
++								"key": "Content-Type",
++								"value": "application/json"
++							},
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"body": {
++							"mode": "raw",
++							"raw": "{\n  \"username\": \"0tvR\",\n  \"password\": \"amet tempor ea eiusmod\",\n  \"password2\": \"cillum \",\n  \"first_name\": \"voluptate in\",\n  \"last_name\": \"voluptate labore adipisicing in\",\n  \"email\": \"tUCgSPoU83@TrLl.xbc\",\n  \"phone_number\": \"16224935678\"\n}",
++							"options": {
++								"raw": {
++									"language": "json"
++								}
++							}
++						},
++						"url": {
++							"raw": "{{baseUrl}}/accounts/signup/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"accounts",
++								"signup",
++								""
++							]
++						},
++						"description": "Allows a user to register on the website."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "POST",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"username\": \"0tvR\",\n  \"password\": \"amet tempor ea eiusmod\",\n  \"password2\": \"cillum \",\n  \"first_name\": \"voluptate in\",\n  \"last_name\": \"voluptate labore adipisicing in\",\n  \"email\": \"tUCgSPoU83@TrLl.xbc\",\n  \"phone_number\": \"16224935678\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/accounts/signup/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"accounts",
++										"signup",
++										""
++									]
++								}
++							},
++							"status": "Created",
++							"code": 201,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"username\": \"jzujxke\",\n  \"password\": \"do ad qui sint\",\n  \"password2\": \"ex ad\",\n  \"first_name\": \"consectetur\",\n  \"last_name\": \"fugiat reprehenderit\",\n  \"email\": \"DxiYBn3Um@NHoKjvBqncpQuGc.dlp\",\n  \"avatar\": \"https://uSTTPMDpOBxwEzU.dvRohlm9jUZZd5\",\n  \"phone_number\": \"56147476878277\"\n}"
++						}
++					]
++				},
++				{
++					"name": "accounts read",
++					"request": {
++						"auth": {
++							"type": "noauth"
++						},
++						"method": "GET",
++						"header": [
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"url": {
++							"raw": "{{baseUrl}}/accounts/{{account_id}}/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"accounts",
++								"{{account_id}}",
++								""
++							]
++						},
++						"description": "View a given account."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "GET",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/accounts/:account_id/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"accounts",
++										":account_id",
++										""
++									],
++									"variable": [
++										{
++											"key": "account_id",
++											"value": "eiusmod veniam ullamco",
++											"description": "(Required) "
++										}
++									]
++								}
++							},
++							"status": "OK",
++							"code": 200,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"username\": \"m\",\n  \"first_name\": \"culpa exercitation\",\n  \"last_name\": \"laboris incididunt\",\n  \"email\": \"JnfNm@uuwxBMJKAyTkeYXMxWgYe.purc\",\n  \"avatar\": \"http://bZaprN.rxxka8bV0f,lYI+\",\n  \"phone_number\": \"8346953504\"\n}"
++						}
++					]
++				}
++			]
++		},
++		{
++			"name": "classes",
++			"item": [
++				{
++					"name": "{studio id}",
++					"item": [
++						{
++							"name": "classes schedule list",
++							"request": {
++								"method": "GET",
++								"header": [
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/classes/{{studio_id}}/schedule/?limit=-69603318&offset=-69603318",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"classes",
++										"{{studio_id}}",
++										"schedule",
++										""
++									],
++									"query": [
++										{
++											"key": "limit",
++											"value": "-69603318",
++											"description": "Number of results to return per page."
++										},
++										{
++											"key": "offset",
++											"value": "-69603318",
++											"description": "The initial index from which to return the results."
++										}
++									]
++								},
++								"description": "Allows a user to view their upcoming enrolled classes in chronological order."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "GET",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/classes/:studio_id/schedule/?limit=-69603318&offset=-69603318",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"classes",
++												":studio_id",
++												"schedule",
++												""
++											],
++											"query": [
++												{
++													"key": "limit",
++													"value": "-69603318"
++												},
++												{
++													"key": "offset",
++													"value": "-69603318"
++												}
++											],
++											"variable": [
++												{
++													"key": "studio_id",
++													"value": "eiusmod veniam ullamco",
++													"description": "(Required) "
++												}
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"count\": 62317673,\n  \"results\": [\n    {\n      \"account\": {\n        \"username\": \"hLoaT\",\n        \"first_name\": \"elit ut consequat proident id\",\n        \"last_name\": \"adipisicing aliquip velit sed\",\n        \"email\": \"cemU@OJXsxDxnZE.ofis\",\n        \"avatar\": \"https://P.kvixl1Y8l20GzcFFTtk7NQ5WruXfTbI\",\n        \"phone_number\": \"+1972989609955\"\n      },\n      \"classtime\": {\n        \"time\": \"1946-08-01T20:53:04.888Z\",\n        \"spotleft\": -10243156,\n        \"id\": 40741668,\n        \"class_detail\": \"deserunt\"\n      },\n      \"class_detail\": \"qui incididunt commodo elit magna\"\n    },\n    {\n      \"account\": {\n        \"username\": \"POw\",\n        \"first_name\": \"est laborum et cupidatat\",\n        \"last_name\": \"dolore\",\n        \"email\": \"V5BROLWCrKebJXV@tckFwNVYpHdZkoJhOettPqmZTtsqNjOmA.ctg\",\n        \"avatar\": \"http://cFGncgK.fpphSi0vITr+qUTV.bw3.qiiRQzFU3BmNKCc6oDvrOsRaDPLo6SvXh\",\n        \"phone_number\": \"+065574671145061\"\n      },\n      \"classtime\": {\n        \"time\": \"1945-08-12T02:25:46.985Z\",\n        \"spotleft\": 79383676,\n        \"id\": 23994760,\n        \"class_detail\": \"nostrud labore aliquip veniam\"\n      },\n      \"class_detail\": \"aliqua\"\n    }\n  ],\n  \"next\": \"https://ZzfojmmafQAEsin.qqxBW4BzI5,eZ\",\n  \"previous\": \"http://mbDjJguQhgeKAXwmtFUHpoUNdq.lytsbGR4i3hQWe1QB3dosY-ezRWHqQem\"\n}"
++								}
++							]
++						},
++						{
++							"name": "classes upcoming list",
++							"request": {
++								"method": "GET",
++								"header": [
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/classes/{{studio_id}}/upcoming/?limit=-69603318&offset=-69603318",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"classes",
++										"{{studio_id}}",
++										"upcoming",
++										""
++									],
++									"query": [
++										{
++											"key": "limit",
++											"value": "-69603318",
++											"description": "Number of results to return per page."
++										},
++										{
++											"key": "offset",
++											"value": "-69603318",
++											"description": "The initial index from which to return the results."
++										}
++									]
++								},
++								"description": "List upcoming classes in a given studio."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "GET",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/classes/:studio_id/upcoming/?limit=-69603318&offset=-69603318",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"classes",
++												":studio_id",
++												"upcoming",
++												""
++											],
++											"query": [
++												{
++													"key": "limit",
++													"value": "-69603318"
++												},
++												{
++													"key": "offset",
++													"value": "-69603318"
++												}
++											],
++											"variable": [
++												{
++													"key": "studio_id",
++													"value": "eiusmod veniam ullamco",
++													"description": "(Required) "
++												}
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"count\": -53196476,\n  \"results\": [\n    {\n      \"time\": \"2011-07-27T04:01:29.560Z\",\n      \"spotleft\": 1491701,\n      \"id\": 48331768,\n      \"class_detail\": \"pariatur\"\n    },\n    {\n      \"time\": \"2019-05-12T06:00:11.557Z\",\n      \"spotleft\": 28721980,\n      \"id\": 34485788,\n      \"class_detail\": \"ut in esse\"\n    }\n  ],\n  \"next\": \"https://VwwmNqaJNWuZNNbROvgQHSlAXO.ykglaTvd3dTKwpVf0UHUarS\",\n  \"previous\": \"https://NrqjA.cvurPVMvy0GvhoqKLrXQRyeY10R67y7xwerAek0XfBo7qsaxgJBvWmKGtdVXDGey+k.QZCK\"\n}"
++								}
++							]
++						}
++					]
++				},
++				{
++					"name": "classes modify create",
++					"request": {
++						"method": "POST",
++						"header": [],
++						"url": {
++							"raw": "{{baseUrl}}/classes/modify/?classtime id=eiusmod veniam ullamco&account id=-69603318&op=eiusmod veniam ullamco",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"classes",
++								"modify",
++								""
++							],
++							"query": [
++								{
++									"key": "classtime id",
++									"value": "eiusmod veniam ullamco",
++									"description": "Class time"
++								},
++								{
++									"key": "account id",
++									"value": "-69603318",
++									"description": "User ID"
++								},
++								{
++									"key": "op",
++									"value": "eiusmod veniam ullamco",
++									"description": "Operation: either enroll or drop"
++								}
++							]
++						},
++						"description": "Enroll or drop a class"
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "POST",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/classes/modify/?classtime id=eiusmod veniam ullamco&account id=-69603318&op=eiusmod veniam ullamco",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"classes",
++										"modify",
++										""
++									],
++									"query": [
++										{
++											"key": "classtime id",
++											"value": "eiusmod veniam ullamco"
++										},
++										{
++											"key": "account id",
++											"value": "-69603318"
++										},
++										{
++											"key": "op",
++											"value": "eiusmod veniam ullamco"
++										}
++									]
++								}
++							},
++							"status": "Created",
++							"code": 201,
++							"_postman_previewlanguage": "text",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "text/plain"
++								}
++							],
++							"cookie": [],
++							"body": ""
++						}
++					]
++				}
++			]
++		},
++		{
++			"name": "payments",
++			"item": [
++				{
++					"name": "update",
++					"item": [
++						{
++							"name": "payments update update",
++							"request": {
++								"method": "PUT",
++								"header": [
++									{
++										"key": "Content-Type",
++										"value": "application/json"
++									},
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"name_on_card\": \"cupidatat adipisicing consequat\",\n  \"card_number\": \"veniam Duis anim eu\",\n  \"cvv\": -91286752,\n  \"expiry_date\": \"2011-11-20\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/payments/update/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"payments",
++										"update",
++										""
++									]
++								},
++								"description": "Allows a user to alter their credit card details."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "PUT",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/payments/update/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"payments",
++												"update",
++												""
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"name_on_card\": \"incididunt dolore\",\n  \"card_number\": \"mollit Excepteur aliqua\",\n  \"cvv\": 9734811,\n  \"expiry_date\": \"2013-11-09\",\n  \"account\": \"dolor incididunt elit\"\n}"
++								}
++							]
++						},
++						{
++							"name": "payments update partial update",
++							"request": {
++								"method": "PATCH",
++								"header": [
++									{
++										"key": "Content-Type",
++										"value": "application/json"
++									},
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"name_on_card\": \"cupidatat adipisicing consequat\",\n  \"card_number\": \"veniam Duis anim eu\",\n  \"cvv\": -91286752,\n  \"expiry_date\": \"2011-11-20\"\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/payments/update/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"payments",
++										"update",
++										""
++									]
++								},
++								"description": "Allows a user to alter their credit card details."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "PATCH",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/payments/update/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"payments",
++												"update",
++												""
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"name_on_card\": \"incididunt dolore\",\n  \"card_number\": \"mollit Excepteur aliqua\",\n  \"cvv\": 9734811,\n  \"expiry_date\": \"2013-11-09\",\n  \"account\": \"dolor incididunt elit\"\n}"
++								}
++							]
++						}
++					]
++				},
++				{
++					"name": "payments add create",
++					"request": {
++						"method": "POST",
++						"header": [
++							{
++								"key": "Content-Type",
++								"value": "application/json"
++							},
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"body": {
++							"mode": "raw",
++							"raw": "{\n  \"name_on_card\": \"cupidatat adipisicing consequat\",\n  \"card_number\": \"veniam Duis anim eu\",\n  \"cvv\": -91286752,\n  \"expiry_date\": \"2011-11-20\"\n}",
++							"options": {
++								"raw": {
++									"language": "json"
++								}
++							}
++						},
++						"url": {
++							"raw": "{{baseUrl}}/payments/add/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"payments",
++								"add",
++								""
++							]
++						},
++						"description": "Allows a user to register their credit card details."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "POST",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/payments/add/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"payments",
++										"add",
++										""
++									]
++								}
++							},
++							"status": "Created",
++							"code": 201,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"name_on_card\": \"incididunt dolore\",\n  \"card_number\": \"mollit Excepteur aliqua\",\n  \"cvv\": 9734811,\n  \"expiry_date\": \"2013-11-09\",\n  \"account\": \"dolor incididunt elit\"\n}"
++						}
++					]
++				},
++				{
++					"name": "payments history list",
++					"request": {
++						"method": "GET",
++						"header": [
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"url": {
++							"raw": "{{baseUrl}}/payments/history/?limit=-69603318&offset=-69603318",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"payments",
++								"history",
++								""
++							],
++							"query": [
++								{
++									"key": "limit",
++									"value": "-69603318",
++									"description": "Number of results to return per page."
++								},
++								{
++									"key": "offset",
++									"value": "-69603318",
++									"description": "The initial index from which to return the results."
++								}
++							]
++						},
++						"description": "Allows a user to view all their past payments on file, sorted by recent."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "GET",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/payments/history/?limit=-69603318&offset=-69603318",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"payments",
++										"history",
++										""
++									],
++									"query": [
++										{
++											"key": "limit",
++											"value": "-69603318"
++										},
++										{
++											"key": "offset",
++											"value": "-69603318"
++										}
++									]
++								}
++							},
++							"status": "OK",
++							"code": 200,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"count\": 19412010,\n  \"results\": [\n    {\n      \"account\": \"ut esse sint\",\n      \"timestamp\": \"2009-11-14\",\n      \"amount\": -16766216.130180165,\n      \"card_number\": \"adipisicing sed reprehenderit commodo velit\",\n      \"card_expiry\": \"1960-01-25\"\n    },\n    {\n      \"account\": \"Duis est\",\n      \"timestamp\": \"2015-04-04\",\n      \"amount\": 30433537.682281077,\n      \"card_number\": \"exercitation non commodo aliquip\",\n      \"card_expiry\": \"2014-11-26\"\n    }\n  ],\n  \"next\": \"http://VgTpduJmZeCssdvzGiDKjwvuWRurByQ.mvjtnMcyHNTsupkVyH0eFBJdRmcj1N0L5.NTSls72-pZUWt1AdOuzQ9SK0bm1ujQ1bMS1v\",\n  \"previous\": \"https://bOEKuKWZZFmbTZqChcAIdzgeKdbyqTv.ydxjId4aLX-we0SlnnHhWkMr6j7MQEj0Is+LyBePV+6,ZfulDtdZXIGN,+NbLMP,OQ18fIv\"\n}"
++						}
++					]
++				},
++				{
++					"name": "payments upcoming list",
++					"request": {
++						"method": "GET",
++						"header": [],
++						"url": {
++							"raw": "{{baseUrl}}/payments/upcoming/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"payments",
++								"upcoming",
++								""
++							]
++						},
++						"description": "Allows a user to view their next upcoming payment, and the payment recurrence interval.\nThe next upcoming payment is when the coverage they have already paid for expires"
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "GET",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/payments/upcoming/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"payments",
++										"upcoming",
++										""
++									]
++								}
++							},
++							"status": "OK",
++							"code": 200,
++							"_postman_previewlanguage": "text",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "text/plain"
++								}
++							],
++							"cookie": [],
++							"body": ""
++						}
++					]
++				}
++			]
++		},
++		{
++			"name": "studios",
++			"item": [
++				{
++					"name": "{studio}",
++					"item": [
++						{
++							"name": "studios read",
++							"request": {
++								"auth": {
++									"type": "noauth"
++								},
++								"method": "GET",
++								"header": [
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/studios/{{studio}}/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"studios",
++										"{{studio}}",
++										""
++									]
++								},
++								"description": "View Studio information given a Studio ID."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "GET",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/studios/:studio/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"studios",
++												":studio",
++												""
++											],
++											"variable": [
++												{
++													"key": "studio",
++													"value": "eiusmod veniam ullamco",
++													"description": "(Required) "
++												}
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"name\": \"in in elit aute\",\n  \"address\": \"nos\",\n  \"latitude\": -85459281.06266336,\n  \"longitude\": -23404344.796723947,\n  \"postal_code\": \"anim officia\",\n  \"phone_number\": \"velit occaecat fugiat anim\"\n}"
++								}
++							]
++						},
++						{
++							"name": "studios amenities list",
++							"request": {
++								"auth": {
++									"type": "noauth"
++								},
++								"method": "GET",
++								"header": [
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/studios/{{studio}}/amenities/?limit=-69603318&offset=-69603318",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"studios",
++										"{{studio}}",
++										"amenities",
++										""
++									],
++									"query": [
++										{
++											"key": "limit",
++											"value": "-69603318",
++											"description": "Number of results to return per page."
++										},
++										{
++											"key": "offset",
++											"value": "-69603318",
++											"description": "The initial index from which to return the results."
++										}
++									]
++								},
++								"description": "View Amenities given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "GET",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/studios/:studio/amenities/?limit=-69603318&offset=-69603318",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"studios",
++												":studio",
++												"amenities",
++												""
++											],
++											"query": [
++												{
++													"key": "limit",
++													"value": "-69603318"
++												},
++												{
++													"key": "offset",
++													"value": "-69603318"
++												}
++											],
++											"variable": [
++												{
++													"key": "studio",
++													"value": "eiusmod veniam ullamco",
++													"description": "(Required) "
++												}
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"count\": 51575971,\n  \"results\": [\n    {\n      \"studio\": 7886004,\n      \"amenity_type\": \"Lorem veniam anim in\",\n      \"quantity\": -10543630\n    },\n    {\n      \"studio\": -25485704,\n      \"amenity_type\": \"Ut est\",\n      \"quantity\": 89061952\n    }\n  ],\n  \"next\": \"https://jSUSSCfswSbZRYcBOAUAh.kxSkNTQAwxXdVfCmJhqnI8g+9JAfOZ54837,LZdy+0GBEiHa\",\n  \"previous\": \"http://VJqMycG.hpM2GRV82sfGlR6ap\"\n}"
++								}
++							]
++						},
++						{
++							"name": "studios images list",
++							"request": {
++								"auth": {
++									"type": "noauth"
++								},
++								"method": "GET",
++								"header": [
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/studios/{{studio}}/images/?limit=-69603318&offset=-69603318",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"studios",
++										"{{studio}}",
++										"images",
++										""
++									],
++									"query": [
++										{
++											"key": "limit",
++											"value": "-69603318",
++											"description": "Number of results to return per page."
++										},
++										{
++											"key": "offset",
++											"value": "-69603318",
++											"description": "The initial index from which to return the results."
++										}
++									]
++								},
++								"description": "View StudioImages given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "GET",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/studios/:studio/images/?limit=-69603318&offset=-69603318",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"studios",
++												":studio",
++												"images",
++												""
++											],
++											"query": [
++												{
++													"key": "limit",
++													"value": "-69603318"
++												},
++												{
++													"key": "offset",
++													"value": "-69603318"
++												}
++											],
++											"variable": [
++												{
++													"key": "studio",
++													"value": "eiusmod veniam ullamco",
++													"description": "(Required) "
++												}
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"count\": 32473674,\n  \"results\": [\n    {\n      \"studio\": -3985930,\n      \"image\": \"https://mWBPJRELeoL.afsA695Ew+ymsxeKGzy2SPENpdYmhpw1ZMDYzRVHlgdFSjmrCH0kgQecTqM\"\n    },\n    {\n      \"studio\": -33435659,\n      \"image\": \"https://mzuIXtgWUuTEANIYjeUxymputMn.psoam5ddsiMUF\"\n    }\n  ],\n  \"next\": \"http://SB.rzdKBtknD0a89pBiB7VhoQwlDhSZ4tCebvIJKfsR-W+7rAHUmtTQu6xAoln2ptOrTuanm3oAPBYDql+\",\n  \"previous\": \"https://oJtrKIcqYSCsZnzkrLHzxSeBc.dplcSpSjrdsh+Q1JfdOH4aKAs1KPY,g7cKtFWO8Wp7Ol-ddOrdg27XhC+ABc9XlS\"\n}"
++								}
++							]
++						}
++					]
++				},
++				{
++					"name": "studios list read",
++					"request": {
++						"auth": {
++							"type": "noauth"
++						},
++						"method": "GET",
++						"header": [
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"url": {
++							"raw": "{{baseUrl}}/studios/list/{{latitude}},{{longitude}}?search=eiusmod veniam ullamco&limit=-69603318&offset=-69603318",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"studios",
++								"list",
++								"{{latitude}},{{longitude}}"
++							],
++							"query": [
++								{
++									"key": "search",
++									"value": "eiusmod veniam ullamco",
++									"description": "A search term."
++								},
++								{
++									"key": "limit",
++									"value": "-69603318",
++									"description": "Number of results to return per page."
++								},
++								{
++									"key": "offset",
++									"value": "-69603318",
++									"description": "The initial index from which to return the results."
++								}
++							]
++						},
++						"description": "List Studios by proximity, with optional search and filter capability via parameters.\nNeeds latitude and longitude values passed through the URL to operate."
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "GET",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/studios/list/{{latitude}},{{longitude}}?search=eiusmod veniam ullamco&limit=-69603318&offset=-69603318",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"studios",
++										"list",
++										"{{latitude}},{{longitude}}"
++									],
++									"query": [
++										{
++											"key": "search",
++											"value": "eiusmod veniam ullamco"
++										},
++										{
++											"key": "limit",
++											"value": "-69603318"
++										},
++										{
++											"key": "offset",
++											"value": "-69603318"
++										}
++									]
++								}
++							},
++							"status": "OK",
++							"code": 200,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"count\": 65204862,\n  \"results\": [\n    {\n      \"name\": \"velit ea esse\",\n      \"address\": \"do nisi id\",\n      \"latitude\": -56377377.380743176,\n      \"longitude\": -6529700.32437934,\n      \"postal_code\": \"ipsum magna\",\n      \"phone_number\": \"exercitation tempor\"\n    },\n    {\n      \"name\": \"occaecat ex\",\n      \"address\": \"tempor incididunt officia\",\n      \"latitude\": 79897394.20826659,\n      \"longitude\": 12430970.636889651,\n      \"postal_code\": \"ullamco occaecat dolor minim cillum\",\n      \"phone_number\": \"ut laboris exercitation nulla\"\n    }\n  ],\n  \"next\": \"https://cujJQOtdeh.wxsIvIhzYpHS90dnk1CgwTzWHwZXiidFS,Jng3F9QhT6OJZWPfBSWXM\",\n  \"previous\": \"https://HBmdOKiTNHpa.cncTk+PyZwXZgdXzmlGjG3PDfU,\"\n}"
++						}
++					]
++				}
++			]
++		},
++		{
++			"name": "subscriptions",
++			"item": [
++				{
++					"name": "update",
++					"item": [
++						{
++							"name": "subscriptions update update",
++							"request": {
++								"method": "PUT",
++								"header": [
++									{
++										"key": "Content-Type",
++										"value": "application/json"
++									},
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"plan\": -65348944\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/subscriptions/update/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"subscriptions",
++										"update",
++										""
++									]
++								},
++								"description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is added to the old one,\nand a new payment is created to reflect coverage to next expiry date."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "PUT",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/subscriptions/update/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"subscriptions",
++												"update",
++												""
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"account\": \"ullamco\",\n  \"plan\": -53650531,\n  \"expiration\": \"1969-04-11\"\n}"
++								}
++							]
++						},
++						{
++							"name": "subscriptions update partial update",
++							"request": {
++								"method": "PATCH",
++								"header": [
++									{
++										"key": "Content-Type",
++										"value": "application/json"
++									},
++									{
++										"key": "Accept",
++										"value": "application/json"
++									}
++								],
++								"body": {
++									"mode": "raw",
++									"raw": "{\n  \"plan\": -65348944\n}",
++									"options": {
++										"raw": {
++											"language": "json"
++										}
++									}
++								},
++								"url": {
++									"raw": "{{baseUrl}}/subscriptions/update/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"subscriptions",
++										"update",
++										""
++									]
++								},
++								"description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is added to the old one,\nand a new payment is created to reflect coverage to next expiry date."
++							},
++							"response": [
++								{
++									"name": "Untitled Response",
++									"originalRequest": {
++										"method": "PATCH",
++										"header": [
++											{
++												"description": "Added as a part of security scheme: basic",
++												"key": "Authorization",
++												"value": "Basic <credentials>"
++											}
++										],
++										"url": {
++											"raw": "{{baseUrl}}/subscriptions/update/",
++											"host": [
++												"{{baseUrl}}"
++											],
++											"path": [
++												"subscriptions",
++												"update",
++												""
++											]
++										}
++									},
++									"status": "OK",
++									"code": 200,
++									"_postman_previewlanguage": "json",
++									"header": [
++										{
++											"key": "Content-Type",
++											"value": "application/json"
++										}
++									],
++									"cookie": [],
++									"body": "{\n  \"account\": \"ullamco\",\n  \"plan\": -53650531,\n  \"expiration\": \"1969-04-11\"\n}"
++								}
++							]
++						}
++					]
++				},
++				{
++					"name": "subscriptions subscribe create",
++					"request": {
++						"method": "POST",
++						"header": [
++							{
++								"key": "Content-Type",
++								"value": "application/json"
++							},
++							{
++								"key": "Accept",
++								"value": "application/json"
++							}
++						],
++						"body": {
++							"mode": "raw",
++							"raw": "{\n  \"plan\": -65348944\n}",
++							"options": {
++								"raw": {
++									"language": "json"
++								}
++							}
++						},
++						"url": {
++							"raw": "{{baseUrl}}/subscriptions/subscribe/",
++							"host": [
++								"{{baseUrl}}"
++							],
++							"path": [
++								"subscriptions",
++								"subscribe",
++								""
++							]
++						},
++						"description": "Allows a user to subscribe. Prerequisites:\n- This account does not have a subscription \n(or a previously cancelled subscription - in which case the UpdateView should instead be used.)\n- This account has registered payment information\n\nThis method creates:\n- a CurrentSubscription entry for this user\n- an entry in PaymentHistory logging this transaction"
++					},
++					"response": [
++						{
++							"name": "Untitled Response",
++							"originalRequest": {
++								"method": "POST",
++								"header": [
++									{
++										"description": "Added as a part of security scheme: basic",
++										"key": "Authorization",
++										"value": "Basic <credentials>"
++									}
++								],
++								"url": {
++									"raw": "{{baseUrl}}/subscriptions/subscribe/",
++									"host": [
++										"{{baseUrl}}"
++									],
++									"path": [
++										"subscriptions",
++										"subscribe",
++										""
++									]
++								}
++							},
++							"status": "Created",
++							"code": 201,
++							"_postman_previewlanguage": "json",
++							"header": [
++								{
++									"key": "Content-Type",
++									"value": "application/json"
++								}
++							],
++							"cookie": [],
++							"body": "{\n  \"account\": \"ullamco\",\n  \"plan\": -53650531,\n  \"expiration\": \"1969-04-11\"\n}"
++						}
++					]
++				}
++			]
++		}
++	],
++	"auth": {
++		"type": "bearer"
++	},
++	"event": [
++		{
++			"listen": "prerequest",
++			"script": {
++				"type": "text/javascript",
++				"exec": [
++					""
++				]
++			}
++		},
++		{
++			"listen": "test",
++			"script": {
++				"type": "text/javascript",
++				"exec": [
++					""
++				]
++			}
++		}
++	],
++	"variable": [
++		{
++			"key": "baseUrl",
++			"value": "http://127.0.0.1:8000",
++			"type": "string"
++		},
++		{
++			"key": "latitude",
++			"value": "eiusmod veniam ullamco",
++			"type": "any"
++		},
++		{
++			"key": "longitude",
++			"value": "eiusmod veniam ullamco",
++			"type": "any"
++		},
++		{
++			"key": "token",
++			"value": "",
++			"type": "default"
++		},
++		{
++			"key": "studio_id",
++			"value": "",
++			"type": "default"
++		},
++		{
++			"key": "studio",
++			"value": "",
++			"type": "default"
++		},
++		{
++			"key": "account_id",
++			"value": "",
++			"type": "default"
++		}
++	]
++}
+\ No newline at end of file
+
+commit 56c2287e8b0821612cf4183d4f15166e0933446d
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 16:45:35 2022 -0500
+
+    startup working w/ migrations deleted
+
+diff --git a/startup.sh b/startup.sh
+index 3abee7b..1cd986c 100755
+--- a/startup.sh
++++ b/startup.sh
+@@ -3,7 +3,6 @@
+ python3.10 -m venv env
+ source env/bin/activate
+ python3 -m pip install -r requirements.txt --force-reinstall
+-python3 manage.py migrate
+ python3 manage.py makemigrations
+ python3 manage.py migrate
+ 
+
+commit 1bd60fe79e6193cf500964f72699796e09fdf0e3
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 16:34:47 2022 -0500
+
+    chmod startup script
+
+diff --git a/startup.sh b/startup.sh
+old mode 100644
+new mode 100755
+
+commit 1a20713860239d7bc3b5c5ae6de9537b634d58b4
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 16:32:36 2022 -0500
+
+    add startup.sh
+
+diff --git a/startup.sh b/startup.sh
+new file mode 100644
+index 0000000..3abee7b
+--- /dev/null
++++ b/startup.sh
+@@ -0,0 +1,9 @@
++#!/bin/sh
++
++python3.10 -m venv env
++source env/bin/activate
++python3 -m pip install -r requirements.txt --force-reinstall
++python3 manage.py migrate
++python3 manage.py makemigrations
++python3 manage.py migrate
++
+
+commit bd32bc666fc6b446eb4ec8981a2a390dd2bc906c
+Merge: 25589b4 e8365e8
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Sat Nov 19 16:18:49 2022 -0500
+
+    Merge pull request #28 from nathan-hansen/subscriptions-change
+    
+    Changed subscriptions so that when subscription is updated, new expir…
+
+commit e8365e8dd69eaede33ccd7c6573437eb4ba9bb10
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sat Nov 19 16:15:08 2022 -0500
+
+    Changed subscriptions so that when subscription is updated, new expiry date gets added to old one, and a new payment history based on the update is created upon update. Made payment history create a helper function. Changed upcoming payment generator to work on subscription expiry date and not past payment. Minor corrections to tests. Changed docstring. Altered subscription and payment models to use Datefield.
+
+diff --git a/accounts/tests.py b/accounts/tests.py
+index 0a808d6..b5f504b 100644
+--- a/accounts/tests.py
++++ b/accounts/tests.py
+@@ -90,7 +90,7 @@ class AccountTestCase(TestCase):
+         access_token = response.data['access']
+ 
+         avatar = open('./tests/wojak.jpg', 'rb')
+-        response = self.client.post('/accounts/update/', {
++        response = self.client.put('/accounts/update/', {
+             'username': self.username,
+             'password': self.password,
+             'first_name': 'test',
+diff --git a/generate_payments.py b/generate_payments.py
+index c7bf903..05ba8ae 100644
+--- a/generate_payments.py
++++ b/generate_payments.py
+@@ -22,13 +22,10 @@ def generate_payments_today():
+             pay_time_str = response_data.get('timestamp')
+             # convert datetime string in serialized object to datetime object
+             # source: https://stackoverflow.com/a/13182163
+-            pay_time = datetime.datetime.fromisoformat(pay_time_str)
+-            # test_time = pay_time.replace(month=pay_time.month - 1)
+-            # convert to a date object, just want year, month, day
+-            pay_time_date = datetime.datetime.date(pay_time)
++            pay_time = datetime.date.fromisoformat(pay_time_str)
++            test_time = pay_time.replace(year=pay_time.year - 1, month=pay_time.month - 1)
+             # in order to compare if payment is due today
+-            # test_time = datetime.datetime.date(test_time)
+-            if pay_time_date == datetime.date.today():  # check if payment time is today
++            if test_time == datetime.date.today():  # check if payment time is today
+                 # deserialize response data and save the PaymentHistory object
+                 payment_history = PaymentHistorySerializer(data=response_data)
+                 # check if deserialized is valid
+diff --git a/payments/functions.py b/payments/functions.py
+index ff07bf1..276cc12 100644
+--- a/payments/functions.py
++++ b/payments/functions.py
+@@ -10,54 +10,58 @@ import datetime
+ 
+ def generate_upcoming_payment(account_id: int):
+     """
+-    Take in an account id and generate the serialized most recent Payment History
+-    of that account from the database, or return an error.
++    Take in an account id and return Upcoming payment based on the subscription plan
++    and payment of that account from the database (returned as serialized Payment History),
++    and return the recurrence interval, or return an error.
+     """
+     current_account = get_object_or_404(Account, id=account_id)
+     # check if user has a subscription or payment info
+     # check if payment info with this user exists, if not, raise error
+     if not PaymentInfo.objects.filter(account=current_account).exists():
+-        return {'error': 'No upcoming payments, User has no payment info'}, None, None
++        return {'error': 'No upcoming payments, User has no payment info'}, None
+     if not CurrentSubscription.objects.filter(account=current_account).exists():
+-        return {'error': 'No upcoming payments, User is not subscribed'}, None, None
++        return {'error': 'No upcoming payments, User is not subscribed'}, None
+     # get object or 404 should never trigger here, due to checks above
+     current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
+-    # check if current subscription is expired
+-    # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
+-    timezone_info = current_subscription.expiration.tzinfo
+-    if current_subscription.expiration < datetime.datetime.now(timezone_info):
+-        return {'error': 'No upcoming payments, subscription expired'}, None, None
+-
+     # if current subscription is null, return accordingly
+     if current_subscription.plan is None:
+-        return {'error': 'You are not subscribed'}, None, None
++        return {'error': 'You are not subscribed'}, None
++    # check if current subscription is expired
++    if current_subscription.expiration < datetime.date.today():
++        return {'error': 'No upcoming payments, subscription expired'}, None
++
+     # id of the plan should be stored in plan attribute
+     current_plan_id = current_subscription.plan.id
+     sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
++    # get the amount paid based on current subscription plan
+     amount = sub_plan.payment
++    # Find the recurrence of the current subscription plan
++    interval = sub_plan.interval
+ 
+-    # get the most recent past Payment and record payment info and time it was made
+-    history_queryset = PaymentHistory.objects.filter(account=current_account).filter(
+-        timestamp__lte=timezone.now())
+-    most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
+-    # user payment credentials
++    # user payment credentials from current payment method
+     user_payment_info = PaymentInfo.objects.filter(account=current_account)[0]
+     card_number = user_payment_info.card_number
+     card_expiry = user_payment_info.expiry_date
+-    # set the time attribute of future payment
+-    most_recent_payment_time = most_recent_payment.timestamp
+-    # calculate the date of the upcoming payment
+-    interval = sub_plan.interval
+-    future_time = None
+-    if interval == "monthly":
+-        if most_recent_payment_time.month == 12:
+-            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1, month=1)
+-        else:
+-            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
+-    elif interval == "yearly":
+-        future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
+-    # create PaymentHistory object for upcoming payment
++    # the future time of the payment is based on when the current subscription expires
++    future_time = current_subscription.expiration
+     upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
+                                       card_number=card_number, card_expiry=card_expiry)
+     upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
+-    return upcoming_payment_data, interval, current_subscription.expiration
++    return upcoming_payment_data, interval
++
++
++def create_payment_history(current_account: Account, sub_plan_id: int):
++    """
++    Create a Payment History with timestamp of today for Account current_account
++    based on the subscription plan with id sub_plan_id
++    """
++    current_payment_info = get_object_or_404(PaymentInfo, account=current_account)
++    card_number = current_payment_info.card_number
++    card_expiry = current_payment_info.expiry_date
++    sub_plan = get_object_or_404(SubscriptionPlan, id=sub_plan_id)
++    amount = sub_plan.payment
++    today = datetime.date.today()
++    PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number,
++                                  card_expiry=card_expiry)
++    return
++
+diff --git a/payments/models.py b/payments/models.py
+index da41b3a..7dc86de 100644
+--- a/payments/models.py
++++ b/payments/models.py
+@@ -10,7 +10,7 @@ class PaymentInfo(m.Model):
+ 
+ class PaymentHistory(m.Model):
+     account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='payment_history')
+-    timestamp = m.DateTimeField()
++    timestamp = m.DateField()
+     amount = m.FloatField()
+     card_number = m.CharField(max_length=250)
+     card_expiry = m.DateField()
+\ No newline at end of file
+diff --git a/payments/views.py b/payments/views.py
+index b5702e1..48eec44 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -50,7 +50,7 @@ class PaymentInfoUpdateView(UpdateAPIView):
+ 
+ class ListPaymentHistory(ListAPIView):
+     """
+-    Allows a user to view all their past payments on file.
++    Allows a user to view all their past payments on file, sorted by recent.
+     """
+     permission_classes = [IsAuthenticated]
+     serializer_class = PaymentHistorySerializer
+@@ -64,18 +64,18 @@ class ListPaymentHistory(ListAPIView):
+ 
+ class PaymentUpcomingView(APIView):
+     """
+-    Allows a user to view their next upcoming payment, the payment interval, and the end date of the recurrence.
++    Allows a user to view their next upcoming payment, and the payment recurrence interval.
++    The next upcoming payment is when the coverage they have already paid for expires
+     """
+     permission_classes = [IsAuthenticated]
+ 
+     def get(self, request):
+-        payment_history_data, interval, end_payment = generate_upcoming_payment(self.request.user.id)
++        payment_history_data, interval = generate_upcoming_payment(self.request.user.id)
+         if payment_history_data.get('error') is not None:
+             return Response(payment_history_data, status=400)
+         # else create the return data
+         return_data = {"account": payment_history_data.get('account'),
+                        "timestamp": payment_history_data.get('timestamp'), "amount": payment_history_data.get('amount'),
+                        "card_number": payment_history_data.get('card_number'),
+-                       "card_expiry": payment_history_data.get('card_expiry'), "recurrence": interval,
+-                       "end_payment": end_payment}
++                       "card_expiry": payment_history_data.get('card_expiry'), "recurrence": interval}
+         return Response(return_data, status=200)
+diff --git a/subscriptions/models.py b/subscriptions/models.py
+index 1d77be6..e04cf5b 100644
+--- a/subscriptions/models.py
++++ b/subscriptions/models.py
+@@ -1,12 +1,38 @@
++import datetime
++
+ from django.db import models as m
+ from rest_framework.validators import UniqueValidator
+ 
++
+ class SubscriptionPlan(m.Model):
+     payment = m.DecimalField(decimal_places=2, max_digits=12)
+     interval = m.CharField(max_length=16)
+ 
++
+ class CurrentSubscription(m.Model):
+-    account = m.OneToOneField('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription') 
++    account = m.OneToOneField('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
+     plan = m.ForeignKey('SubscriptionPlan', on_delete=m.CASCADE, null=True, blank=True, related_name='current_plan')
+-    expiration = m.DateTimeField(null=True, blank=True)
++    expiration = m.DateField(null=True, blank=True)
+ 
++    def save(self, *args, **kwargs):
++        # use this to override update and change expiry date based on the old value
++        if self.pk:
++            current_sub = CurrentSubscription.objects.get(id=self.pk)
++            current_expiry = current_sub.expiration
++            # if we update and the previous value is Null but new value for plan is not null
++            # set expiration date to today, as if you were creating it
++            if current_expiry is None:
++                current_expiry = datetime.date.today()
++            # if the new updated value is for plan is not None, calculate expiry date
++            if self.plan is not None:
++                plan_interval = self.plan.interval
++                if plan_interval == "monthly":
++                    if current_expiry.month == 12:
++                        self.expiration = current_expiry.replace(year=current_expiry.year + 1, month=1)
++                    else:
++                        self.expiration = current_expiry.replace(month=current_expiry.month + 1)
++                elif plan_interval == "yearly":
++                    self.expiration = current_expiry.replace(year=current_expiry.year + 1)
++            else:
++                self.expiration = None
++        super(CurrentSubscription, self).save(*args, **kwargs)
+diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
+index c119fbd..d41be71 100644
+--- a/subscriptions/serializers.py
++++ b/subscriptions/serializers.py
+@@ -33,32 +33,37 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+         super().validate(data)
+         if 'expiration' in data:
+             raise ValidationError('cannot send expiration value')
+-        else:
+-            try:
+-                interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
+-                today = datetime.datetime.combine(datetime.datetime.today(),
+-                                                  datetime.datetime.min.time())
+-                if interval == 'yearly':
+-                    expiry = today.replace(year=today.year + 1, month=1, day=1)
+-                elif interval == 'monthly':
+-                    if today.month == 12:
+-                        expiry = today.replace(year=today.year + 1, month=1, day=1)
+-                    else:
+-                        expiry = today.replace(month=today.month + 1, day=1)
+-
+-                elif interval == 'weekly':
+-                    pass
+-
+-                elif interval == 'daily':
+-                    pass
+-
+-                data['expiration'] = expiry
+-
+-                return data
+-
+-
+-            except AttributeError:
+-                return data
++        # validate the interval in plan if there is a plan submitted
++        if data.get('plan') is not None:
++            interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
++            if interval not in ("monthly", "yearly"):
++                raise ValidationError('invalid interval')
++        return data
++        # else:
++        #     try:
++        #         interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
++        #         today = datetime.date.today()
++        #         if interval == 'yearly':
++        #             expiry = today.replace(year=today.year + 1, month=1, day=1)
++        #         elif interval == 'monthly':
++        #             if today.month == 12:
++        #                 expiry = today.replace(year=today.year + 1, month=1, day=1)
++        #             else:
++        #                 expiry = today.replace(month=today.month + 1, day=1)
++        #
++        #         elif interval == 'weekly':
++        #             pass
++        #
++        #         elif interval == 'daily':
++        #             pass
++        #
++        #         data['expiration'] = expiry
++        #
++        #         return data
++        #
++        #
++        #     except AttributeError:
++        #         return data
+ 
+     # reference to override create method to pre-set attribute to logged-in user:
+     # https://stackoverflow.com/a/58430009
+@@ -66,8 +71,7 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+         current_account_id = self.context['request'].user.id
+         current_account = get_object_or_404(Account, pk=current_account_id)
+         interval = SubscriptionPlan.objects.get(id=validated_data['plan'].pk).interval
+-        today = datetime.datetime.combine(datetime.datetime.today(),
+-                                          datetime.datetime.min.time())
++        today = datetime.date.today()
+         if interval == 'yearly':
+             expiry = today.replace(year=today.year + 1, month=1, day=1)
+         elif interval == 'monthly':
+@@ -75,11 +79,7 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+                 expiry = today.replace(year=today.year + 1, month=1, day=1)
+             else:
+                 expiry = today.replace(month=today.month + 1, day=1)
+-
+-        elif interval == 'weekly':
+-            pass
+-
+-        elif interval == 'daily':
+-            pass
++        else:
++            raise ValidationError('invalid interval')
+         return CurrentSubscription.objects.create(account=current_account, 
+                                                   plan=validated_data['plan'], expiration=expiry)
+diff --git a/subscriptions/tests.py b/subscriptions/tests.py
+index 38eafb4..eba10d7 100644
+--- a/subscriptions/tests.py
++++ b/subscriptions/tests.py
+@@ -24,14 +24,14 @@ class SubscriptionTest(TestCase):
+                 payment=random.randint(0, 100),
+                 interval=i,
+             )
+-            for i in ["yearly", "monthly", "weekly", "daily"]
++            for i in ["yearly", "monthly"]
+         ]
+ 
+     def test_create_subscription(self):
+         # create a subscription
+         subscription = SubscriptionPlan.objects.create(
+             payment=10.00,
+-            interval=random.choice(["monthly", "yearly", "weekly", "daily"]),
++            interval=random.choice(["monthly", "yearly"]),
+         )
+ 
+         # check if subscription is created
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index 2491d5b..1835b4a 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -12,6 +12,7 @@ from payments.models import PaymentInfo, PaymentHistory
+ from accounts.models import Account
+ from rest_framework.response import Response
+ import datetime
++from payments.functions import create_payment_history
+ 
+ 
+ class SubscribeView(generics.CreateAPIView):
+@@ -46,25 +47,18 @@ class SubscribeView(generics.CreateAPIView):
+             return Response({'error': 'User does not have Payment Info to subscribe'}, status=400)
+         # otherwise keep the existing create view api logic
+         created_subscription = super(SubscribeView, self).create(request, *args, **kwargs)
++        new_current_sub_plan_id = created_subscription.data.get('plan')
+ 
+         # Create Payment History
+-        current_payment_info = get_object_or_404(PaymentInfo, account=current_account)
+-        card_number = current_payment_info.card_number
+-        card_expiry = current_payment_info.expiry_date
+-        new_current_sub_plan_id = created_subscription.data.get('plan')
+-        sub_plan = get_object_or_404(SubscriptionPlan, id=new_current_sub_plan_id)
+-        amount = sub_plan.payment
+-        today = datetime.datetime.combine(datetime.datetime.today(),
+-                                          datetime.datetime.min.time())
+-        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number,
+-                                      card_expiry=card_expiry)
++        create_payment_history(current_account, new_current_sub_plan_id)
+         return created_subscription
+ 
+ 
+ class UpdateSubscriptionView(generics.UpdateAPIView):
+     """
+     Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).
+-    If a user changes to a non-null subscription plan, the newer expiry date is used.
++    If a user changes to a non-null subscription plan, the newer expiry date is added to the old one,
++    and a new payment is created to reflect coverage to next expiry date.
+     """
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+@@ -74,5 +68,9 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
+         current_account = get_object_or_404(Account, id=self.request.user.id)
+         # use get object or 404 because we are updating specific current subscription with an id and account
+         # use current_account because we only want logged-in user to be able to edit their subscriptions
+-        return get_object_or_404(CurrentSubscription, account=current_account)
++        current_sub = get_object_or_404(CurrentSubscription, account=current_account)
++        sub_plan_id = self.request.data['plan']
++        if sub_plan_id != "":  # if the user did not unsubscribe, but picked yearly or monthly
++            create_payment_history(current_account, sub_plan_id)
++        return current_sub
+         # will return "Not found" if current subscription does not belong to user
+
+commit 25589b42c308c7cc501c3de7cd8f254384d809ad
+Merge: 5460b52 6d3bfb8
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 14:02:57 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 5460b52af547c55696f4af40edbccf88f9e0644b
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 14:02:55 2022 -0500
+
+    fix account signup swagger
+
+diff --git a/accounts/views.py b/accounts/views.py
+index 37f3417..e526d20 100644
+--- a/accounts/views.py
++++ b/accounts/views.py
+@@ -1,4 +1,6 @@
+ from django.shortcuts import render
++from drf_yasg.utils import swagger_auto_schema
++from drf_yasg import openapi
+ from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
+ from rest_framework.permissions import IsAuthenticated, AllowAny
+ from accounts.models import Account
+@@ -18,6 +20,7 @@ class SignUpView(APIView):
+     permission_classes = (AllowAny,)
+     serializer_class = SignupSerializer
+ 
++    @swagger_auto_schema(request_body=SignupSerializer)
+     def post(self, request):
+         sign_up_serializer = self.serializer_class(data=request.data)
+         sign_up_serializer.is_valid(raise_exception=True)
+
+commit 6d3bfb8b952e9a2ea5581142527827fe92326f20
+Merge: b7bbb5d 17c9f2f
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 13:59:47 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit b7bbb5d8c41b5cec9c92291d2eec96dca6900d0b
+Merge: e4c7fc6 503cb34
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 13:59:27 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 17c9f2f6963e177db001c76d0712bcfe074ebd3f
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 13:59:25 2022 -0500
+
+    override update method
+
+diff --git a/classes/models.py b/classes/models.py
+index 2c0510f..88fc17a 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -27,6 +27,12 @@ class Class(m.Model):
+             raise ValidationError('Class start date cannot be later than class end date')
+ 
+         return super().clean()
++    
++    def update(self, *args, **kwargs):
++        if 'class_start' in kwargs or 'class_end' in kwargs or 'class_time' in kwargs:
++            self.edit_time()
++
++        return super().update(*args, **kwargs)
+ 
+     def save(self, *args, **kwargs):
+         super().save(*args, **kwargs)
+@@ -58,6 +64,7 @@ class Class(m.Model):
+         ClassTimeTable.objects.filter(class_id=self, time=time).delete()
+         return True
+ 
++
+ class Keywords(m.Model):
+     classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='keywords')
+     keyword = m.CharField(max_length=250)
+
+commit e4c7fc608958819e9e64f0966824c54a61e8f5e0
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 13:59:20 2022 -0500
+
+    fixed studiolistview test
+
+diff --git a/studios/tests.py b/studios/tests.py
+index ecfaef2..85fed5a 100644
+--- a/studios/tests.py
++++ b/studios/tests.py
+@@ -1,9 +1,10 @@
+ from django.test import TestCase, Client
+ from django.contrib.auth.models import User
+-import random, geopy
+-
++import random
++from geopy.distance import great_circle
+ from studios.models import Studio, StudioImage, Amenities
+ 
++
+ # Create your tests here.
+ class StudioTest(TestCase):
+     studios = []
+@@ -30,7 +31,7 @@ class StudioTest(TestCase):
+                 postal_code="postal_code{}".format(i),
+                 phone_number="1234567890",
+             )
+-            for i in range(random.randint(0, 20))
++            for i in range(1, random.randint(1, 21))
+         ]
+ 
+     def test_list_studio_by_proximity(self):
+@@ -44,18 +45,17 @@ class StudioTest(TestCase):
+                 "/studios/list/{},{}".format(cood[0], cood[1])
+             )
+             self.assertEqual(response.status_code, 200)
+-            self.assertEqual(len(response.data), len(self.studios))
++            self.assertEqual(response.data['count'], len(self.studios))
+ 
+             distance_list = [
+-                (geopy.distance.distance(
++                (great_circle(
+                     (studio.latitude, studio.longitude), cood
+-                ).km, studio)
++                    ), studio)
+                 for studio in self.studios
+             ]
+             distance_list.sort(key=lambda x: x[0])
+ 
+-            # print(response.content)
+             for i in range(len(self.studios)):
+-                self.assertEqual(response.data[i]["name"], distance_list[i][1].name)
++                self.assertEqual(response.data["results"][i]["name"], distance_list[i][1].name)
+         
+ 
+
+commit 503cb34a5fc01eddba37d9e7123ef336dfb6e577
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 13:50:12 2022 -0500
+
+    add manual swagger
+
+diff --git a/classes/views.py b/classes/views.py
+index 4db590c..30e9d65 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -1,4 +1,6 @@
+ from django.shortcuts import get_object_or_404
++from drf_yasg.utils import swagger_auto_schema
++from drf_yasg import openapi
+ from django.utils import timezone
+ from rest_framework import generics
+ from rest_framework.permissions import IsAuthenticated
+@@ -41,12 +43,16 @@ class ListMyClassView(generics.ListAPIView):
+             order_by('classtime__time')
+ 
+ 
++classtime = openapi.Parameter('classtime id', openapi.IN_QUERY, description="Class time", type=openapi.TYPE_STRING)
++user = openapi.Parameter('account id', openapi.IN_QUERY, description="User ID", type=openapi.TYPE_INTEGER)
++op = openapi.Parameter('op', openapi.IN_QUERY, description="Operation: either enroll or drop", type=openapi.TYPE_STRING)
+ class ModifyClassView(APIView):
+     """
+-    Allows a user to enrol or drop a class.
++    Allows a user to enrol or drop a class. You need to login to use this action.
+     """
+     permission_classes = (IsAuthenticated,)
+ 
++    @swagger_auto_schema(manual_parameters=[classtime, user, op], operation_description="Enroll or drop a class")
+     def post(self, request):
+         user = Account.objects.get(id=request.user.id)
+         classtime = request.data.get('timeid')
+@@ -56,7 +62,7 @@ class ModifyClassView(APIView):
+             return Response({'error': 'Missing class or time'}, status=400)
+ 
+         if op not in ['enroll', 'drop']:
+-            return Response({'error': 'Invalid op'}, status=400)
++            return Response({'error': 'op must be either enroll or drop'}, status=400)
+ 
+ 
+         if EnrollClass.check_enroll(user, classtime) and op == 'enroll':
+
+commit ee3a8f150cd9df212ead2ab738a2d3ed4e2f0a2f
+Merge: f12210b 11f7c6c
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Sat Nov 19 12:14:10 2022 -0500
+
+    Merge pull request #27 from nathan-hansen/add-docs
+    
+    Add docs
+
+commit 11f7c6c64e34daac2db7e24f1e32c6092da9ad2c
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 12:13:03 2022 -0500
+
+    added initial docs pdf and swagger json
+
+diff --git a/docs.pdf b/docs.pdf
+new file mode 100644
+index 0000000..162cf27
+Binary files /dev/null and b/docs.pdf differ
+diff --git a/swagger.json b/swagger.json
+new file mode 100644
+index 0000000..b031151
+--- /dev/null
++++ b/swagger.json
+@@ -0,0 +1 @@
++{"swagger": "2.0", "info": {"title": "CSC309 TFC Project Backend", "description": "Built by Letian Cheng, Nathan Hansen, Edward Leung", "version": "v1"}, "host": "localhost:8000", "schemes": ["http"], "basePath": "/", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Basic": {"type": "basic"}}, "security": [{"Basic": []}], "paths": {"/accounts/api/token/refresh/": {"post": {"operationId": "accounts_api_token_refresh_create", "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenRefresh"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenRefresh"}}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/login/": {"post": {"operationId": "accounts_login_create", "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenObtainPair"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenObtainPair"}}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/signup/": {"post": {"operationId": "accounts_signup_create", "description": "Allows a user to register on the website.", "parameters": [], "responses": {"201": {"description": ""}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/update/": {"put": {"operationId": "accounts_update_update", "description": "Allows a user to update their account details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Account"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Account"}}}, "tags": ["accounts"]}, "patch": {"operationId": "accounts_update_partial_update", "description": "Allows a user to update their account details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Account"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Account"}}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/{account_id}/": {"get": {"operationId": "accounts_read", "description": "View a given account.", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Account"}}}, "tags": ["accounts"]}, "parameters": [{"name": "account_id", "in": "path", "required": true, "type": "string"}]}, "/classes/modify/": {"post": {"operationId": "classes_modify_create", "description": "Allows a user to enrol or drop a class.", "parameters": [], "responses": {"201": {"description": ""}}, "tags": ["classes"]}, "parameters": []}, "/classes/{studio_id}/schedule/": {"get": {"operationId": "classes_schedule_list", "description": "Allows a user to view their upcoming enrolled classes in chronological order.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/EnrollClass"}}}}, "tags": ["classes"]}, "parameters": [{"name": "studio_id", "in": "path", "required": true, "type": "string"}]}, "/classes/{studio_id}/upcoming/": {"get": {"operationId": "classes_upcoming_list", "description": "List upcoming classes in a given studio.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/ClassTimeTable"}}}}, "tags": ["classes"]}, "parameters": [{"name": "studio_id", "in": "path", "required": true, "type": "string"}]}, "/payments/add/": {"post": {"operationId": "payments_add_create", "description": "Allows a user to register their credit card details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PaymentInfo"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/PaymentInfo"}}}, "tags": ["payments"]}, "parameters": []}, "/payments/history/": {"get": {"operationId": "payments_history_list", "description": "Allows a user to view all their past payments on file.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/PaymentHistory"}}}}, "tags": ["payments"]}, "parameters": []}, "/payments/upcoming/": {"get": {"operationId": "payments_upcoming_list", "description": "Allows a user to view their next upcoming payment, the payment interval, and the end date of the recurrence.", "parameters": [], "responses": {"200": {"description": ""}}, "tags": ["payments"]}, "parameters": []}, "/payments/update/": {"put": {"operationId": "payments_update_update", "description": "Allows a user to alter their credit card details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PaymentInfo"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/PaymentInfo"}}}, "tags": ["payments"]}, "patch": {"operationId": "payments_update_partial_update", "description": "Allows a user to alter their credit card details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PaymentInfo"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/PaymentInfo"}}}, "tags": ["payments"]}, "parameters": []}, "/studios/list/{latitude},{longitude}": {"get": {"operationId": "studios_list_read", "description": "List Studios by proximity, with optional search and filter capability via parameters.\nNeeds latitude and longitude values passed through the URL to operate.", "parameters": [{"name": "search", "in": "query", "description": "A search term.", "required": false, "type": "string"}], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/Studio"}}}}, "tags": ["studios"]}, "parameters": [{"name": "latitude", "in": "path", "required": true, "type": "string"}, {"name": "longitude", "in": "path", "required": true, "type": "string"}]}, "/studios/{studio}/": {"get": {"operationId": "studios_read", "description": "View Studio information given a Studio ID.", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Studio"}}}, "tags": ["studios"]}, "parameters": [{"name": "studio", "in": "path", "required": true, "type": "string"}]}, "/studios/{studio}/amenities/": {"get": {"operationId": "studios_amenities_list", "description": "View Amenities given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/Amenities"}}}}, "tags": ["studios"]}, "parameters": [{"name": "studio", "in": "path", "required": true, "type": "string"}]}, "/studios/{studio}/images/": {"get": {"operationId": "studios_images_list", "description": "View StudioImages given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/StudioImage"}}}}, "tags": ["studios"]}, "parameters": [{"name": "studio", "in": "path", "required": true, "type": "string"}]}, "/subscriptions/subscribe/": {"post": {"operationId": "subscriptions_subscribe_create", "description": "Allows a user to subscribe. Prerequisites:\n- This account does not have a subscription \n(or a previously cancelled subscription - in which case the UpdateView should instead be used.)\n- This account has registered payment information\n\nThis method creates:\n- a CurrentSubscription entry for this user\n- an entry in PaymentHistory logging this transaction", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CurrentSubscription"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/CurrentSubscription"}}}, "tags": ["subscriptions"]}, "parameters": []}, "/subscriptions/update/": {"put": {"operationId": "subscriptions_update_update", "description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is used.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CurrentSubscription"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/CurrentSubscription"}}}, "tags": ["subscriptions"]}, "patch": {"operationId": "subscriptions_update_partial_update", "description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is used.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CurrentSubscription"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/CurrentSubscription"}}}, "tags": ["subscriptions"]}, "parameters": []}}, "definitions": {"TokenRefresh": {"required": ["refresh"], "type": "object", "properties": {"refresh": {"title": "Refresh", "type": "string", "minLength": 1}, "access": {"title": "Access", "type": "string", "readOnly": true, "minLength": 1}}}, "TokenObtainPair": {"required": ["username", "password"], "type": "object", "properties": {"username": {"title": "Username", "type": "string", "minLength": 1}, "password": {"title": "Password", "type": "string", "minLength": 1}}}, "Account": {"required": ["username"], "type": "object", "properties": {"username": {"title": "Username", "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.", "type": "string", "pattern": "^[\\w.@+-]+$", "maxLength": 150, "minLength": 1}, "first_name": {"title": "First name", "type": "string", "maxLength": 150}, "last_name": {"title": "Last name", "type": "string", "maxLength": 150}, "email": {"title": "Email address", "type": "string", "format": "email", "maxLength": 254}, "avatar": {"title": "Avatar", "type": "string", "readOnly": true, "x-nullable": true, "format": "uri"}, "phone_number": {"title": "Phone number", "type": "string", "pattern": "^\\+?1?\\d{9,15}$", "maxLength": 250, "x-nullable": true}}}, "ClassTimeTable": {"required": ["time", "spotleft"], "type": "object", "properties": {"id": {"title": "ID", "type": "integer", "readOnly": true}, "time": {"title": "Time", "type": "string", "format": "date-time"}, "spotleft": {"title": "Spotleft", "type": "integer"}, "class_detail": {"title": "Class detail", "type": "string", "readOnly": true}}}, "EnrollClass": {"required": ["account", "classtime"], "type": "object", "properties": {"account": {"$ref": "#/definitions/Account"}, "classtime": {"$ref": "#/definitions/ClassTimeTable"}, "class_detail": {"title": "Class detail", "type": "string", "readOnly": true}}}, "PaymentInfo": {"required": ["name_on_card", "card_number", "cvv", "expiry_date"], "type": "object", "properties": {"account": {"title": "Account", "type": "string", "readOnly": true}, "name_on_card": {"title": "Name on card", "type": "string", "maxLength": 250, "minLength": 1}, "card_number": {"title": "Card number", "type": "string", "maxLength": 250, "minLength": 1}, "cvv": {"title": "Cvv", "type": "integer"}, "expiry_date": {"title": "Expiry date", "type": "string", "format": "date"}}}, "PaymentHistory": {"required": ["account", "timestamp", "amount", "card_number", "card_expiry"], "type": "object", "properties": {"account": {"title": "Account", "type": "string"}, "timestamp": {"title": "Timestamp", "type": "string", "format": "date-time"}, "amount": {"title": "Amount", "type": "number"}, "card_number": {"title": "Card number", "type": "string", "maxLength": 250, "minLength": 1}, "card_expiry": {"title": "Card expiry", "type": "string", "format": "date"}}}, "Studio": {"required": ["name", "address", "latitude", "longitude", "postal_code", "phone_number"], "type": "object", "properties": {"name": {"title": "Name", "type": "string", "maxLength": 250, "minLength": 1}, "address": {"title": "Address", "type": "string", "maxLength": 250, "minLength": 1}, "latitude": {"title": "Latitude", "type": "number"}, "longitude": {"title": "Longitude", "type": "number"}, "postal_code": {"title": "Postal code", "type": "string", "maxLength": 250, "minLength": 1}, "phone_number": {"title": "Phone number", "type": "string", "maxLength": 250, "minLength": 1}}}, "Amenities": {"required": ["studio", "amenity_type", "quantity"], "type": "object", "properties": {"studio": {"title": "Studio", "type": "integer"}, "amenity_type": {"title": "Amenity type", "type": "string", "maxLength": 250, "minLength": 1}, "quantity": {"title": "Quantity", "type": "integer"}}}, "StudioImage": {"required": ["studio"], "type": "object", "properties": {"studio": {"title": "Studio", "type": "integer"}, "image": {"title": "Image", "type": "string", "readOnly": true, "format": "uri"}}}, "CurrentSubscription": {"type": "object", "properties": {"account": {"title": "Account", "type": "string", "readOnly": true}, "plan": {"title": "Plan", "type": "integer", "x-nullable": true}, "expiration": {"title": "Expiration", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true}}}}}
+\ No newline at end of file
+
+commit 0562c0aff00ea66ad95b133a39ed25d971eb13ff
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 12:11:38 2022 -0500
+
+    re-added geodjango
+
+diff --git a/requirements.txt b/requirements.txt
+index 9d37047..94b6d06 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -3,4 +3,5 @@ djangorestframework
+ djangorestframework-simplejwt
+ django-filter
+ drf-yasg
++geopy
+ Pillow
+
+commit f12210b677dbb432b9946204778fca720eff4162
+Merge: f12b527 4d614be
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 12:10:21 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit f12b527509fed1183ac5660798a19fa7f1399d59
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 12:10:16 2022 -0500
+
+    removed unused import
+
+diff --git a/studios/views.py b/studios/views.py
+index 8123f9b..8e9a793 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -1,5 +1,4 @@
+ from django.shortcuts import get_object_or_404
+-from geopy.distance import geodesic
+ from rest_framework import generics
+ from rest_framework import filters
+ from django_filters.rest_framework import DjangoFilterBackend
+
+commit 4d614beea0c3caa4cf8775f1edd586fd75b83f4d
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 19 10:42:50 2022 -0500
+
+    add pagination
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 1ca5736..0bdf984 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -53,6 +53,8 @@ REST_FRAMEWORK = {
+         'rest_framework.authentication.BasicAuthentication',
+     ),
+     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
++    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
++    'PAGE_SIZE': 100,
+ }
+ 
+ MIDDLEWARE = [
+
+commit 3f10271b6fbc5cf820e9da34f71dc4800b2e3be2
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 01:13:40 2022 -0500
+
+    replaced default schema details
+
+diff --git a/TFC/urls.py b/TFC/urls.py
+index fa99172..f16e21b 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -25,12 +25,9 @@ from drf_yasg import openapi
+ # template from https://drf-yasg.readthedocs.io/en/stable/readme.html#quickstart
+ schema_view = get_schema_view(
+    openapi.Info(
+-      title="Snippets API",
++      title="CSC309 TFC Project Backend",
+       default_version='v1',
+-      description="Test description",
+-      terms_of_service="https://www.google.com/policies/terms/",
+-      contact=openapi.Contact(email="contact@snippets.local"),
+-      license=openapi.License(name="BSD License"),
++      description="Built by Letian Cheng, Nathan Hansen, Edward Leung",
+    ),
+    public=True,
+    permission_classes=[permissions.AllowAny],
+
+commit 7198547d45ef974cea852dac6000871418e73020
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 00:50:06 2022 -0500
+
+    added initial docstrings for yasg docs
+
+diff --git a/accounts/views.py b/accounts/views.py
+index 5a56904..37f3417 100644
+--- a/accounts/views.py
++++ b/accounts/views.py
+@@ -11,6 +11,9 @@ from rest_framework import status
+ 
+ # Create your views here.
+ class SignUpView(APIView):
++    """
++    Allows a user to register on the website.
++    """
+     # reference: https://thinkster.io/tutorials/django-json-api/authentication
+     permission_classes = (AllowAny,)
+     serializer_class = SignupSerializer
+@@ -24,6 +27,9 @@ class SignUpView(APIView):
+ 
+ 
+ class AccountView(RetrieveAPIView):
++    """
++    View a given account.
++    """
+     serializer_class = AccountSerializer
+ 
+     def get_object(self):
+@@ -31,6 +37,9 @@ class AccountView(RetrieveAPIView):
+ 
+ 
+ class AccountUpdateView(UpdateAPIView):
++    """
++    Allows a user to update their account details.
++    """
+     permission_classes = [IsAuthenticated]
+     # make sure user is logged in
+     serializer_class = AccountSerializer
+diff --git a/classes/views.py b/classes/views.py
+index b352fe3..4db590c 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -12,8 +12,10 @@ from classes.serializers import ClassSerializer, ClassTimeTableSerializer, Enrol
+ 
+ from accounts.models import Account
+ 
+-# Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
++    """
++    List upcoming classes in a given studio.
++    """
+     serializer_class = ClassTimeTableSerializer
+     search_fields = ['classid__name', 'classid__coach', 'classid__duration', 'time']
+     filterset_fields = search_fields
+@@ -26,6 +28,9 @@ class ListUpcomingClassView(generics.ListAPIView):
+ 
+ 
+ class ListMyClassView(generics.ListAPIView):
++    """
++    Allows a user to view their upcoming enrolled classes in chronological order.
++    """
+     permission_classes = (IsAuthenticated,)
+     serializer_class = EnrollClassSerializer
+ 
+@@ -37,6 +42,9 @@ class ListMyClassView(generics.ListAPIView):
+ 
+ 
+ class ModifyClassView(APIView):
++    """
++    Allows a user to enrol or drop a class.
++    """
+     permission_classes = (IsAuthenticated,)
+ 
+     def post(self, request):
+@@ -70,4 +78,4 @@ class ModifyClassView(APIView):
+                 return Response({'error': 'Not enrolled'}, status=400)
+             
+             enroll_class.drop()
+-            return Response({'message': 'Dropped'}, status=200)
+\ No newline at end of file
++            return Response({'message': 'Dropped'}, status=200)
+diff --git a/payments/views.py b/payments/views.py
+index d18a0e3..ba6dbe9 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -14,6 +14,9 @@ import datetime
+ 
+ 
+ class CreatePaymentInfoView(CreateAPIView):
++    """
++    Allows a user to register their credit card details.
++    """
+     permission_classes = [IsAuthenticated]
+     serializer_class = PaymentInfoSerializer
+ 
+@@ -34,6 +37,9 @@ class CreatePaymentInfoView(CreateAPIView):
+ 
+ 
+ class PaymentInfoUpdateView(UpdateAPIView):
++    """
++    Allows a user to alter their credit card details.
++    """
+     permission_classes = [IsAuthenticated]
+     # make sure user is logged in
+     serializer_class = PaymentInfoSerializer
+@@ -43,6 +49,9 @@ class PaymentInfoUpdateView(UpdateAPIView):
+ 
+ 
+ class ListPaymentHistory(ListAPIView):
++    """
++    Allows a user to view all their past payments on file.
++    """
+     permission_classes = [IsAuthenticated]
+     serializer_class = PaymentHistorySerializer
+ 
+@@ -54,6 +63,9 @@ class ListPaymentHistory(ListAPIView):
+ 
+ 
+ class PaymentUpcomingView(APIView):
++    """
++    Allows a user to view their next upcoming payment, the payment interval, and the end date of the recurrence.
++    """
+     permission_classes = [IsAuthenticated]
+ 
+     def get(self, request):
+diff --git a/studios/views.py b/studios/views.py
+index 8e9a793..b30aaaa 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -11,6 +11,10 @@ from studios.models import Studio, StudioImage, Amenities
+ 
+ # user authenticated views
+ class ListStudioByProximityView(generics.ListAPIView):
++    """
++    List Studios by proximity, with optional search and filter capability via parameters.
++    Needs latitude and longitude values passed through the URL to operate.
++    """
+     serializer_class = StudioSerializer
+     filter_backends = [DjangoFilterBackend, filters.SearchFilter]
+     filterset_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
+@@ -38,6 +42,9 @@ class ListStudioByProximityView(generics.ListAPIView):
+         return queryset
+ 
+ class StudioView(generics.RetrieveAPIView):
++    """
++    View Studio information given a Studio ID.
++    """
+     serializer_class = StudioSerializer
+ 
+     def get_object(self):
+@@ -45,11 +52,21 @@ class StudioView(generics.RetrieveAPIView):
+ 
+ # views for related models
+ class ListStudioImagesView(generics.ListAPIView):
++    """
++    View StudioImages given a Studio ID.
++    Intended for use in tandem with StudioView
++    for a comprehensive look at a studio.
++    """
+     serializer_class = StudioImageSerializer
+     def get_queryset(self):
+         return StudioImage.objects.filter(studio=self.kwargs['studio'])
+ 
+ class ListAmenitiesView(generics.ListAPIView):
++    """
++    View Amenities given a Studio ID.
++    Intended for use in tandem with StudioView
++    for a comprehensive look at a studio.
++    """
+     serializer_class = AmenitiesSerializer
+     def get_queryset(self):
+         return Amenities.objects.filter(studio=self.kwargs['studio'])
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index efdcab4..bf2a8b9 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -15,6 +15,16 @@ import datetime
+ 
+ 
+ class SubscribeView(generics.CreateAPIView):
++    """
++    Allows a user to subscribe. Prerequisites:
++    - This account does not have a subscription 
++    (or a previously cancelled subscription - in which case the UpdateView should instead be used.)
++    - This account has registered payment information
++    
++    This method creates:
++    - a CurrentSubscription entry for this user
++    - an entry in PaymentHistory logging this transaction
++    """
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+ 
+@@ -50,6 +60,10 @@ class SubscribeView(generics.CreateAPIView):
+ 
+ 
+ class UpdateSubscriptionView(generics.UpdateAPIView):
++    """
++    Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).
++    If a user changes to a non-null subscription plan, the newer expiry date is used.
++    """
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+ 
+@@ -60,18 +74,3 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
+         # use current_account because we only want logged-in user to be able to edit their subscriptions
+         return get_object_or_404(CurrentSubscription, account=current_account)
+         # will return "Not found" if current subscription does not belong to user
+-
+-# update above handles cancellations by setting to null.
+-# we can optionally reintro this later as a null-only update.
+-# class CancelSubscriptionView(generics.UpdateAPIView):
+-#     permission_classes = [IsAuthenticated]
+-#     serializer_class = CurrentSubscriptionSerializer
+-# 
+-#     # def get_queryset(self):
+-#     #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+-#     def get_object(self, **kwargs):
+-#         current_account = get_object_or_404(Account, id=self.request.user.id)
+-#         # use get object or 404 because we are updating specific current subscription with an id and account
+-#         # use current_account because we only want logged in user to be able to edit their subscriptions
+-#         return get_object_or_404(CurrentSubscription, account=current_account)
+-#         # will return "Not found" if current subscription does not belong to user
+
+commit 032133923f22111af2659b3412fda5ec2f4613ec
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 00:08:45 2022 -0500
+
+    added source for yasg implementation
+
+diff --git a/TFC/urls.py b/TFC/urls.py
+index d30411f..fa99172 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -22,6 +22,7 @@ from drf_yasg.views import get_schema_view
+ from drf_yasg import openapi
+ 
+ 
++# template from https://drf-yasg.readthedocs.io/en/stable/readme.html#quickstart
+ schema_view = get_schema_view(
+    openapi.Info(
+       title="Snippets API",
+
+commit 3a6d5fbe8592de67b1c9a57f1175c8fd1e4578b6
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sat Nov 19 00:05:19 2022 -0500
+
+    added yasg
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 1ca5736..56527cc 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -44,6 +44,7 @@ INSTALLED_APPS = [
+     "payments",
+     "subscriptions",
+     "rest_framework",
++    "drf_yasg",
+ ]
+ 
+ REST_FRAMEWORK = {
+diff --git a/TFC/urls.py b/TFC/urls.py
+index 72a841a..d30411f 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -16,7 +16,24 @@ Including another URLconf
+ from django.conf import settings
+ from django.conf.urls.static import static
+ from django.contrib import admin
+-from django.urls import path, include
++from django.urls import path, include, re_path
++from rest_framework import permissions
++from drf_yasg.views import get_schema_view
++from drf_yasg import openapi
++
++
++schema_view = get_schema_view(
++   openapi.Info(
++      title="Snippets API",
++      default_version='v1',
++      description="Test description",
++      terms_of_service="https://www.google.com/policies/terms/",
++      contact=openapi.Contact(email="contact@snippets.local"),
++      license=openapi.License(name="BSD License"),
++   ),
++   public=True,
++   permission_classes=[permissions.AllowAny],
++)
+ 
+ urlpatterns = [
+     path("api-auth/", include("rest_framework.urls")),
+@@ -26,6 +43,9 @@ urlpatterns = [
+     path('classes/', include('classes.urls')),
+     path('payments/', include('payments.urls')),
+     path('subscriptions/', include('subscriptions.urls')),
++    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
++    re_path(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
++    re_path(r'^redoc/$', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
+ ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+ # add media_URL and MEDIA_ROOT from settings for image urls to work properly
+ 
+
+commit 55c36c3d131605cebded37792c21e99a325df07c
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 18 23:59:35 2022 -0500
+
+    removed geopy, added yasg
+
+diff --git a/requirements.txt b/requirements.txt
+index ef2776f..9d37047 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -2,5 +2,5 @@ Django
+ djangorestframework
+ djangorestframework-simplejwt
+ django-filter
+-geopy
++drf-yasg
+ Pillow
+diff --git a/studios/views.py b/studios/views.py
+index 8123f9b..8e9a793 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -1,5 +1,4 @@
+ from django.shortcuts import get_object_or_404
+-from geopy.distance import geodesic
+ from rest_framework import generics
+ from rest_framework import filters
+ from django_filters.rest_framework import DjangoFilterBackend
+
+commit 104b844966a4e6eaf9f2d73de1050fb02778efd3
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Fri Nov 18 23:46:20 2022 -0500
+
+    Changed Upcoming Payment view to include interval and subscription expiry by modifying generate payment function, changed to "is not None" in said function.
+
+diff --git a/generate_payments.py b/generate_payments.py
+index d438cfc..c7bf903 100644
+--- a/generate_payments.py
++++ b/generate_payments.py
+@@ -16,8 +16,8 @@ def generate_payments_today():
+     user_queryset = Account.objects.all()
+     for user in user_queryset:
+         # input the primary key or id of the account
+-        response_data = generate_upcoming_payment(user.pk)
+-        if response_data.get('account'):
++        response_data = generate_upcoming_payment(user.pk)[0]
++        if response_data.get('account') is not None:
+             # should have returned PaymentHistory
+             pay_time_str = response_data.get('timestamp')
+             # convert datetime string in serialized object to datetime object
+diff --git a/payments/functions.py b/payments/functions.py
+index 194c3c8..ff07bf1 100644
+--- a/payments/functions.py
++++ b/payments/functions.py
+@@ -17,20 +17,20 @@ def generate_upcoming_payment(account_id: int):
+     # check if user has a subscription or payment info
+     # check if payment info with this user exists, if not, raise error
+     if not PaymentInfo.objects.filter(account=current_account).exists():
+-        return {'error': 'No upcoming payments, User has no payment info'}
++        return {'error': 'No upcoming payments, User has no payment info'}, None, None
+     if not CurrentSubscription.objects.filter(account=current_account).exists():
+-        return {'error': 'No upcoming payments, User is not subscribed'}
++        return {'error': 'No upcoming payments, User is not subscribed'}, None, None
+     # get object or 404 should never trigger here, due to checks above
+     current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
+     # check if current subscription is expired
+     # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
+     timezone_info = current_subscription.expiration.tzinfo
+     if current_subscription.expiration < datetime.datetime.now(timezone_info):
+-        return {'error': 'No upcoming payments, subscription expired'}
++        return {'error': 'No upcoming payments, subscription expired'}, None, None
+ 
+     # if current subscription is null, return accordingly
+     if current_subscription.plan is None:
+-        return {'error': 'You are not subscribed'}
++        return {'error': 'You are not subscribed'}, None, None
+     # id of the plan should be stored in plan attribute
+     current_plan_id = current_subscription.plan.id
+     sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
+@@ -60,4 +60,4 @@ def generate_upcoming_payment(account_id: int):
+     upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
+                                       card_number=card_number, card_expiry=card_expiry)
+     upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
+-    return upcoming_payment_data
++    return upcoming_payment_data, interval, current_subscription.expiration
+diff --git a/payments/views.py b/payments/views.py
+index d18a0e3..6decdfb 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -57,7 +57,13 @@ class PaymentUpcomingView(APIView):
+     permission_classes = [IsAuthenticated]
+ 
+     def get(self, request):
+-        return_data = generate_upcoming_payment(self.request.user.id)
+-        if return_data.get('error') is not None:
+-            return Response(return_data, status=400)
++        payment_history_data, interval, end_payment = generate_upcoming_payment(self.request.user.id)
++        if payment_history_data.get('error') is not None:
++            return Response(payment_history_data, status=400)
++        # else create the return data
++        return_data = {"account": payment_history_data.get('account'),
++                       "timestamp": payment_history_data.get('timestamp'), "amount": payment_history_data.get('amount'),
++                       "card_number": payment_history_data.get('card_number'),
++                       "card_expiry": payment_history_data.get('card_expiry'), "recurrence": interval,
++                       "end_payment": end_payment}
+         return Response(return_data, status=200)
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index efdcab4..f188f47 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -20,6 +20,7 @@ class SubscribeView(generics.CreateAPIView):
+ 
+     # add validation logic to create
+     # based off this: https://stackoverflow.com/q/45981835
++
+     def create(self, request, *args, **kwargs):
+         # add code to check if an account with this subscription already exists
+         current_account_id = self.request.user.id
+@@ -45,7 +46,8 @@ class SubscribeView(generics.CreateAPIView):
+         amount = sub_plan.payment
+         today = datetime.datetime.combine(datetime.datetime.today(),
+                                           datetime.datetime.min.time())
+-        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number, card_expiry=card_expiry)
++        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number,
++                                      card_expiry=card_expiry)
+         return created_subscription
+ 
+ 
+
+commit da011ae631652918b9b33dc06911763d6a93a4c5
+Merge: 85093e3 885d235
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Fri Nov 18 22:46:20 2022 -0500
+
+    Merge pull request #25 from nathan-hansen/studio-filter
+    
+    studio search/filter working
+
+commit 885d235486edac98537d0970d34eaab4a879c5ae
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 18 20:42:22 2022 -0500
+
+    studio search/filter tentatively working
+
+diff --git a/studios/views.py b/studios/views.py
+index 16b63cc..8123f9b 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -1,6 +1,8 @@
+ from django.shortcuts import get_object_or_404
+ from geopy.distance import geodesic
+ from rest_framework import generics
++from rest_framework import filters
++from django_filters.rest_framework import DjangoFilterBackend
+ from studios.serializers import (
+         StudioSerializer, 
+         StudioImageSerializer, 
+@@ -11,11 +13,30 @@ from studios.models import Studio, StudioImage, Amenities
+ # user authenticated views
+ class ListStudioByProximityView(generics.ListAPIView):
+     serializer_class = StudioSerializer
++    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
++    filterset_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
++    search_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
+     def get_queryset(self):
+         lat = float(self.kwargs['latitude'])
+         lon = float(self.kwargs['longitude'])
+-        print(f'lat: {lat}, lon: {lon}')
+-        return Studio.get_locations_nearby_coords(lat, lon)
++
++        queryset = Studio.get_locations_nearby_coords(lat, lon)
++
++        # search queries
++        # studio_name = self.request.query_params.get('studio_name')
++        # amenity = self.request.query_params.get('amenity')
++        # class_name = self.request.query_params.get('class_name')
++        # coach = self.request.query_params.get('coach')
++        # if studio_name is not None:
++        #     queryset = queryset.filter(name=studio_name)
++        # if amenity is not None:
++        #     # get amenity if exists
++        #     amenity_queryset = Amenities.objects.filter(amenity_type=amenity)
++
++
++
++
++        return queryset
+ 
+ class StudioView(generics.RetrieveAPIView):
+     serializer_class = StudioSerializer
+
+commit 85093e3311f04f2e0ae3cfbabe0ff162d05d6819
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 18 20:29:28 2022 -0500
+
+    test user subscribe
+
+diff --git a/subscriptions/tests.py b/subscriptions/tests.py
+index 7ce503c..38eafb4 100644
+--- a/subscriptions/tests.py
++++ b/subscriptions/tests.py
+@@ -1,3 +1,85 @@
+-from django.test import TestCase
++from django.test import TestCase, Client
++
++import random
++
++from subscriptions.models import SubscriptionPlan, CurrentSubscription
++from accounts.models import Account
++from payments.models import PaymentInfo, PaymentHistory
+ 
+ # Create your tests here.
++class SubscriptionTest(TestCase):
++
++    def setUp(self):
++        # register a user
++        self.user = Account.objects.create_user(
++            username="test_user",
++            email="test@test.com",
++            phone_number="+1234567890",
++            password="test_password",
++        )
++
++        # create a subscription
++        self.subscription = [
++            SubscriptionPlan.objects.create(
++                payment=random.randint(0, 100),
++                interval=i,
++            )
++            for i in ["yearly", "monthly", "weekly", "daily"]
++        ]
++
++    def test_create_subscription(self):
++        # create a subscription
++        subscription = SubscriptionPlan.objects.create(
++            payment=10.00,
++            interval=random.choice(["monthly", "yearly", "weekly", "daily"]),
++        )
++
++        # check if subscription is created
++        self.assertTrue(subscription)
++
++    def test_subscribe(self):
++        client = Client()
++        client.login(username=self.user.username, password="test_password")
++
++        # subscribe to a subscription
++        response = client.post(
++            "/subscriptions/subscribe/",
++            {
++                "plan": self.subscription[0].id,
++            },
++        )
++
++        # should fail because no payment info
++        self.assertEqual(response.status_code, 400)
++        self.assertEqual(response.json(), {"error": "User does not have Payment Info to subscribe"})
++        self.assertFalse(CurrentSubscription.objects.filter(account=self.user).exists())
++
++        # add payment info
++        response = client.post(
++            "/payments/add/",
++            {
++                "card_number": "1234567890123456",
++                "expiry_date": "2023-12-31",
++                "cvv": "123",
++                "name_on_card": "test",
++            },
++        )
++
++        print(response.json())
++        self.assertEqual(response.status_code, 201)
++        self.assertTrue(PaymentInfo.objects.filter(account=self.user).exists())
++
++        # subscribe to a subscription
++        response = client.post(
++            "/subscriptions/subscribe/",
++            {
++                "plan": self.subscription[0].id,
++            },
++        )
++
++        # should succeed
++        self.assertEqual(response.status_code, 201)
++        self.assertTrue(CurrentSubscription.objects.filter(account=self.user).exists())
++        
++
++        
+\ No newline at end of file
+
+commit d0e29f962de586c5a3e1fa38163fb26d895fb782
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 18 19:44:47 2022 -0500
+
+    add two test for studio
+
+diff --git a/studios/tests.py b/studios/tests.py
+index 7ce503c..ecfaef2 100644
+--- a/studios/tests.py
++++ b/studios/tests.py
+@@ -1,3 +1,61 @@
+-from django.test import TestCase
++from django.test import TestCase, Client
++from django.contrib.auth.models import User
++import random, geopy
++
++from studios.models import Studio, StudioImage, Amenities
+ 
+ # Create your tests here.
++class StudioTest(TestCase):
++    studios = []
++
++    def create_user(self):
++        self.username = "test_admin"
++        self.password = User.objects.make_random_password()
++        user, created = User.objects.get_or_create(username=self.username)
++        user.set_password(self.password)
++        user.is_staff = True
++        user.is_superuser = True
++        user.is_active = True
++        user.save()
++        self.user = user
++
++    def setUp(self) -> None:
++        self.create_user()
++        self.studios = [
++            Studio.objects.create(
++                name="studio{}".format(i),
++                address="address{}".format(i),
++                latitude=random.uniform(-90, 90),
++                longitude=random.uniform(-180, 180),
++                postal_code="postal_code{}".format(i),
++                phone_number="1234567890",
++            )
++            for i in range(random.randint(0, 20))
++        ]
++
++    def test_list_studio_by_proximity(self):
++        c = Client()
++        c.login(username=self.username, password=self.password)
++        
++            
++        for i in range(20):
++            cood = (random.uniform(-90, 90), random.uniform(-180, 180))
++            response = c.get(
++                "/studios/list/{},{}".format(cood[0], cood[1])
++            )
++            self.assertEqual(response.status_code, 200)
++            self.assertEqual(len(response.data), len(self.studios))
++
++            distance_list = [
++                (geopy.distance.distance(
++                    (studio.latitude, studio.longitude), cood
++                ).km, studio)
++                for studio in self.studios
++            ]
++            distance_list.sort(key=lambda x: x[0])
++
++            # print(response.content)
++            for i in range(len(self.studios)):
++                self.assertEqual(response.data[i]["name"], distance_list[i][1].name)
++        
++
+
+commit 3e40f7c08e8b2ede0f33639da28478ceeed55996
+Merge: 32bb3e1 9fab4ef
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Fri Nov 18 19:29:15 2022 -0500
+
+    Merge pull request #24 from nathan-hansen/python-shell-script
+    
+    Python shell script
+
+commit 9fab4ef7a32a4aebd4097ab0652f07005311b0d7
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Fri Nov 18 19:04:22 2022 -0500
+
+    Seperated function that calculates upcoming payment history to functions.py, fixed issue in upcoming payment view for 12th month, made a python script to charge upcoming payments due today.
+
+diff --git a/generate_payments.py b/generate_payments.py
+new file mode 100644
+index 0000000..d438cfc
+--- /dev/null
++++ b/generate_payments.py
+@@ -0,0 +1,40 @@
++import os, django
++
++os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
++django.setup()
++from payments.functions import generate_upcoming_payment
++from payments.serializers import PaymentHistorySerializer
++from accounts.models import Account
++import datetime
++
++
++def main():
++    generate_payments_today()
++
++
++def generate_payments_today():
++    user_queryset = Account.objects.all()
++    for user in user_queryset:
++        # input the primary key or id of the account
++        response_data = generate_upcoming_payment(user.pk)
++        if response_data.get('account'):
++            # should have returned PaymentHistory
++            pay_time_str = response_data.get('timestamp')
++            # convert datetime string in serialized object to datetime object
++            # source: https://stackoverflow.com/a/13182163
++            pay_time = datetime.datetime.fromisoformat(pay_time_str)
++            # test_time = pay_time.replace(month=pay_time.month - 1)
++            # convert to a date object, just want year, month, day
++            pay_time_date = datetime.datetime.date(pay_time)
++            # in order to compare if payment is due today
++            # test_time = datetime.datetime.date(test_time)
++            if pay_time_date == datetime.date.today():  # check if payment time is today
++                # deserialize response data and save the PaymentHistory object
++                payment_history = PaymentHistorySerializer(data=response_data)
++                # check if deserialized is valid
++                if payment_history.is_valid():
++                    payment_history.save()
++
++
++if __name__ == '__main__':
++    main()
+diff --git a/generate_payments.sh b/generate_payments.sh
+new file mode 100644
+index 0000000..7182764
+--- /dev/null
++++ b/generate_payments.sh
+@@ -0,0 +1,8 @@
++#! /bin/bash
++if [ $# -ne 0 ]
++then
++    echo "Usage: ./generate_payments.sh no arguments"
++    exit 1
++fi
++
++python3 generate_payments.py
+\ No newline at end of file
+diff --git a/payments/functions.py b/payments/functions.py
+new file mode 100644
+index 0000000..194c3c8
+--- /dev/null
++++ b/payments/functions.py
+@@ -0,0 +1,63 @@
++from subscriptions.models import SubscriptionPlan, CurrentSubscription
++from accounts.models import Account
++from django.utils import timezone
++from django.shortcuts import get_object_or_404
++from payments.models import PaymentInfo, PaymentHistory
++from payments.serializers import PaymentHistorySerializer
++from rest_framework.response import Response
++import datetime
++
++
++def generate_upcoming_payment(account_id: int):
++    """
++    Take in an account id and generate the serialized most recent Payment History
++    of that account from the database, or return an error.
++    """
++    current_account = get_object_or_404(Account, id=account_id)
++    # check if user has a subscription or payment info
++    # check if payment info with this user exists, if not, raise error
++    if not PaymentInfo.objects.filter(account=current_account).exists():
++        return {'error': 'No upcoming payments, User has no payment info'}
++    if not CurrentSubscription.objects.filter(account=current_account).exists():
++        return {'error': 'No upcoming payments, User is not subscribed'}
++    # get object or 404 should never trigger here, due to checks above
++    current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
++    # check if current subscription is expired
++    # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
++    timezone_info = current_subscription.expiration.tzinfo
++    if current_subscription.expiration < datetime.datetime.now(timezone_info):
++        return {'error': 'No upcoming payments, subscription expired'}
++
++    # if current subscription is null, return accordingly
++    if current_subscription.plan is None:
++        return {'error': 'You are not subscribed'}
++    # id of the plan should be stored in plan attribute
++    current_plan_id = current_subscription.plan.id
++    sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
++    amount = sub_plan.payment
++
++    # get the most recent past Payment and record payment info and time it was made
++    history_queryset = PaymentHistory.objects.filter(account=current_account).filter(
++        timestamp__lte=timezone.now())
++    most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
++    # user payment credentials
++    user_payment_info = PaymentInfo.objects.filter(account=current_account)[0]
++    card_number = user_payment_info.card_number
++    card_expiry = user_payment_info.expiry_date
++    # set the time attribute of future payment
++    most_recent_payment_time = most_recent_payment.timestamp
++    # calculate the date of the upcoming payment
++    interval = sub_plan.interval
++    future_time = None
++    if interval == "monthly":
++        if most_recent_payment_time.month == 12:
++            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1, month=1)
++        else:
++            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
++    elif interval == "yearly":
++        future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
++    # create PaymentHistory object for upcoming payment
++    upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
++                                      card_number=card_number, card_expiry=card_expiry)
++    upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
++    return upcoming_payment_data
+diff --git a/payments/serializers.py b/payments/serializers.py
+index 1b6d549..20655c7 100644
+--- a/payments/serializers.py
++++ b/payments/serializers.py
+@@ -27,4 +27,4 @@ class PaymentHistorySerializer(serializers.ModelSerializer):
+ 
+     class Meta:
+         model = PaymentHistory
+-        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
++        fields = ['account', 'timestamp', 'amount', 'card_number', 'card_expiry']
+diff --git a/payments/views.py b/payments/views.py
+index d677d9f..d18a0e3 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -9,6 +9,7 @@ from accounts.models import Account
+ from django.utils import timezone
+ from django.shortcuts import get_object_or_404
+ from rest_framework.response import Response
++from payments.functions import generate_upcoming_payment
+ import datetime
+ 
+ 
+@@ -56,49 +57,7 @@ class PaymentUpcomingView(APIView):
+     permission_classes = [IsAuthenticated]
+ 
+     def get(self, request):
+-        current_account = get_object_or_404(Account, id=self.request.user.id)
+-        # check if user has a subscription or payment info
+-        # check if payment info with this user exists, if not, raise error
+-        if not PaymentInfo.objects.filter(account=current_account).exists():
+-            return Response({'error': 'No upcoming payments, User has no payment info'}, status=400)
+-        if not CurrentSubscription.objects.filter(account=current_account).exists():
+-            return Response({'error': 'No upcoming payments, User is not subscribed'}, status=400)
+-        # get object or 404 should never trigger here, due to checks above
+-        current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
+-        # check if current subscription is expired
+-        # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
+-        timezone_info = current_subscription.expiration.tzinfo
+-        if current_subscription.expiration < datetime.datetime.now(timezone_info):
+-            return Response({'error': 'No upcoming payments, subscription expired'}, status=400)
+-
+-        # if current subscription is null, return accordingly
+-        if current_subscription.plan is None:
+-            return Response({'error': 'You are not subscribed'}, status=400)
+-        # id of the plan should be stored in plan attribute
+-        current_plan_id = current_subscription.plan.id
+-        sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
+-        amount = sub_plan.payment
+-
+-        # get the most recent past Payment and record payment info and time it was made
+-        history_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(
+-            timestamp__lte=timezone.now())
+-        most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
+-        # user payment credentials
+-        user_payment_info = PaymentInfo.objects.filter(account=self.request.user)[0]
+-        card_number = user_payment_info.card_number
+-        card_expiry = user_payment_info.expiry_date
+-        # set the time attribute of future payment
+-        most_recent_payment_time = most_recent_payment.timestamp
+-        # calculate the date of the upcoming payment
+-        interval = sub_plan.interval
+-        future_time = None
+-        if interval == "monthly":
+-            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
+-        elif interval == "yearly":
+-            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
+-        # create PaymentHistory object for upcoming payment
+-        upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
+-                                          card_number=card_number, card_expiry=card_expiry)
+-
+-        upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
+-        return Response(upcoming_payment_data, status=200)
++        return_data = generate_upcoming_payment(self.request.user.id)
++        if return_data.get('error') is not None:
++            return Response(return_data, status=400)
++        return Response(return_data, status=200)
+
+commit ea9f62367eb71fca7e77b9cb344bd8df28daad58
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Fri Nov 18 15:22:29 2022 -0500
+
+    delete migration files from repo
+
+diff --git a/accounts/migrations/0002_alter_account_avatar.py b/accounts/migrations/0002_alter_account_avatar.py
+deleted file mode 100644
+index d5ba06a..0000000
+--- a/accounts/migrations/0002_alter_account_avatar.py
++++ /dev/null
+@@ -1,20 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-17 18:08
+-
+-from django.db import migrations, models
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("accounts", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="account",
+-            name="avatar",
+-            field=models.ImageField(
+-                blank=True, null=True, upload_to="account_avatars/"
+-            ),
+-        ),
+-    ]
+diff --git a/subscriptions/migrations/0002_alter_subscriptionplan_interval.py b/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
+deleted file mode 100644
+index 39e7a70..0000000
+--- a/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
++++ /dev/null
+@@ -1,18 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-16 22:27
+-
+-from django.db import migrations, models
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("subscriptions", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="subscriptionplan",
+-            name="interval",
+-            field=models.CharField(max_length=16),
+-        ),
+-    ]
+diff --git a/subscriptions/migrations/0003_remove_currentsubscription_studio.py b/subscriptions/migrations/0003_remove_currentsubscription_studio.py
+deleted file mode 100644
+index 27c83d8..0000000
+--- a/subscriptions/migrations/0003_remove_currentsubscription_studio.py
++++ /dev/null
+@@ -1,17 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-17 18:15
+-
+-from django.db import migrations
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("subscriptions", "0002_alter_subscriptionplan_interval"),
+-    ]
+-
+-    operations = [
+-        migrations.RemoveField(
+-            model_name="currentsubscription",
+-            name="studio",
+-        ),
+-    ]
+diff --git a/subscriptions/migrations/0004_alter_currentsubscription_account.py b/subscriptions/migrations/0004_alter_currentsubscription_account.py
+deleted file mode 100644
+index 9092a8f..0000000
+--- a/subscriptions/migrations/0004_alter_currentsubscription_account.py
++++ /dev/null
+@@ -1,25 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-17 18:31
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("accounts", "0002_alter_account_avatar"),
+-        ("subscriptions", "0003_remove_currentsubscription_studio"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="currentsubscription",
+-            name="account",
+-            field=models.ForeignKey(
+-                on_delete=django.db.models.deletion.CASCADE,
+-                related_name="account_subscription",
+-                to="accounts.account",
+-                unique=True,
+-            ),
+-        ),
+-    ]
+diff --git a/subscriptions/migrations/0005_alter_currentsubscription_account.py b/subscriptions/migrations/0005_alter_currentsubscription_account.py
+deleted file mode 100644
+index d33aa4a..0000000
+--- a/subscriptions/migrations/0005_alter_currentsubscription_account.py
++++ /dev/null
+@@ -1,24 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-17 18:31
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("accounts", "0002_alter_account_avatar"),
+-        ("subscriptions", "0004_alter_currentsubscription_account"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="currentsubscription",
+-            name="account",
+-            field=models.OneToOneField(
+-                on_delete=django.db.models.deletion.CASCADE,
+-                related_name="account_subscription",
+-                to="accounts.account",
+-            ),
+-        ),
+-    ]
+
+commit 32bb3e1bc4d36833aba3e9613a552b7028dbbcb4
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 18 15:05:47 2022 -0500
+
+    filter
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 21354cf..1ca5736 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -37,6 +37,7 @@ INSTALLED_APPS = [
+     "django.contrib.sessions",
+     "django.contrib.messages",
+     "django.contrib.staticfiles",
++    "django_filters",
+     "accounts",
+     "classes",
+     "studios",
+@@ -51,6 +52,7 @@ REST_FRAMEWORK = {
+         'rest_framework.authentication.SessionAuthentication',
+         'rest_framework.authentication.BasicAuthentication',
+     ),
++    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
+ }
+ 
+ MIDDLEWARE = [
+diff --git a/classes/tests.py b/classes/tests.py
+index 375fba5..70ef6fe 100644
+--- a/classes/tests.py
++++ b/classes/tests.py
+@@ -33,7 +33,7 @@ class TestClasses(TestCase):
+             studio=self.studio,
+             name='fake class future {}'.format(i),
+             description='fake description',
+-            coach='fake coach',
++            coach='fake coach {}'.format(i),
+             class_start=class_start,
+             class_end=class_start + datetime.timedelta(days=random.randint(1, 60)),
+             class_time=datetime.datetime.now().time(),
+@@ -45,7 +45,7 @@ class TestClasses(TestCase):
+             studio=self.studio,
+             name='fake class middle {}'.format(i),
+             description='fake description',
+-            coach='fake coach',
++            coach='fake coach {}'.format(i),
+             class_start=datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 50)),
+             class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(7, 50)),
+             class_time=datetime.datetime.now().time(),
+@@ -59,7 +59,7 @@ class TestClasses(TestCase):
+             studio=self.studio,
+             name='fake class past {}'.format(i),
+             description='fake description',
+-            coach='fake coach',
++            coach='fake coach {}'.format(i),
+             class_start=class_end - datetime.timedelta(days=random.randint(1, 100)),
+             class_end=class_end,
+             class_time=datetime.datetime.now().time(),
+@@ -72,7 +72,7 @@ class TestClasses(TestCase):
+             studio=self.studio,
+             name='class enroll test',
+             description='fake description',
+-            coach='fake coach',
++            coach='fake coach {}'.format(1),
+             class_start=datetime.datetime.now() + datetime.timedelta(days=random.randint(1, 30)),
+             class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(40, 60)),
+             class_time=datetime.datetime.now().time(),
+@@ -99,6 +99,21 @@ class TestClasses(TestCase):
+             filter(classid__in=Class.objects.filter(studio=self.studio)))
+         )
+ 
++        # test if the response is sorted by time
++        for i in range(len(response_list) - 1):
++            self.assertTrue(response_list[i]['time'] <= response_list[i+1]['time'])
++        
++        # test filters
++        response = client.get(f'/classes/{self.studio.id}/upcoming/?classid__coach=fake%20coach%201')
++        self.assertEqual(response.status_code, 200)
++        response_list = json.loads(response.content.decode('utf-8'))
++        self.assertEqual(len(response_list), len(
++            ClassTimeTable.objects.filter(time__gte=timezone.now()).\
++            filter(spotleft__gt=0).\
++            filter(classid__in=Class.objects.filter(studio=self.studio).\
++            filter(coach='fake coach 1')))
++        )
++
+ 
+     def test_enroll(self):
+         self.SetUp()
+diff --git a/classes/urls.py b/classes/urls.py
+index beb9fcc..07179ba 100644
+--- a/classes/urls.py
++++ b/classes/urls.py
+@@ -9,8 +9,8 @@ from classes.views import (
+ app_name = 'classes'
+ 
+ urlpatterns = [
+-    path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='upcoming'),
+-    path('<int:studio_id>/schedule/', ListMyClassView.as_view(), name='schedule'),
+-    path('modify/', ModifyClassView.as_view(), name='modify'),
++    path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='class-upcoming'),
++    path('<int:studio_id>/schedule/', ListMyClassView.as_view(), name='class-schedule'),
++    path('modify/', ModifyClassView.as_view(), name='class-modify'),
+ ]
+ 
+diff --git a/classes/views.py b/classes/views.py
+index 2d293d6..b352fe3 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -4,6 +4,7 @@ from rest_framework import generics
+ from rest_framework.permissions import IsAuthenticated
+ from rest_framework.response import Response
+ from rest_framework.views import APIView
++import django_filters.rest_framework
+ from django.db.models import Prefetch
+ 
+ from classes.models import Class, ClassTimeTable, EnrollClass
+@@ -14,6 +15,8 @@ from accounts.models import Account
+ # Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
+     serializer_class = ClassTimeTableSerializer
++    search_fields = ['classid__name', 'classid__coach', 'classid__duration', 'time']
++    filterset_fields = search_fields
+ 
+     def get_queryset(self):
+         return ClassTimeTable.objects.filter(time__gte=timezone.now()).\
+diff --git a/requirements.txt b/requirements.txt
+index 77c9896..ef2776f 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -1,5 +1,6 @@
+ Django
+ djangorestframework
+ djangorestframework-simplejwt
++django-filter
+ geopy
+ Pillow
+
+commit b927ccfa9e5f619d5ea658b4c07b3f803a9df64e
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 18 14:04:23 2022 -0500
+
+    fixed upcoming payment info
+
+diff --git a/payments/views.py b/payments/views.py
+index 23f508e..d677d9f 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -83,8 +83,10 @@ class PaymentUpcomingView(APIView):
+         history_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(
+             timestamp__lte=timezone.now())
+         most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
+-        card_number = most_recent_payment.card_number
+-        card_expiry = most_recent_payment.card_expiry
++        # user payment credentials
++        user_payment_info = PaymentInfo.objects.filter(account=self.request.user)[0]
++        card_number = user_payment_info.card_number
++        card_expiry = user_payment_info.expiry_date
+         # set the time attribute of future payment
+         most_recent_payment_time = most_recent_payment.timestamp
+         # calculate the date of the upcoming payment
+
+commit 7ce037e0a36fbf355a9f962a38e0b3d6314e5605
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 18 13:56:53 2022 -0500
+
+    added null subscription check
+
+diff --git a/payments/views.py b/payments/views.py
+index 58cae76..23f508e 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -71,6 +71,9 @@ class PaymentUpcomingView(APIView):
+         if current_subscription.expiration < datetime.datetime.now(timezone_info):
+             return Response({'error': 'No upcoming payments, subscription expired'}, status=400)
+ 
++        # if current subscription is null, return accordingly
++        if current_subscription.plan is None:
++            return Response({'error': 'You are not subscribed'}, status=400)
+         # id of the plan should be stored in plan attribute
+         current_plan_id = current_subscription.plan.id
+         sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
+
+commit 69ea1f82d273f9e205b8205e2afdb2dabb3e0026
+Merge: 48b36e9 b617847
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 18 13:35:45 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 48b36e939de93320398af9ef4bb70ba088fc64a5
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 18 13:35:34 2022 -0500
+
+    folded subscriptions cancel into update
+
+diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
+index 29efbe2..c119fbd 100644
+--- a/subscriptions/serializers.py
++++ b/subscriptions/serializers.py
+@@ -58,7 +58,6 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+ 
+ 
+             except AttributeError:
+-                data['expiration'] = None
+                 return data
+ 
+     # reference to override create method to pre-set attribute to logged-in user:
+diff --git a/subscriptions/urls.py b/subscriptions/urls.py
+index 048064a..ec70026 100644
+--- a/subscriptions/urls.py
++++ b/subscriptions/urls.py
+@@ -2,7 +2,7 @@ from django.urls import path
+ from subscriptions.views import (
+         SubscribeView,
+         UpdateSubscriptionView,
+-        CancelSubscriptionView,
++        # CancelSubscriptionView,
+         )
+ 
+ app_name = 'subscriptions'
+@@ -10,6 +10,6 @@ app_name = 'subscriptions'
+ urlpatterns = [
+         path('subscribe/', SubscribeView.as_view()),
+         path('update/', UpdateSubscriptionView.as_view()),
+-        path('cancel/', CancelSubscriptionView.as_view()),
++        # path('cancel/', CancelSubscriptionView.as_view()),
+ ]
+ 
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index 8318e80..efdcab4 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -61,16 +61,17 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
+         return get_object_or_404(CurrentSubscription, account=current_account)
+         # will return "Not found" if current subscription does not belong to user
+ 
+-
+-class CancelSubscriptionView(generics.DestroyAPIView):
+-    permission_classes = [IsAuthenticated]
+-    serializer_class = CurrentSubscriptionSerializer
+-
+-    # def get_queryset(self):
+-    #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+-    def get_object(self, **kwargs):
+-        current_account = get_object_or_404(Account, id=self.request.user.id)
+-        # use get object or 404 because we are updating specific current subscription with an id and account
+-        # use current_account because we only want logged in user to be able to edit their subscriptions
+-        return get_object_or_404(CurrentSubscription, account=current_account)
+-        # will return "Not found" if current subscription does not belong to user
++# update above handles cancellations by setting to null.
++# we can optionally reintro this later as a null-only update.
++# class CancelSubscriptionView(generics.UpdateAPIView):
++#     permission_classes = [IsAuthenticated]
++#     serializer_class = CurrentSubscriptionSerializer
++# 
++#     # def get_queryset(self):
++#     #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
++#     def get_object(self, **kwargs):
++#         current_account = get_object_or_404(Account, id=self.request.user.id)
++#         # use get object or 404 because we are updating specific current subscription with an id and account
++#         # use current_account because we only want logged in user to be able to edit their subscriptions
++#         return get_object_or_404(CurrentSubscription, account=current_account)
++#         # will return "Not found" if current subscription does not belong to user
+
+commit b617847bfb14fdb88f82cce53687c9f87dc4462b
+Merge: 09b33ff 886932f
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 18 13:13:33 2022 -0500
+
+    Merge pull request #22 from nathan-hansen/fix-class-filter
+    
+    Class functions with test
+
+commit 09b33ffca034625d78b9140d248f8ab5573954b8
+Merge: f428438 692d199
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Fri Nov 18 12:56:36 2022 -0500
+
+    Merge pull request #23 from nathan-hansen/build-subscriptions
+    
+    Build subscriptions
+
+commit 692d199d18515eb25e4ae1fdb37cd13721642ec9
+Merge: bbd3d74 186b5ab
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Fri Nov 18 12:48:15 2022 -0500
+
+    Merge pull request #21 from nathan-hansen/build-subscriptions-1
+    
+    fixed subscription expire date not being added, used duplicate code
+
+commit 886932fe4f9a79b14d8a1f0e996c2663635d5a28
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 18 12:37:55 2022 -0500
+
+    class history and schedule
+
+diff --git a/classes/serializers.py b/classes/serializers.py
+index 36489af..a6cdebe 100644
+--- a/classes/serializers.py
++++ b/classes/serializers.py
+@@ -14,7 +14,7 @@ class ClassSerializer(serializers.ModelSerializer):
+     '''As the website admin, I can create/edit a class in a specific studio. 
+     A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
+     capacity, and times. '''
+-    keywords = KeywordsSerializer(many=True, read_only=True)
++    keywords = KeywordsSerializer(many=True)
+     # timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
+ 
+     class Meta:
+@@ -40,7 +40,12 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
+ class EnrollClassSerializer(serializers.ModelSerializer):
+     account = AccountSerializer()
+     classtime = ClassTimeTableSerializer()
++    class_detail = serializers.SerializerMethodField()
+ 
+     class Meta:
+         model = EnrollClass
+-        fields = ['account', 'classtime']
++        fields = ['account', 'classtime', 'class_detail']
++
++    def get_class_detail(self, obj):
++        class_id = obj.classtime.classid
++        return ClassSerializer(class_id).data
+\ No newline at end of file
+diff --git a/classes/tests.py b/classes/tests.py
+index 505ca73..375fba5 100644
+--- a/classes/tests.py
++++ b/classes/tests.py
+@@ -99,6 +99,7 @@ class TestClasses(TestCase):
+             filter(classid__in=Class.objects.filter(studio=self.studio)))
+         )
+ 
++
+     def test_enroll(self):
+         self.SetUp()
+ 
+@@ -179,3 +180,52 @@ class TestClasses(TestCase):
+             self.assertEqual(response.status_code, 400)
+             response = json.loads(response.content.decode('utf-8'))
+             self.assertEqual(response['error'], 'Not enrolled')
++
++        # drop again as another user, should fail
++        Account.objects.create_user(username='test2', password='test')
++        client.login(username='test2', password='test')
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'drop'})
++            self.assertEqual(response.status_code, 400)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertEqual(response['error'], 'Not enrolled')
++
++    def test_class_history(self):
++        self.SetUp()
++
++        client = Client()
++        user1 = Account.objects.create_user(username='test1', password='test')
++        client.login(username='test1', password='test')
++
++        
++        total_list = []
++        # enroll past class
++        for class_ in self.class_past:
++            classtime_list = ClassTimeTable.objects.filter(classid=class_)
++            total_list += classtime_list
++            self.assertTrue(len(classtime_list) != 0)
++
++            for i in classtime_list:
++                response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
++                self.assertEqual(response.status_code, 200)
++                response = json.loads(response.content.decode('utf-8'))
++                self.assertTrue(response['message'] == 'Enrolled')
++
++        # enroll future class
++        for class_ in self.class_future:
++            classtime_list = ClassTimeTable.objects.filter(classid=class_)
++            total_list += classtime_list
++            self.assertTrue(len(classtime_list) != 0)
++
++            for i in classtime_list:
++                response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
++                self.assertEqual(response.status_code, 200)
++                response = json.loads(response.content.decode('utf-8'))
++                self.assertTrue(response['message'] == 'Enrolled')
++
++        # get history and schedule
++        response = client.get(f'/classes/{self.studio.id}/schedule/')
++        self.assertEqual(response.status_code, 200)
++        response = json.loads(response.content.decode('utf-8'))
++        
++        self.assertEqual(len(response), len(total_list))
+\ No newline at end of file
+diff --git a/classes/urls.py b/classes/urls.py
+index 88e3db1..beb9fcc 100644
+--- a/classes/urls.py
++++ b/classes/urls.py
+@@ -10,7 +10,7 @@ app_name = 'classes'
+ 
+ urlpatterns = [
+     path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='upcoming'),
+-    path('history/', ListMyClassView.as_view(), name='history'),
++    path('<int:studio_id>/schedule/', ListMyClassView.as_view(), name='schedule'),
+     path('modify/', ModifyClassView.as_view(), name='modify'),
+ ]
+ 
+diff --git a/classes/views.py b/classes/views.py
+index cbc1868..2d293d6 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -24,13 +24,13 @@ class ListUpcomingClassView(generics.ListAPIView):
+ 
+ class ListMyClassView(generics.ListAPIView):
+     permission_classes = (IsAuthenticated,)
+-    serializer_class = ClassTimeTableSerializer
++    serializer_class = EnrollClassSerializer
+ 
+     def get_queryset(self):
+-        return ClassTimeTable.objects.filter(time__lt=timezone.now()).\
+-            filter(classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
+-            filter(enrollclass__in=EnrollClass.objects.filter(account=self.request.user)).\
+-            order_by('-time')
++        # As a user, I want to see my class schedule and history in chronological order
++        return EnrollClass.objects.filter(account=self.request.user).\
++            filter(classtime__classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
++            order_by('classtime__time')
+ 
+ 
+ class ModifyClassView(APIView):
+
+commit afd51bbba7fea4884f8312960a8555792e9920fd
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 18 11:55:58 2022 -0500
+
+    pass enroll test
+
+diff --git a/classes/models.py b/classes/models.py
+index 146b7e7..2c0510f 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -71,7 +71,18 @@ class ClassTimeTable(m.Model):
+         return f'{self.classid.name} at {self.time}'
+ 
+     def check_full(self):
+-        return self.spotleft != 0
++        return self.spotleft == 0
++
++    def decrease_spot(self):
++        self.spotleft -= 1
++        self.save()
++        return self.spotleft
++
++    def increase_spot(self):
++        self.spotleft += 1
++        self.save()
++        return self.spotleft
++
+ 
+ 
+ class EnrollClass(m.Model):
+@@ -81,10 +92,23 @@ class EnrollClass(m.Model):
+     def enroll(self, account: Account, classtime: ClassTimeTable):
+         self.account = account
+         self.classtime = classtime
++        if self.classtime.check_full():
++            return False
++
++        classtime.decrease_spot()
+         self.save()
++        return True
++
++    def drop(self):
++        self.classtime.increase_spot()
++        self.delete()
++        return True
++
++    def check_enroll(account: Account, classtime: ClassTimeTable):
++        return EnrollClass.objects.filter(account=account, classtime=classtime).exists()
+ 
+-    def check_enroll(self, account: Account, classtime: ClassTimeTable):
+-        return self.objects.filter(account=account, classtime=classtime).exists()
++    def get_user_enroll(account: Account):
++        return EnrollClass.objects.filter(account=account)
+ 
+-    def get_user_enroll(self, account: Account):
+-        return self.objects.filter(account=account)
+\ No newline at end of file
++    def get_class_enroll(classtime: ClassTimeTable):
++        return EnrollClass.objects.filter(classtime=classtime)
+\ No newline at end of file
+diff --git a/classes/serializers.py b/classes/serializers.py
+index 5d8ea95..36489af 100644
+--- a/classes/serializers.py
++++ b/classes/serializers.py
+@@ -29,7 +29,7 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
+ 
+     class Meta:
+         model = ClassTimeTable
+-        fields = ['time', 'spotleft', 'class_detail']
++        fields = ['id', 'time', 'spotleft', 'class_detail']
+         # fields = ['class', 'time', 'spotleft']
+ 
+     def get_class_detail(self, obj):
+diff --git a/classes/tests.py b/classes/tests.py
+index 25c0d34..505ca73 100644
+--- a/classes/tests.py
++++ b/classes/tests.py
+@@ -4,7 +4,9 @@ from django.utils import timezone
+ from django.contrib.auth.models import User
+ from django.test.client import Client
+ from studios.models import Studio
+-from classes.models import Class, ClassTimeTable, Keywords
++from classes.models import Class, ClassTimeTable, Keywords, EnrollClass
++
++from accounts.models import Account
+ 
+ import random, datetime, json
+ 
+@@ -14,6 +16,7 @@ class TestClasses(TestCase):
+     studio = None
+     class_past = [] # list of tuples of (Class, Keywords)
+     class_future = []
++    class_enrolltest = Class
+ 
+     def SetUp(self):
+         self.studio = Studio.objects.create(
+@@ -65,6 +68,19 @@ class TestClasses(TestCase):
+             spots=random.randint(1, 20),
+         ) for i in range(random.randint(1, 10))]
+ 
++        self.class_enrolltest = Class.objects.create(
++            studio=self.studio,
++            name='class enroll test',
++            description='fake description',
++            coach='fake coach',
++            class_start=datetime.datetime.now() + datetime.timedelta(days=random.randint(1, 30)),
++            class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(40, 60)),
++            class_time=datetime.datetime.now().time(),
++            duration=datetime.timedelta(minutes=random.randint(30, 120)),
++            days_inbetween=random.randint(1, 7),
++            spots=1,
++        )
++
+ 
+     def test_classes_upcoming(self):
+         self.SetUp()
+@@ -87,12 +103,79 @@ class TestClasses(TestCase):
+         self.SetUp()
+ 
+         client = Client()
+-        user = User.objects.create_user(username='test', password='test')
+-        client.login(username='test', password='test')
+-
+-        # for i in self.class_future:
+-
+-
+-
++        user1 = Account.objects.create_user(username='test1', password='test')
++        client.login(username='test1', password='test')
++
++        classtime_list = ClassTimeTable.objects.filter(classid=self.class_enrolltest)
++        self.assertTrue(len(classtime_list) != 0)
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
++            self.assertEqual(response.status_code, 200)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertTrue(response['message'] == 'Enrolled')
++
++        # check if the spotleft is 0
++        for i in classtime_list:
++            self.assertTrue(ClassTimeTable.objects.get(id=i.id).spotleft == 0)
++
++        # check if the user is enrolled
++        for i in classtime_list:
++            self.assertTrue(i in [j.classtime for j in EnrollClass.get_user_enroll(account=user1)])
++
++        # enroll again as the same user
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
++            self.assertEqual(response.status_code, 400)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertEqual(response['error'], 'Already enrolled')
++
++        # enroll again as another user, should fail
++        Account.objects.create_user(username='test2', password='test')
++        client.login(username='test2', password='test')
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
++            self.assertEqual(response.status_code, 400)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertEqual(response['error'], 'Class is full')
++
++
++    def test_drop(self):
++        self.SetUp()
+ 
+-            
++        client = Client()
++        user1 = Account.objects.create_user(username='test1', password='test')
++        client.login(username='test1', password='test')
++
++        classtime_list = ClassTimeTable.objects.filter(classid=self.class_enrolltest)
++        self.assertTrue(len(classtime_list) != 0)
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
++            self.assertEqual(response.status_code, 200)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertTrue(response['message'] == 'Enrolled')
++
++        # check if the spotleft is 0
++        for i in classtime_list:
++            self.assertTrue(ClassTimeTable.objects.get(id=i.id).spotleft == 0)
++
++        # drop the class
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'drop'})
++            self.assertEqual(response.status_code, 200)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertTrue(response['message'] == 'Dropped')
++
++        # check if the spotleft is 1
++        for i in classtime_list:
++            self.assertTrue(ClassTimeTable.objects.get(id=i.id).spotleft == 1)
++
++        # check if the user is enrolled
++        for i in classtime_list:
++            self.assertTrue(i not in [j.classtime for j in EnrollClass.get_user_enroll(account=user1)])
++        
++        # drop again
++        for i in classtime_list:
++            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'drop'})
++            self.assertEqual(response.status_code, 400)
++            response = json.loads(response.content.decode('utf-8'))
++            self.assertEqual(response['error'], 'Not enrolled')
+diff --git a/classes/views.py b/classes/views.py
+index 102b7ba..cbc1868 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -9,6 +9,7 @@ from django.db.models import Prefetch
+ from classes.models import Class, ClassTimeTable, EnrollClass
+ from classes.serializers import ClassSerializer, ClassTimeTableSerializer, EnrollClassSerializer
+ 
++from accounts.models import Account
+ 
+ # Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
+@@ -36,7 +37,7 @@ class ModifyClassView(APIView):
+     permission_classes = (IsAuthenticated,)
+ 
+     def post(self, request):
+-        user = request.user
++        user = Account.objects.get(id=request.user.id)
+         classtime = request.data.get('timeid')
+         op = request.data.get('op')
+ 
+@@ -46,10 +47,10 @@ class ModifyClassView(APIView):
+         if op not in ['enroll', 'drop']:
+             return Response({'error': 'Invalid op'}, status=400)
+ 
+-        enroll_class = EnrollClass()
+-        if enroll_class.check_enroll(user, classtime) and op == 'enroll':
++
++        if EnrollClass.check_enroll(user, classtime) and op == 'enroll':
+             return Response({'error': 'Already enrolled'}, status=400)
+-        elif not enroll_class.check_enroll(user, classtime) and op == 'drop':
++        elif not EnrollClass.check_enroll(user, classtime) and op == 'drop':
+             return Response({'error': 'Not enrolled'}, status=400)
+ 
+         classtime_ = get_object_or_404(ClassTimeTable, id=classtime)
+@@ -57,8 +58,13 @@ class ModifyClassView(APIView):
+             return Response({'error': 'Class is full'}, status=400)
+ 
+         if op == 'enroll':
++            enroll_class = EnrollClass()
+             enroll_class.enroll(user, classtime_)
+             return Response({'message': 'Enrolled'}, status=200)
+         elif op == 'drop':
+-            enroll_class.drop(user, classtime_)
++            enroll_class = EnrollClass.objects.get(account=user, classtime=classtime_)
++            if not enroll_class:
++                return Response({'error': 'Not enrolled'}, status=400)
++            
++            enroll_class.drop()
+             return Response({'message': 'Dropped'}, status=200)
+\ No newline at end of file
+
+commit 186b5abbecc38ba07d4a890f6fba3f668882dd52
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Fri Nov 18 01:10:24 2022 -0500
+
+    fixed subscription expire date not being added, used duplicate code
+
+diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
+index 0d5c0ff..29efbe2 100644
+--- a/subscriptions/serializers.py
++++ b/subscriptions/serializers.py
+@@ -25,8 +25,9 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+         fields = [
+             'account',
+             'plan',
++            'expiration',
+         ]
+-        read_only_fields = ['account']
++        read_only_fields = ['account', 'expiration']
+ 
+     def validate(self, data):
+         super().validate(data)
+@@ -65,5 +66,21 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+     def create(self, validated_data):
+         current_account_id = self.context['request'].user.id
+         current_account = get_object_or_404(Account, pk=current_account_id)
++        interval = SubscriptionPlan.objects.get(id=validated_data['plan'].pk).interval
++        today = datetime.datetime.combine(datetime.datetime.today(),
++                                          datetime.datetime.min.time())
++        if interval == 'yearly':
++            expiry = today.replace(year=today.year + 1, month=1, day=1)
++        elif interval == 'monthly':
++            if today.month == 12:
++                expiry = today.replace(year=today.year + 1, month=1, day=1)
++            else:
++                expiry = today.replace(month=today.month + 1, day=1)
++
++        elif interval == 'weekly':
++            pass
++
++        elif interval == 'daily':
++            pass
+         return CurrentSubscription.objects.create(account=current_account, 
+-                                                  plan=validated_data['plan'])
++                                                  plan=validated_data['plan'], expiration=expiry)
+
+commit bbd3d743fe8d1b291f336c1c188836e26cea7a20
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Fri Nov 18 01:03:06 2022 -0500
+
+    Added Upcoming payment view
+
+diff --git a/payments/urls.py b/payments/urls.py
+index dc29403..050f4ef 100644
+--- a/payments/urls.py
++++ b/payments/urls.py
+@@ -3,7 +3,7 @@ from payments.views import (
+         CreatePaymentInfoView,
+         PaymentInfoUpdateView,
+         ListPaymentHistory,
+-        ListPaymentUpcoming,
++        PaymentUpcomingView,
+         )
+ 
+ app_name = 'payments'
+@@ -12,6 +12,6 @@ urlpatterns = [
+         path('add/', CreatePaymentInfoView.as_view()),
+         path('update/', PaymentInfoUpdateView.as_view()),
+         path('history/', ListPaymentHistory.as_view()),
+-        path('upcoming/', ListPaymentUpcoming.as_view()),
++        path('upcoming/', PaymentUpcomingView.as_view()),
+ ]
+ 
+diff --git a/payments/views.py b/payments/views.py
+index c5b453b..58cae76 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -1,12 +1,15 @@
+ from django.shortcuts import render
+ from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
++from rest_framework.views import APIView
+ from rest_framework.permissions import IsAuthenticated, AllowAny
+ from payments.serializers import PaymentInfoSerializer, PaymentHistorySerializer
+ from payments.models import PaymentInfo, PaymentHistory
++from subscriptions.models import SubscriptionPlan, CurrentSubscription
+ from accounts.models import Account
+ from django.utils import timezone
+ from django.shortcuts import get_object_or_404
+ from rest_framework.response import Response
++import datetime
+ 
+ 
+ class CreatePaymentInfoView(CreateAPIView):
+@@ -46,15 +49,51 @@ class ListPaymentHistory(ListAPIView):
+         # first filter by payments of logged-in user, then filter for past payments
+         user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__lte=timezone.now())
+         # then order by most recent and return
+-        return user_queryset.order_by('timestamp')
++        return user_queryset.order_by('-timestamp')
+ 
+ 
+-class ListPaymentUpcoming(ListAPIView):
++class PaymentUpcomingView(APIView):
+     permission_classes = [IsAuthenticated]
+-    serializer_class = PaymentHistorySerializer
+ 
+-    def get_queryset(self):
+-        # first filter by payments of logged-in user, then filter for future payments
+-        user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__gte=timezone.now())
+-        # then order by most recent and return
+-        return user_queryset.order_by('timestamp')
++    def get(self, request):
++        current_account = get_object_or_404(Account, id=self.request.user.id)
++        # check if user has a subscription or payment info
++        # check if payment info with this user exists, if not, raise error
++        if not PaymentInfo.objects.filter(account=current_account).exists():
++            return Response({'error': 'No upcoming payments, User has no payment info'}, status=400)
++        if not CurrentSubscription.objects.filter(account=current_account).exists():
++            return Response({'error': 'No upcoming payments, User is not subscribed'}, status=400)
++        # get object or 404 should never trigger here, due to checks above
++        current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
++        # check if current subscription is expired
++        # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
++        timezone_info = current_subscription.expiration.tzinfo
++        if current_subscription.expiration < datetime.datetime.now(timezone_info):
++            return Response({'error': 'No upcoming payments, subscription expired'}, status=400)
++
++        # id of the plan should be stored in plan attribute
++        current_plan_id = current_subscription.plan.id
++        sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
++        amount = sub_plan.payment
++
++        # get the most recent past Payment and record payment info and time it was made
++        history_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(
++            timestamp__lte=timezone.now())
++        most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
++        card_number = most_recent_payment.card_number
++        card_expiry = most_recent_payment.card_expiry
++        # set the time attribute of future payment
++        most_recent_payment_time = most_recent_payment.timestamp
++        # calculate the date of the upcoming payment
++        interval = sub_plan.interval
++        future_time = None
++        if interval == "monthly":
++            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
++        elif interval == "yearly":
++            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
++        # create PaymentHistory object for upcoming payment
++        upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
++                                          card_number=card_number, card_expiry=card_expiry)
++
++        upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
++        return Response(upcoming_payment_data, status=200)
+
+commit f428438d8cd059b90a4369cd49364be02ae5aee1
+Merge: 75915b0 e9c7666
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Thu Nov 17 22:41:10 2022 -0500
+
+    Merge pull request #20 from nathan-hansen/fix-class-filter
+    
+    Fix class filter
+
+commit 1a33e21d58d05a826493c5121bf34f5c59c53228
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Thu Nov 17 20:33:36 2022 -0500
+
+    Added enforcement in CreateAPiViews for subscription to only make subscription if user has payment info and create a paymentHistory object upon subscribing.
+
+diff --git a/payments/admin.py b/payments/admin.py
+index 8c38f3f..f3fa1fb 100644
+--- a/payments/admin.py
++++ b/payments/admin.py
+@@ -1,3 +1,5 @@
+ from django.contrib import admin
++from payments.models import PaymentHistory
+ 
+ # Register your models here.
++admin.site.register(PaymentHistory)
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index 7fd2db8..8318e80 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -2,14 +2,16 @@ from django.shortcuts import render
+ from rest_framework import generics
+ from rest_framework.permissions import IsAuthenticated
+ from rest_framework import mixins
+-from subscriptions.models import CurrentSubscription
++from subscriptions.models import CurrentSubscription, SubscriptionPlan
+ from subscriptions.serializers import (
+     SubscriptionPlanSerializer,
+     CurrentSubscriptionSerializer,
+ )
+ from django.shortcuts import get_object_or_404
++from payments.models import PaymentInfo, PaymentHistory
+ from accounts.models import Account
+ from rest_framework.response import Response
++import datetime
+ 
+ 
+ class SubscribeView(generics.CreateAPIView):
+@@ -28,8 +30,23 @@ class SubscribeView(generics.CreateAPIView):
+         # check if subscription with this account exists
+         if CurrentSubscription.objects.filter(account=current_account).exists():
+             return Response({'error': 'Subscription already exists for this user'}, status=400)
++        # check if payment info with this user exists, if not, raise error
++        if not PaymentInfo.objects.filter(account=current_account).exists():
++            return Response({'error': 'User does not have Payment Info to subscribe'}, status=400)
+         # otherwise keep the existing create view api logic
+-        return super(SubscribeView, self).create(request, *args, **kwargs)
++        created_subscription = super(SubscribeView, self).create(request, *args, **kwargs)
++
++        # Create Payment History
++        current_payment_info = get_object_or_404(PaymentInfo, account=current_account)
++        card_number = current_payment_info.card_number
++        card_expiry = current_payment_info.expiry_date
++        new_current_sub_plan_id = created_subscription.data.get('plan')
++        sub_plan = get_object_or_404(SubscriptionPlan, id=new_current_sub_plan_id)
++        amount = sub_plan.payment
++        today = datetime.datetime.combine(datetime.datetime.today(),
++                                          datetime.datetime.min.time())
++        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number, card_expiry=card_expiry)
++        return created_subscription
+ 
+ 
+ class UpdateSubscriptionView(generics.UpdateAPIView):
+
+commit e9c7666cc73b507cad3f6a00dfab86fb5419ac63
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Thu Nov 17 17:14:00 2022 -0500
+
+    list upcoming class!!
+
+diff --git a/classes/serializers.py b/classes/serializers.py
+index f286f6d..5d8ea95 100644
+--- a/classes/serializers.py
++++ b/classes/serializers.py
+@@ -10,26 +10,31 @@ class KeywordsSerializer(serializers.ModelSerializer):
+         fields = ('id', 'keyword')
+ 
+ 
++class ClassSerializer(serializers.ModelSerializer):
++    '''As the website admin, I can create/edit a class in a specific studio. 
++    A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
++    capacity, and times. '''
++    keywords = KeywordsSerializer(many=True, read_only=True)
++    # timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
++
++    class Meta:
++        model = Class
++        fields = ['name', 'description', 'coach', 'keywords']
++
+ class ClassTimeTableSerializer(serializers.ModelSerializer):
+     ''' As a user, I want to see the class schedule of a specific studio on its page. 
+     Classes must appear in the order of their start time (from now), and the class information must be shown. 
+     Past or cancelled classes should not be listed.'''
++    class_detail = serializers.SerializerMethodField()
++
+     class Meta:
+         model = ClassTimeTable
+-        fields = ['time', 'spotleft']
++        fields = ['time', 'spotleft', 'class_detail']
+         # fields = ['class', 'time', 'spotleft']
+ 
++    def get_class_detail(self, obj):
++        return ClassSerializer(obj.classid).data
+ 
+-class ClassSerializer(serializers.ModelSerializer):
+-    '''As the website admin, I can create/edit a class in a specific studio. 
+-    A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
+-    capacity, and times. '''
+-    keywords = KeywordsSerializer(many=True, read_only=True)
+-    timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
+-
+-    class Meta:
+-        model = Class
+-        fields = ['name', 'description', 'coach', 'keywords', 'timetable']
+ 
+ 
+ class EnrollClassSerializer(serializers.ModelSerializer):
+diff --git a/classes/tests.py b/classes/tests.py
+index 0830e80..25c0d34 100644
+--- a/classes/tests.py
++++ b/classes/tests.py
+@@ -1,4 +1,6 @@
+ from django.test import TestCase
++from django.utils import timezone
++
+ from django.contrib.auth.models import User
+ from django.test.client import Client
+ from studios.models import Studio
+@@ -64,18 +66,33 @@ class TestClasses(TestCase):
+         ) for i in range(random.randint(1, 10))]
+ 
+ 
+-    def test_classes_list(self):
++    def test_classes_upcoming(self):
+         self.SetUp()
+ 
+         client = Client()
+-        response = client.get('/classes/list/')
++        response = client.get(f'/classes/{self.studio.id}/upcoming/')
+         self.assertEqual(response.status_code, 200)
+         response_list = json.loads(response.content.decode('utf-8'))
+-        print(response_list)
+ 
+         for i in response_list:
+-            print(i['name'])
+-        print(self.class_future)
+-        self.assertEqual(len(response_list), len(self.class_future))
++            self.assertTrue(i['time'] > datetime.datetime.now().strftime('%Y-%m-%d'))
++        
++        self.assertTrue(len(response_list) == len(
++            ClassTimeTable.objects.filter(time__gte=timezone.now()).\
++            filter(spotleft__gt=0).\
++            filter(classid__in=Class.objects.filter(studio=self.studio)))
++        )
++
++    def test_enroll(self):
++        self.SetUp()
++
++        client = Client()
++        user = User.objects.create_user(username='test', password='test')
++        client.login(username='test', password='test')
++
++        # for i in self.class_future:
++
++
++
+ 
+             
+diff --git a/classes/urls.py b/classes/urls.py
+index ee719d6..88e3db1 100644
+--- a/classes/urls.py
++++ b/classes/urls.py
+@@ -9,7 +9,7 @@ from classes.views import (
+ app_name = 'classes'
+ 
+ urlpatterns = [
+-    path('list/', ListUpcomingClassView.as_view(), name='list'),
++    path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='upcoming'),
+     path('history/', ListMyClassView.as_view(), name='history'),
+     path('modify/', ModifyClassView.as_view(), name='modify'),
+ ]
+diff --git a/classes/views.py b/classes/views.py
+index d98fb17..102b7ba 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -12,27 +12,24 @@ from classes.serializers import ClassSerializer, ClassTimeTableSerializer, Enrol
+ 
+ # Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
+-    serializer_class = ClassSerializer
++    serializer_class = ClassTimeTableSerializer
+ 
+     def get_queryset(self):
+-        # https://stackoverflow.com/questions/19223953/django-filtering-from-other-model
+-        return Class.objects.prefetch_related(
+-            Prefetch('timetable',
+-            queryset=ClassTimeTable.objects.\
+-                filter(time__gte=timezone.now()).\
+-                filter(spotleft__gt=0).\
+-                order_by('time'),
+-            to_attr='timetable_upcoming')
+-        )
++        return ClassTimeTable.objects.filter(time__gte=timezone.now()).\
++            filter(spotleft__gt=0).\
++            filter(classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
++            order_by('time')
+ 
+ 
+ class ListMyClassView(generics.ListAPIView):
+     permission_classes = (IsAuthenticated,)
+-    serializer_class = ClassSerializer
++    serializer_class = ClassTimeTableSerializer
+ 
+     def get_queryset(self):
+-        return Class.objects. \
+-            filter(timetable__enrollclass__account=self.request.user)
++        return ClassTimeTable.objects.filter(time__lt=timezone.now()).\
++            filter(classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
++            filter(enrollclass__in=EnrollClass.objects.filter(account=self.request.user)).\
++            order_by('-time')
+ 
+ 
+ class ModifyClassView(APIView):
+
+commit b5bebb8c314d609a459d92406a75177e6a0240a3
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Thu Nov 17 16:50:20 2022 -0500
+
+    Added enforcement in CreateAPiViews to have one PaymentInfo and one CurrentSubscription per Account.
+
+diff --git a/payments/views.py b/payments/views.py
+index 8e0e4f3..c5b453b 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -3,14 +3,31 @@ from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView,
+ from rest_framework.permissions import IsAuthenticated, AllowAny
+ from payments.serializers import PaymentInfoSerializer, PaymentHistorySerializer
+ from payments.models import PaymentInfo, PaymentHistory
++from accounts.models import Account
+ from django.utils import timezone
+ from django.shortcuts import get_object_or_404
++from rest_framework.response import Response
+ 
+ 
+ class CreatePaymentInfoView(CreateAPIView):
+     permission_classes = [IsAuthenticated]
+     serializer_class = PaymentInfoSerializer
+ 
++    # add validation logic to create
++    # based off this: https://stackoverflow.com/q/45981835
++    def create(self, request, *args, **kwargs):
++        # add code to check if an account with this subscription already exists
++        current_account_id = self.request.user.id
++        current_account = get_object_or_404(Account, pk=current_account_id)
++        # it shouldn't ever 404 here because this is an authenticated view
++        # maybe we should add a check here?
++
++        # check if subscription with this account exists
++        if PaymentInfo.objects.filter(account=current_account).exists():
++            return Response({'error': 'Payment Info already exists for this user'}, status=400)
++        # otherwise keep the existing create view api logic
++        return super(CreatePaymentInfoView, self).create(request, *args, **kwargs)
++
+ 
+ class PaymentInfoUpdateView(UpdateAPIView):
+     permission_classes = [IsAuthenticated]
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index e198e94..7fd2db8 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -9,12 +9,28 @@ from subscriptions.serializers import (
+ )
+ from django.shortcuts import get_object_or_404
+ from accounts.models import Account
++from rest_framework.response import Response
+ 
+ 
+ class SubscribeView(generics.CreateAPIView):
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+ 
++    # add validation logic to create
++    # based off this: https://stackoverflow.com/q/45981835
++    def create(self, request, *args, **kwargs):
++        # add code to check if an account with this subscription already exists
++        current_account_id = self.request.user.id
++        current_account = get_object_or_404(Account, pk=current_account_id)
++        # it shouldn't ever 404 here because this is an authenticated view
++        # maybe we should add a check here?
++
++        # check if subscription with this account exists
++        if CurrentSubscription.objects.filter(account=current_account).exists():
++            return Response({'error': 'Subscription already exists for this user'}, status=400)
++        # otherwise keep the existing create view api logic
++        return super(SubscribeView, self).create(request, *args, **kwargs)
++
+ 
+ class UpdateSubscriptionView(generics.UpdateAPIView):
+     permission_classes = [IsAuthenticated]
+
+commit 0154269e662a8d354adf9859ac9eaca18797bbe6
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Thu Nov 17 16:32:20 2022 -0500
+
+    somewhat working; class with valid timetable
+
+diff --git a/accounts/tests.py b/accounts/tests.py
+index 10b82a2..0a808d6 100644
+--- a/accounts/tests.py
++++ b/accounts/tests.py
+@@ -1,6 +1,8 @@
+-from django.test import TestCase
+ import random
+ 
++from django.test import TestCase
++
++
+ # Create your tests here.
+ class AccountTestCase(TestCase):
+     username = 'test' + str(random.randint(1, 100000))
+@@ -75,21 +77,6 @@ class AccountTestCase(TestCase):
+         self.assertTrue('access' in response.data)
+         self.assertTrue(response.data['access'] != refresh_token)
+ 
+-    def test_logout(self):
+-        self.register_and_sign_in()
+-        # without refresh token
+-        response = self.client.post('/accounts/logout/')
+-        self.assertEqual(response.status_code, 401)
+-
+-        # successful logout
+-        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
+-        self.assertEqual(response.status_code, 200)
+-        refresh_token = response.data['refresh']
+-        response = self.client.post('/accounts/logout/', {'refresh': refresh_token})
+-        self.assertEqual(response.status_code, 205)
+-        # refresh token is no longer valid
+-        response = self.client.post('/accounts/api/token/refresh/', {'refresh': refresh_token})
+-        self.assertEqual(response.status_code, 401)
+ 
+     def test_update(self):
+         self.register_and_sign_in()
+diff --git a/classes/models.py b/classes/models.py
+index 5c143ff..146b7e7 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -1,8 +1,10 @@
++from django.core.exceptions import ValidationError
+ import datetime
+ 
+ from django.db import models as m
+ 
+ from accounts.models import Account
++from django.utils.timezone import make_aware
+ 
+ 
+ class Class(m.Model):
+@@ -17,6 +19,15 @@ class Class(m.Model):
+     days_inbetween = m.IntegerField()
+     spots = m.IntegerField()
+ 
++    def __str__(self) -> str:
++        return self.name
++
++    def clean(self):
++        if self.class_start > self.class_end:
++            raise ValidationError('Class start date cannot be later than class end date')
++
++        return super().clean()
++
+     def save(self, *args, **kwargs):
+         super().save(*args, **kwargs)
+         self.set_time()
+@@ -29,11 +40,10 @@ class Class(m.Model):
+         while time_i <= datetime.datetime.combine(self.class_end, self.class_time):
+             ClassTimeTable.objects.create(
+                 classid=self,
+-                time=time_i,
++                time=make_aware(time_i),
+                 spotleft=self.spots,
+             )
+             time_i += datetime.timedelta(days=self.days_inbetween)
+-            print("time_i: {}".format(time_i))
+ 
+         return
+ 
+@@ -57,6 +67,9 @@ class ClassTimeTable(m.Model):
+     time = m.DateTimeField()
+     spotleft = m.IntegerField()
+ 
++    def __str__(self) -> str:
++        return f'{self.classid.name} at {self.time}'
++
+     def check_full(self):
+         return self.spotleft != 0
+ 
+diff --git a/classes/serializers.py b/classes/serializers.py
+index bd28ea5..f286f6d 100644
+--- a/classes/serializers.py
++++ b/classes/serializers.py
+@@ -17,6 +17,7 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
+     class Meta:
+         model = ClassTimeTable
+         fields = ['time', 'spotleft']
++        # fields = ['class', 'time', 'spotleft']
+ 
+ 
+ class ClassSerializer(serializers.ModelSerializer):
+@@ -24,7 +25,7 @@ class ClassSerializer(serializers.ModelSerializer):
+     A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
+     capacity, and times. '''
+     keywords = KeywordsSerializer(many=True, read_only=True)
+-    timetable = ClassTimeTableSerializer(many=True, read_only=True)
++    timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
+ 
+     class Meta:
+         model = Class
+diff --git a/classes/tests.py b/classes/tests.py
+index 7ce503c..0830e80 100644
+--- a/classes/tests.py
++++ b/classes/tests.py
+@@ -1,3 +1,81 @@
+ from django.test import TestCase
++from django.contrib.auth.models import User
++from django.test.client import Client
++from studios.models import Studio
++from classes.models import Class, ClassTimeTable, Keywords
++
++import random, datetime, json
++
+ 
+ # Create your tests here.
++class TestClasses(TestCase):
++    studio = None
++    class_past = [] # list of tuples of (Class, Keywords)
++    class_future = []
++
++    def SetUp(self):
++        self.studio = Studio.objects.create(
++            name='fake studio',
++            address='fake address',
++            latitude=43.6532,
++            longitude=-79.3832,
++            postal_code='M5V 2T6',
++            phone_number='1234567890',
++        )
++
++        class_start = datetime.datetime.now() + datetime.timedelta(days=random.randint(1, 50))
++        self.class_future = [Class.objects.create(
++            studio=self.studio,
++            name='fake class future {}'.format(i),
++            description='fake description',
++            coach='fake coach',
++            class_start=class_start,
++            class_end=class_start + datetime.timedelta(days=random.randint(1, 60)),
++            class_time=datetime.datetime.now().time(),
++            duration=datetime.timedelta(minutes=random.randint(30, 120)),
++            days_inbetween=random.randint(1, 7),
++            spots=random.randint(1, 20),
++        ) for i in range(random.randint(1, 10))]  + \
++        [Class.objects.create(
++            studio=self.studio,
++            name='fake class middle {}'.format(i),
++            description='fake description',
++            coach='fake coach',
++            class_start=datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 50)),
++            class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(7, 50)),
++            class_time=datetime.datetime.now().time(),
++            duration=datetime.timedelta(minutes=random.randint(30, 120)),
++            days_inbetween=random.randint(1, 7),
++            spots=random.randint(1, 20),
++        ) for i in range(random.randint(1, 10))]
++
++        class_end = datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 30))
++        self.class_past = [Class.objects.create(
++            studio=self.studio,
++            name='fake class past {}'.format(i),
++            description='fake description',
++            coach='fake coach',
++            class_start=class_end - datetime.timedelta(days=random.randint(1, 100)),
++            class_end=class_end,
++            class_time=datetime.datetime.now().time(),
++            duration=datetime.timedelta(minutes=random.randint(30, 120)),
++            days_inbetween=random.randint(1, 7),
++            spots=random.randint(1, 20),
++        ) for i in range(random.randint(1, 10))]
++
++
++    def test_classes_list(self):
++        self.SetUp()
++
++        client = Client()
++        response = client.get('/classes/list/')
++        self.assertEqual(response.status_code, 200)
++        response_list = json.loads(response.content.decode('utf-8'))
++        print(response_list)
++
++        for i in response_list:
++            print(i['name'])
++        print(self.class_future)
++        self.assertEqual(len(response_list), len(self.class_future))
++
++            
+diff --git a/classes/views.py b/classes/views.py
+index eb93e24..d98fb17 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -4,9 +4,10 @@ from rest_framework import generics
+ from rest_framework.permissions import IsAuthenticated
+ from rest_framework.response import Response
+ from rest_framework.views import APIView
++from django.db.models import Prefetch
+ 
+ from classes.models import Class, ClassTimeTable, EnrollClass
+-from classes.serializers import ClassSerializer
++from classes.serializers import ClassSerializer, ClassTimeTableSerializer, EnrollClassSerializer
+ 
+ 
+ # Create your views here.
+@@ -15,10 +16,15 @@ class ListUpcomingClassView(generics.ListAPIView):
+ 
+     def get_queryset(self):
+         # https://stackoverflow.com/questions/19223953/django-filtering-from-other-model
+-        return Class.objects. \
+-            filter(timetable__spotleft__gte=1). \
+-            filter(timetable__time__gte=timezone.now()). \
+-                distinct().order_by('timetable__time')
++        return Class.objects.prefetch_related(
++            Prefetch('timetable',
++            queryset=ClassTimeTable.objects.\
++                filter(time__gte=timezone.now()).\
++                filter(spotleft__gt=0).\
++                order_by('time'),
++            to_attr='timetable_upcoming')
++        )
++
+ 
+ class ListMyClassView(generics.ListAPIView):
+     permission_classes = (IsAuthenticated,)
+
+commit 2e9312375291ea2e45fc4449b0fb4d0f4740546a
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Thu Nov 17 14:36:45 2022 -0500
+
+    one to one subscriptions
+
+diff --git a/.gitignore b/.gitignore
+index dd0b9c0..18117f7 100644
+--- a/.gitignore
++++ b/.gitignore
+@@ -2,4 +2,4 @@ __pycache__/
+ db.sqlite3
+ env/
+ images/studios/*
+-images/avatars/*
++images/account_avatars/*
+diff --git a/accounts/migrations/0002_alter_account_avatar.py b/accounts/migrations/0002_alter_account_avatar.py
+new file mode 100644
+index 0000000..d5ba06a
+--- /dev/null
++++ b/accounts/migrations/0002_alter_account_avatar.py
+@@ -0,0 +1,20 @@
++# Generated by Django 4.1.3 on 2022-11-17 18:08
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("accounts", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="account",
++            name="avatar",
++            field=models.ImageField(
++                blank=True, null=True, upload_to="account_avatars/"
++            ),
++        ),
++    ]
+diff --git a/subscriptions/migrations/0003_remove_currentsubscription_studio.py b/subscriptions/migrations/0003_remove_currentsubscription_studio.py
+new file mode 100644
+index 0000000..27c83d8
+--- /dev/null
++++ b/subscriptions/migrations/0003_remove_currentsubscription_studio.py
+@@ -0,0 +1,17 @@
++# Generated by Django 4.1.3 on 2022-11-17 18:15
++
++from django.db import migrations
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("subscriptions", "0002_alter_subscriptionplan_interval"),
++    ]
++
++    operations = [
++        migrations.RemoveField(
++            model_name="currentsubscription",
++            name="studio",
++        ),
++    ]
+diff --git a/subscriptions/migrations/0004_alter_currentsubscription_account.py b/subscriptions/migrations/0004_alter_currentsubscription_account.py
+new file mode 100644
+index 0000000..9092a8f
+--- /dev/null
++++ b/subscriptions/migrations/0004_alter_currentsubscription_account.py
+@@ -0,0 +1,25 @@
++# Generated by Django 4.1.3 on 2022-11-17 18:31
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("accounts", "0002_alter_account_avatar"),
++        ("subscriptions", "0003_remove_currentsubscription_studio"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="currentsubscription",
++            name="account",
++            field=models.ForeignKey(
++                on_delete=django.db.models.deletion.CASCADE,
++                related_name="account_subscription",
++                to="accounts.account",
++                unique=True,
++            ),
++        ),
++    ]
+diff --git a/subscriptions/migrations/0005_alter_currentsubscription_account.py b/subscriptions/migrations/0005_alter_currentsubscription_account.py
+new file mode 100644
+index 0000000..d33aa4a
+--- /dev/null
++++ b/subscriptions/migrations/0005_alter_currentsubscription_account.py
+@@ -0,0 +1,24 @@
++# Generated by Django 4.1.3 on 2022-11-17 18:31
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("accounts", "0002_alter_account_avatar"),
++        ("subscriptions", "0004_alter_currentsubscription_account"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="currentsubscription",
++            name="account",
++            field=models.OneToOneField(
++                on_delete=django.db.models.deletion.CASCADE,
++                related_name="account_subscription",
++                to="accounts.account",
++            ),
++        ),
++    ]
+diff --git a/subscriptions/models.py b/subscriptions/models.py
+index 0489162..1d77be6 100644
+--- a/subscriptions/models.py
++++ b/subscriptions/models.py
+@@ -1,13 +1,12 @@
+ from django.db import models as m
+-
++from rest_framework.validators import UniqueValidator
+ 
+ class SubscriptionPlan(m.Model):
+     payment = m.DecimalField(decimal_places=2, max_digits=12)
+     interval = m.CharField(max_length=16)
+ 
+ class CurrentSubscription(m.Model):
+-    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
+-    studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='studio_subscription')
++    account = m.OneToOneField('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription') 
+     plan = m.ForeignKey('SubscriptionPlan', on_delete=m.CASCADE, null=True, blank=True, related_name='current_plan')
+     expiration = m.DateTimeField(null=True, blank=True)
+ 
+diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
+index 9cb57ad..0d5c0ff 100644
+--- a/subscriptions/serializers.py
++++ b/subscriptions/serializers.py
+@@ -1,4 +1,5 @@
+ from rest_framework.serializers import ModelSerializer, ValidationError
++from rest_framework.validators import UniqueValidator
+ from subscriptions.models import SubscriptionPlan, CurrentSubscription
+ from payments.serializers import PaymentInfoSerializer
+ from accounts.serializers import AccountSerializer
+@@ -23,7 +24,6 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+         model = CurrentSubscription
+         fields = [
+             'account',
+-            'studio',
+             'plan',
+         ]
+         read_only_fields = ['account']
+@@ -65,10 +65,5 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+     def create(self, validated_data):
+         current_account_id = self.context['request'].user.id
+         current_account = get_object_or_404(Account, pk=current_account_id)
+-        return CurrentSubscription.objects.create(account=current_account, studio=validated_data['studio'],
++        return CurrentSubscription.objects.create(account=current_account, 
+                                                   plan=validated_data['plan'])
+-
+-
+-class CreateUserSubscriptionSerializer(ModelSerializer):
+-    payment_info = PaymentInfoSerializer
+-    fields = []
+diff --git a/subscriptions/urls.py b/subscriptions/urls.py
+index 437af5b..048064a 100644
+--- a/subscriptions/urls.py
++++ b/subscriptions/urls.py
+@@ -9,7 +9,7 @@ app_name = 'subscriptions'
+ 
+ urlpatterns = [
+         path('subscribe/', SubscribeView.as_view()),
+-        path('<int:pk>/update/<int:subscription>/', UpdateSubscriptionView.as_view()),
+-        path('<int:pk>/cancel/<int:subscription>/', CancelSubscriptionView.as_view()),
++        path('update/', UpdateSubscriptionView.as_view()),
++        path('cancel/', CancelSubscriptionView.as_view()),
+ ]
+ 
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index 3bd5960..e198e94 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -25,7 +25,7 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
+         current_account = get_object_or_404(Account, id=self.request.user.id)
+         # use get object or 404 because we are updating specific current subscription with an id and account
+         # use current_account because we only want logged-in user to be able to edit their subscriptions
+-        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
++        return get_object_or_404(CurrentSubscription, account=current_account)
+         # will return "Not found" if current subscription does not belong to user
+ 
+ 
+@@ -39,5 +39,5 @@ class CancelSubscriptionView(generics.DestroyAPIView):
+         current_account = get_object_or_404(Account, id=self.request.user.id)
+         # use get object or 404 because we are updating specific current subscription with an id and account
+         # use current_account because we only want logged in user to be able to edit their subscriptions
+-        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
++        return get_object_or_404(CurrentSubscription, account=current_account)
+         # will return "Not found" if current subscription does not belong to user
+
+commit 75915b0cafe00901fa2a0338f4ef6a1f4430be5f
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Thu Nov 17 13:11:00 2022 -0500
+
+    add account test
+
+diff --git a/accounts/tests.py b/accounts/tests.py
+index 7ce503c..10b82a2 100644
+--- a/accounts/tests.py
++++ b/accounts/tests.py
+@@ -1,3 +1,123 @@
+ from django.test import TestCase
++import random
+ 
+ # Create your tests here.
++class AccountTestCase(TestCase):
++    username = 'test' + str(random.randint(1, 100000))
++    password = '123'
++
++    def register_and_sign_in(self):
++        response = self.client.post('/accounts/signup/', {'username': self.username, 'password': self.password, 'password2': self.password})
++        self.assertEqual(response.status_code, 201)
++        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
++        self.assertEqual(response.status_code, 200)
++
++    def test_signup(self):
++        # without any data
++        response = self.client.post('/accounts/signup/')
++        self.assertEqual(response.status_code, 400)
++        # without username
++        response = self.client.post('/accounts/signup/', {'password': '123', 'password2': '123'})
++        self.assertEqual(response.status_code, 400)
++        # without password
++        response = self.client.post('/accounts/signup/', {'username': 'test', 'password2': '123'})
++        self.assertEqual(response.status_code, 400)
++        # without password2
++        response = self.client.post('/accounts/signup/', {'username': 'test', 'password': '123'})
++        self.assertEqual(response.status_code, 400)
++        # password and password2 do not match
++        response = self.client.post('/accounts/signup/', {'username': 'test', 'password': '123', 'password2': '1234'})
++        self.assertEqual(response.status_code, 400)
++        
++        # successful signup
++        response = self.client.post('/accounts/signup/', {'username': self.username, 'password': self.password, 'password2': self.password})
++        self.assertEqual(response.status_code, 201)
++        # username already exists
++        response = self.client.post('/accounts/signup/', {'test': self.username, 'password': self.password, 'password2': self.password})
++        self.assertEqual(response.status_code, 400)
++
++
++    def test_login(self):
++        # successful signup
++        response = self.client.post('/accounts/signup/', {'username': self.username, 'password': self.password, 'password2': self.password})
++        self.assertEqual(response.status_code, 201)
++        # without username
++        response = self.client.post('/accounts/login/', {'password': '123'})
++        self.assertEqual(response.status_code, 400)
++        # without password
++        response = self.client.post('/accounts/login/', {'username': 'test'})
++        self.assertEqual(response.status_code, 400)
++        # user does not exist
++        response = self.client.post('/accounts/login/', {'username': 'test' + str(random.randint(1, 100000)), 'password': '123'})
++        self.assertEqual(response.status_code, 401)
++        # wrong password
++        response = self.client.post('/accounts/login/', {'username': self.username, 'password': '1234'})
++        self.assertEqual(response.status_code, 401)
++
++        # successful login
++        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
++        self.assertEqual(response.status_code, 200)
++        self.assertTrue('access' in response.data)
++        self.assertTrue('refresh' in response.data)
++
++    def test_refresh(self):
++        self.register_and_sign_in()
++        # without refresh token
++        response = self.client.post('/accounts/api/token/refresh/')
++        self.assertEqual(response.status_code, 400)
++
++        # successful refresh
++        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
++        self.assertEqual(response.status_code, 200)
++        refresh_token = response.data['refresh']
++        response = self.client.post('/accounts/api/token/refresh/', {'refresh': refresh_token})
++        self.assertEqual(response.status_code, 200)
++        self.assertTrue('access' in response.data)
++        self.assertTrue(response.data['access'] != refresh_token)
++
++    def test_logout(self):
++        self.register_and_sign_in()
++        # without refresh token
++        response = self.client.post('/accounts/logout/')
++        self.assertEqual(response.status_code, 401)
++
++        # successful logout
++        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
++        self.assertEqual(response.status_code, 200)
++        refresh_token = response.data['refresh']
++        response = self.client.post('/accounts/logout/', {'refresh': refresh_token})
++        self.assertEqual(response.status_code, 205)
++        # refresh token is no longer valid
++        response = self.client.post('/accounts/api/token/refresh/', {'refresh': refresh_token})
++        self.assertEqual(response.status_code, 401)
++
++    def test_update(self):
++        self.register_and_sign_in()
++        # without access token
++        response = self.client.post('/accounts/update/', {'username': self.username, 'password': self.password})
++        self.assertEqual(response.status_code, 401)
++
++        # successful update
++        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
++        self.assertEqual(response.status_code, 200)
++        access_token = response.data['access']
++
++        avatar = open('./tests/wojak.jpg', 'rb')
++        response = self.client.post('/accounts/update/', {
++            'username': self.username,
++            'password': self.password,
++            'first_name': 'test',
++            'last_name': 'test',
++            'email': 'test@test.com',
++            'phone': '1234567890',
++            'avatar': avatar
++            }, HTTP_AUTHORIZATION='Bearer ' + access_token)
++        self.assertEqual(response.status_code, 200)
++        self.assertEqual(response.data['username'], self.username)
++        self.assertEqual(response.data['first_name'], 'test')
++        self.assertEqual(response.data['last_name'], 'test')
++        self.assertEqual(response.data['email'], 'test@test.com')
++        self.assertEqual(response.data['phone'], '1234567890')
++        self.assertTrue('avatar' in response.data)
++        avatar.close()
++
+diff --git a/remigrate.sh b/remigrate.sh
+old mode 100644
+new mode 100755
+diff --git a/tests/wojak.jpg b/tests/wojak.jpg
+new file mode 100644
+index 0000000..c5ef0f2
+Binary files /dev/null and b/tests/wojak.jpg differ
+
+commit b3020889ff43ae1eeaed30cb9c3dd66cce919f72
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Thu Nov 17 10:04:38 2022 -0500
+
+    remove unused dependency
+
+diff --git a/classes/admin.py b/classes/admin.py
+index b3e429e..6a0539a 100644
+--- a/classes/admin.py
++++ b/classes/admin.py
+@@ -5,7 +5,6 @@ from django.http import HttpResponseRedirect
+ from django.template.response import TemplateResponse
+ 
+ from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
+-from classes.forms import ClassCreateTimeForm
+ 
+ # Register your models here.
+ admin.site.register(Keywords)
+
+commit a05cf98309bf241e2cf91f12f04173fd3d1f5d9a
+Merge: 3b307f3 659a269
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Thu Nov 17 09:51:05 2022 -0500
+
+    Merge pull request #11 from nathan-hansen/class-admin-panel
+    
+    Admin Panel change for implementing add class time
+
+commit 1d51f301907c091f2050a078b4b859e3da2b7a35
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Thu Nov 17 01:53:24 2022 -0500
+
+    added fixes PaymentInfo and CurrentSubscription views, changed urls file to add logout in browsable API, changed serializers and views so logged in users can only access their subscriptions and payments.
+
+diff --git a/TFC/urls.py b/TFC/urls.py
+index c01d095..72a841a 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -19,6 +19,7 @@ from django.contrib import admin
+ from django.urls import path, include
+ 
+ urlpatterns = [
++    path("api-auth/", include("rest_framework.urls")),
+     path('admin/', admin.site.urls),
+     path('accounts/', include('accounts.urls')),
+     path('studios/', include('studios.urls')),
+diff --git a/payments/serializers.py b/payments/serializers.py
+index 4ca7603..1b6d549 100644
+--- a/payments/serializers.py
++++ b/payments/serializers.py
+@@ -1,6 +1,8 @@
+ from rest_framework import serializers
+ from payments.models import PaymentInfo, PaymentHistory
+ from accounts.serializers import AccountSerializer
++from django.shortcuts import get_object_or_404
++from accounts.models import Account
+ 
+ 
+ class PaymentInfoSerializer(serializers.ModelSerializer):
+@@ -9,6 +11,15 @@ class PaymentInfoSerializer(serializers.ModelSerializer):
+     class Meta:
+         model = PaymentInfo
+         fields = ['account', 'name_on_card', 'card_number', 'cvv', 'expiry_date']
++        read_only_fields = ['account']
++
++    # override create method to pre-set the account attribute
++    def create(self, validated_data):
++        current_account_id = self.context['request'].user.id
++        current_account = get_object_or_404(Account, pk=current_account_id)
++        return PaymentInfo.objects.create(account=current_account, name_on_card=validated_data['name_on_card'],
++                                          card_number=validated_data['card_number'], cvv=validated_data['cvv'],
++                                          expiry_date=validated_data['expiry_date'])
+ 
+ 
+ class PaymentHistorySerializer(serializers.ModelSerializer):
+diff --git a/payments/views.py b/payments/views.py
+index cef08fa..8e0e4f3 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -37,7 +37,7 @@ class ListPaymentUpcoming(ListAPIView):
+     serializer_class = PaymentHistorySerializer
+ 
+     def get_queryset(self):
+-        # first filter by payments of logged-in user, then filter for past payments
++        # first filter by payments of logged-in user, then filter for future payments
+         user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__gte=timezone.now())
+         # then order by most recent and return
+         return user_queryset.order_by('timestamp')
+diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
+index ee309bd..9cb57ad 100644
+--- a/subscriptions/serializers.py
++++ b/subscriptions/serializers.py
+@@ -1,26 +1,33 @@
+ from rest_framework.serializers import ModelSerializer, ValidationError
+ from subscriptions.models import SubscriptionPlan, CurrentSubscription
+ from payments.serializers import PaymentInfoSerializer
++from accounts.serializers import AccountSerializer
++from accounts.models import Account
++from django.shortcuts import get_object_or_404
+ import datetime
+ 
++
+ class SubscriptionPlanSerializer(ModelSerializer):
+     class Meta:
+         model = SubscriptionPlan
+         fields = [
+-                'price',
+-                'interval',
+-                ]
++            'price',
++            'interval',
++        ]
+ 
+ 
+ class CurrentSubscriptionSerializer(ModelSerializer):
++    account = AccountSerializer
+ 
+     class Meta:
+         model = CurrentSubscription
+         fields = [
+-                'account',
+-                'studio',
+-                'plan',
+-                ]
++            'account',
++            'studio',
++            'plan',
++        ]
++        read_only_fields = ['account']
++
+     def validate(self, data):
+         super().validate(data)
+         if 'expiration' in data:
+@@ -28,8 +35,8 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+         else:
+             try:
+                 interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
+-                today = datetime.datetime.combine(datetime.datetime.today(), 
+-                        datetime.datetime.min.time())
++                today = datetime.datetime.combine(datetime.datetime.today(),
++                                                  datetime.datetime.min.time())
+                 if interval == 'yearly':
+                     expiry = today.replace(year=today.year + 1, month=1, day=1)
+                 elif interval == 'monthly':
+@@ -53,7 +60,15 @@ class CurrentSubscriptionSerializer(ModelSerializer):
+                 data['expiration'] = None
+                 return data
+ 
+-class CreateUserSubscriptionSerializer(ModelSerializer):
++    # reference to override create method to pre-set attribute to logged-in user:
++    # https://stackoverflow.com/a/58430009
++    def create(self, validated_data):
++        current_account_id = self.context['request'].user.id
++        current_account = get_object_or_404(Account, pk=current_account_id)
++        return CurrentSubscription.objects.create(account=current_account, studio=validated_data['studio'],
++                                                  plan=validated_data['plan'])
+ 
++
++class CreateUserSubscriptionSerializer(ModelSerializer):
+     payment_info = PaymentInfoSerializer
+     fields = []
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index 156a97c..3bd5960 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -4,24 +4,40 @@ from rest_framework.permissions import IsAuthenticated
+ from rest_framework import mixins
+ from subscriptions.models import CurrentSubscription
+ from subscriptions.serializers import (
+-        SubscriptionPlanSerializer,
+-        CurrentSubscriptionSerializer,
+-        )
++    SubscriptionPlanSerializer,
++    CurrentSubscriptionSerializer,
++)
++from django.shortcuts import get_object_or_404
++from accounts.models import Account
+ 
+ 
+ class SubscribeView(generics.CreateAPIView):
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+ 
++
+ class UpdateSubscriptionView(generics.UpdateAPIView):
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+-    def get_queryset(self):
+-        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
++
++    def get_object(self, **kwargs):
++        # return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
++        current_account = get_object_or_404(Account, id=self.request.user.id)
++        # use get object or 404 because we are updating specific current subscription with an id and account
++        # use current_account because we only want logged-in user to be able to edit their subscriptions
++        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
++        # will return "Not found" if current subscription does not belong to user
++
+ 
+ class CancelSubscriptionView(generics.DestroyAPIView):
+     permission_classes = [IsAuthenticated]
+     serializer_class = CurrentSubscriptionSerializer
+-    def get_queryset(self):
+-        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+ 
++    # def get_queryset(self):
++    #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
++    def get_object(self, **kwargs):
++        current_account = get_object_or_404(Account, id=self.request.user.id)
++        # use get object or 404 because we are updating specific current subscription with an id and account
++        # use current_account because we only want logged in user to be able to edit their subscriptions
++        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
++        # will return "Not found" if current subscription does not belong to user
+
+commit 659a26960faae2a663bacb62ea7cfb4191a18b0f
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Thu Nov 17 00:58:14 2022 -0500
+
+    finish class creation
+
+diff --git a/classes/admin.py b/classes/admin.py
+index 663c6f1..b3e429e 100644
+--- a/classes/admin.py
++++ b/classes/admin.py
+@@ -1,53 +1,73 @@
+ from django.contrib import admin
+ from django.urls import path, reverse
+ from django.utils.html import format_html
++from django.http import HttpResponseRedirect
++from django.template.response import TemplateResponse
+ 
+ from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
+-from classes.forms import ClassCreateTimeForm, ClassEditTimeForm, ClassDeleteTimeForm
++from classes.forms import ClassCreateTimeForm
+ 
+ # Register your models here.
+-admin.site.register(Class)
+ admin.site.register(Keywords)
+ admin.site.register(ClassTimeTable)
+ admin.site.register(EnrollClass)
++admin.site.register(Class)
++# @admin.register(Class)
++# class ClassAdmin(admin.ModelAdmin):
++#     def class_actions(self, obj):
++#         return format_html(
++#             '<a class="button" href="{}">Create Time</a>&nbsp;',
++#             '<a class="button" href="{}">Edit Time</a>&nbsp;',
++#             reverse('admin:classes_class_create_time', args=[obj.pk]),
++#             reverse('admin:classes_class_edit_time', args=[obj.pk]),
++#         )
++#     class_actions.short_description = 'Actions'
++#     class_actions.allow_tags = True
+ 
+-@admin.register(Class)
+-class ClassAdmin(admin.ModelAdmin):
+-    def class_actions(self, obj):
+-        return format_html(
+-            '<a class="button" href="{}">Create Time</a>&nbsp;',
+-            '<a class="button" href="{}">Edit Time</a>&nbsp;',
+-            reverse('admin:classes_class_create_time', args=[obj.pk]),
+-            reverse('admin:classes_class_edit_time', args=[obj.pk]),
+-        )
+-    class_actions.short_description = 'Actions'
+-    class_actions.allow_tags = True
++#     def get_urls(self):
++#         urls = super().get_urls()
++#         my_urls = [
++#             path('class_settime/', self.set_class_time, name='class_settime'),
++#             path('class_edittime/', self.edit_class_time, name='class_edittime'),
++#         ]
++#         return my_urls + urls
+ 
+-    def get_urls(self):
+-        urls = super().get_urls()
+-        my_urls = [
+-            path('class_settime/', self.set_class_time, name='class_settime'),
+-            path('class_edittime/', self.edit_class_time, name='class_edittime'),
+-        ]
+-        return my_urls + urls
++#     def set_class_time(self, request, class_id, *args, **kwargs):
++#         return self.process_action(
++#             request = request,
++#             class_id = class_id,
++#             action = 'set_time',
++#             action_form = ClassCreateTimeForm,
++#             action_title = 'Create Time',
++#         )
+ 
+-    def set_class_time(self, request, class_id, *args, **kwargs):
+-        return self.process_action(
+-            request = request,
+-            class_id = class_id,
+-            action = 'set_time',
+-            action_form = ClassCreateTimeForm,
+-            action_title = 'Create Time',
+-        )
++#     def edit_class_time(self, request, class_id, *args, **kwargs):
++#         return self.process_action(
++#             request = request,
++#             class_id = class_id,
++#             action = 'edit_time',
++#             action_form = ClassEditTimeForm,
++#             action_title = 'Edit Time',
++#         )
+ 
+-    def edit_class_time(self, request, class_id, *args, **kwargs):
+-        return self.process_action(
+-            request = request,
+-            class_id = class_id,
+-            action = 'edit_time',
+-            action_form = ClassEditTimeForm,
+-            action_title = 'Edit Time',
+-        )
++#     def process_action(self, request, class_id, action, action_form, action_title):
++#         class_obj = Class.objects.get(id=class_id)
++#         if request.method == 'POST':
++#             form = action_form(request.POST)
++#             if form.is_valid():
++#                 form.save(class_obj, request.user)
++#                 self.message_user(request, 'Action completed.')
++#                 return HttpResponseRedirect(reverse('admin:classes_class_changelist'))
++#         else:
++#             form = action_form()
+ 
+-    def process_action(self, request, class_id, action, action_form, action_title):
+-        class_obj = Class.objects.get(id=class_id)
+\ No newline at end of file
++#         context = self.admin_site.each_context(request)
++#         context['opts'] = self.model._meta
++#         context['form'] = form
++#         context['title'] = action_title
++#         context['class_obj'] = class_obj
++#         return TemplateResponse(
++#             request,
++#             'admin/classes/class_action.html',
++#             context
++#         )
+\ No newline at end of file
+diff --git a/classes/forms.py b/classes/forms.py
+deleted file mode 100644
+index 4d0415c..0000000
+--- a/classes/forms.py
++++ /dev/null
+@@ -1,33 +0,0 @@
+-from django import forms
+-
+-from classes.models import Class, ClassTimeTable, EnrollClass
+-
+-
+-class ClassActionForm(forms.Form):
+-
+-    def form_action(self, class_obj: Class, user):
+-        raise NotImplementedError()
+-
+-    def save(self, class_obj: Class, user):
+-        class_obj, user = self.form_action(class_obj, user)
+-        return class_obj, user
+-
+-class ClassCreateTimeForm(ClassActionForm):
+-    class_time = forms.DateTimeField()
+-    class_end = forms.DateTimeField()
+-    duration = forms.DurationField()
+-    spot_left = forms.IntegerField()
+-
+-    def form_action(self, class_obj: Class, user):
+-        return Class.set_time(
+-            class_time=self.cleaned_data['class_time'],
+-            class_end=self.cleaned_data['class_end'],
+-            duration=self.cleaned_data['duration'],
+-            spot_left=self.cleaned_data['spot_left'],
+-        )
+-
+-class ClassEditTimeForm(ClassActionForm):
+-    ...
+-
+-class ClassDeleteTimeForm(ClassActionForm):
+-    ...
+\ No newline at end of file
+diff --git a/classes/models.py b/classes/models.py
+index a3bac6d..5c143ff 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -10,25 +10,36 @@ class Class(m.Model):
+     name = m.CharField(max_length=250)
+     description = m.TextField()
+     coach = m.CharField(max_length=250)
++    class_start = m.DateField()
++    class_end = m.DateField()
++    class_time = m.TimeField()
+     duration = m.DurationField()
++    days_inbetween = m.IntegerField()
++    spots = m.IntegerField()
+ 
+-    def set_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
+-        self.duration = duration
++    def save(self, *args, **kwargs):
++        super().save(*args, **kwargs)
++        self.set_time()
++        return self
+ 
+-        time_i = class_time
+-        while time_i < class_end:
++    def set_time(self):
++        self.duration = self.duration
++
++        time_i = datetime.datetime.combine(self.class_start, self.class_time)
++        while time_i <= datetime.datetime.combine(self.class_end, self.class_time):
+             ClassTimeTable.objects.create(
+-                class_id=self,
++                classid=self,
+                 time=time_i,
+-                spot_left=spot_left,
++                spotleft=self.spots,
+             )
+-            time_i += duration
++            time_i += datetime.timedelta(days=self.days_inbetween)
++            print("time_i: {}".format(time_i))
+ 
+         return
+ 
+-    def edit_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
++    def edit_time(self):
+         ClassTimeTable.objects.filter(class_id=self).delete()
+-        self.set_time(class_time, class_end, duration, spot_left)
++        self.set_time()
+     
+     def delete_one_time(self, time: datetime.datetime):
+         if not ClassTimeTable.objects.filter(class_id=self, time=time).exists():
+
+commit e60f2dda27856f12bbe3e2ec51b809c7cfb22e50
+Merge: abfb0cc 00ffba7
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 19:51:11 2022 -0500
+
+    Merge branch 'build-subscriptions' of https://github.com/nathan-hansen/csc309-tfc into build-subscriptions
+
+commit abfb0ccc272fa60bec3c4c821268601268e6253f
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 19:50:54 2022 -0500
+
+    subscriptions almost done
+
+diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
+new file mode 100644
+index 0000000..1b8d389
+--- /dev/null
++++ b/accounts/migrations/0001_initial.py
+@@ -0,0 +1,59 @@
++# Generated by Django 4.1.3 on 2022-11-16 19:48
++
++from django.conf import settings
++import django.contrib.auth.models
++import django.core.validators
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ("auth", "0012_alter_user_first_name_max_length"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="Account",
++            fields=[
++                (
++                    "user_ptr",
++                    models.OneToOneField(
++                        auto_created=True,
++                        on_delete=django.db.models.deletion.CASCADE,
++                        parent_link=True,
++                        primary_key=True,
++                        serialize=False,
++                        to=settings.AUTH_USER_MODEL,
++                    ),
++                ),
++                ("avatar", models.ImageField(upload_to="account_avatars/")),
++                (
++                    "phone_number",
++                    models.CharField(
++                        blank=True,
++                        max_length=250,
++                        null=True,
++                        validators=[
++                            django.core.validators.RegexValidator(
++                                message="Phone number must be in the format: '+999999999', with a maximum of 15 digits",
++                                regex="^\\+?1?\\d{9,15}$",
++                            )
++                        ],
++                    ),
++                ),
++            ],
++            options={
++                "verbose_name": "user",
++                "verbose_name_plural": "users",
++                "abstract": False,
++            },
++            bases=("auth.user",),
++            managers=[
++                ("objects", django.contrib.auth.models.UserManager()),
++            ],
++        ),
++    ]
+diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
+new file mode 100644
+index 0000000..c623526
+--- /dev/null
++++ b/classes/migrations/0001_initial.py
+@@ -0,0 +1,120 @@
++# Generated by Django 4.1.3 on 2022-11-16 19:48
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ("studios", "0001_initial"),
++        ("accounts", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="Class",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("name", models.CharField(max_length=250)),
++                ("description", models.TextField()),
++                ("coach", models.CharField(max_length=250)),
++                ("duration", models.DurationField()),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="tfc_class",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++        ),
++        migrations.CreateModel(
++            name="ClassTimeTable",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("time", models.DateTimeField()),
++                ("spotleft", models.IntegerField()),
++                (
++                    "classid",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="timetable",
++                        to="classes.class",
++                    ),
++                ),
++            ],
++        ),
++        migrations.CreateModel(
++            name="Keywords",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("keyword", models.CharField(max_length=250)),
++                (
++                    "classid",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="keywords",
++                        to="classes.class",
++                    ),
++                ),
++            ],
++        ),
++        migrations.CreateModel(
++            name="EnrollClass",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                (
++                    "account",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="enrollclass",
++                        to="accounts.account",
++                    ),
++                ),
++                (
++                    "classtime",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="enrollclass",
++                        to="classes.classtimetable",
++                    ),
++                ),
++            ],
++        ),
++    ]
+diff --git a/payments/migrations/0001_initial.py b/payments/migrations/0001_initial.py
+new file mode 100644
+index 0000000..dfbc5ea
+--- /dev/null
++++ b/payments/migrations/0001_initial.py
+@@ -0,0 +1,68 @@
++# Generated by Django 4.1.3 on 2022-11-16 21:56
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ("accounts", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="PaymentInfo",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("card_number", models.CharField(max_length=250)),
++                ("expiry_date", models.DateField()),
++                ("cvv", models.IntegerField()),
++                ("name_on_card", models.CharField(max_length=250)),
++                (
++                    "account",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="payment_info",
++                        to="accounts.account",
++                    ),
++                ),
++            ],
++        ),
++        migrations.CreateModel(
++            name="PaymentHistory",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("timestamp", models.DateTimeField()),
++                ("amount", models.FloatField()),
++                ("card_number", models.CharField(max_length=250)),
++                ("card_expiry", models.DateField()),
++                (
++                    "account",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="payment_history",
++                        to="accounts.account",
++                    ),
++                ),
++            ],
++        ),
++    ]
+diff --git a/payments/migrations/__init__.py b/payments/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
+new file mode 100644
+index 0000000..f29133e
+--- /dev/null
++++ b/studios/migrations/0001_initial.py
+@@ -0,0 +1,84 @@
++# Generated by Django 4.1.3 on 2022-11-16 19:48
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = []
++
++    operations = [
++        migrations.CreateModel(
++            name="Studio",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("name", models.CharField(max_length=250)),
++                ("address", models.CharField(max_length=250)),
++                ("latitude", models.FloatField()),
++                ("longitude", models.FloatField()),
++                ("postal_code", models.CharField(max_length=250)),
++                ("phone_number", models.CharField(max_length=250)),
++            ],
++        ),
++        migrations.CreateModel(
++            name="StudioImage",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("image", models.ImageField(upload_to="studios/")),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="image",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++        ),
++        migrations.CreateModel(
++            name="Amenities",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("amenity_type", models.CharField(max_length=250)),
++                ("quantity", models.IntegerField()),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="amenities",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++            options={
++                "verbose_name_plural": "Amenities",
++            },
++        ),
++    ]
+diff --git a/studios/migrations/0002_amenities.py b/studios/migrations/0002_amenities.py
+deleted file mode 100644
+index c41114f..0000000
+--- a/studios/migrations/0002_amenities.py
++++ /dev/null
+@@ -1,38 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-14 21:15
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("studios", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="Amenities",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("amenity_type", models.CharField(max_length=250)),
+-                ("quantity", models.IntegerField()),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="amenities",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-        ),
+-    ]
+diff --git a/studios/migrations/0003_alter_studioimage_image.py b/studios/migrations/0003_alter_studioimage_image.py
+deleted file mode 100644
+index dbf671d..0000000
+--- a/studios/migrations/0003_alter_studioimage_image.py
++++ /dev/null
+@@ -1,20 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-14 21:36
+-
+-from django.db import migrations, models
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("studios", "0002_amenities"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="studioimage",
+-            name="image",
+-            field=models.ImageField(
+-                upload_to="studios/<django.db.models.fields.related.ForeignKey>/"
+-            ),
+-        ),
+-    ]
+diff --git a/studios/migrations/0004_alter_studioimage_image.py b/studios/migrations/0004_alter_studioimage_image.py
+deleted file mode 100644
+index f9cee56..0000000
+--- a/studios/migrations/0004_alter_studioimage_image.py
++++ /dev/null
+@@ -1,18 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-14 22:53
+-
+-from django.db import migrations, models
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("studios", "0003_alter_studioimage_image"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="studioimage",
+-            name="image",
+-            field=models.ImageField(upload_to="studios/"),
+-        ),
+-    ]
+diff --git a/studios/migrations/0005_alter_studio_phone_number.py b/studios/migrations/0005_alter_studio_phone_number.py
+deleted file mode 100644
+index 7b4abdb..0000000
+--- a/studios/migrations/0005_alter_studio_phone_number.py
++++ /dev/null
+@@ -1,18 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-14 23:18
+-
+-from django.db import migrations, models
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("studios", "0004_alter_studioimage_image"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterField(
+-            model_name="studio",
+-            name="phone_number",
+-            field=models.CharField(max_length=250),
+-        ),
+-    ]
+diff --git a/studios/migrations/0006_alter_amenities_options.py b/studios/migrations/0006_alter_amenities_options.py
+deleted file mode 100644
+index 068409a..0000000
+--- a/studios/migrations/0006_alter_amenities_options.py
++++ /dev/null
+@@ -1,17 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-15 00:24
+-
+-from django.db import migrations
+-
+-
+-class Migration(migrations.Migration):
+-
+-    dependencies = [
+-        ("studios", "0005_alter_studio_phone_number"),
+-    ]
+-
+-    operations = [
+-        migrations.AlterModelOptions(
+-            name="amenities",
+-            options={"verbose_name_plural": "Amenities"},
+-        ),
+-    ]
+diff --git a/subscriptions/admin.py b/subscriptions/admin.py
+index 8c38f3f..26008ed 100644
+--- a/subscriptions/admin.py
++++ b/subscriptions/admin.py
+@@ -1,3 +1,5 @@
+ from django.contrib import admin
++from subscriptions.models import SubscriptionPlan, CurrentSubscription
+ 
+-# Register your models here.
++admin.site.register(SubscriptionPlan)
++admin.site.register(CurrentSubscription)
+diff --git a/subscriptions/migrations/0001_initial.py b/subscriptions/migrations/0001_initial.py
+new file mode 100644
+index 0000000..16d2ac5
+--- /dev/null
++++ b/subscriptions/migrations/0001_initial.py
+@@ -0,0 +1,74 @@
++# Generated by Django 4.1.3 on 2022-11-16 22:14
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ("studios", "0001_initial"),
++        ("accounts", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="SubscriptionPlan",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("payment", models.DecimalField(decimal_places=2, max_digits=12)),
++                ("interval", models.DurationField()),
++            ],
++        ),
++        migrations.CreateModel(
++            name="CurrentSubscription",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("expiration", models.DateTimeField(blank=True, null=True)),
++                (
++                    "account",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="account_subscription",
++                        to="accounts.account",
++                    ),
++                ),
++                (
++                    "plan",
++                    models.ForeignKey(
++                        blank=True,
++                        null=True,
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="current_plan",
++                        to="subscriptions.subscriptionplan",
++                    ),
++                ),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="studio_subscription",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++        ),
++    ]
+diff --git a/subscriptions/migrations/0002_alter_subscriptionplan_interval.py b/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
+new file mode 100644
+index 0000000..39e7a70
+--- /dev/null
++++ b/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
+@@ -0,0 +1,18 @@
++# Generated by Django 4.1.3 on 2022-11-16 22:27
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("subscriptions", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="subscriptionplan",
++            name="interval",
++            field=models.CharField(max_length=16),
++        ),
++    ]
+diff --git a/subscriptions/migrations/__init__.py b/subscriptions/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/subscriptions/models.py b/subscriptions/models.py
+index 3a40a75..0489162 100644
+--- a/subscriptions/models.py
++++ b/subscriptions/models.py
+@@ -3,10 +3,11 @@ from django.db import models as m
+ 
+ class SubscriptionPlan(m.Model):
+     payment = m.DecimalField(decimal_places=2, max_digits=12)
+-    interval = m.DurationField()
++    interval = m.CharField(max_length=16)
+ 
+ class CurrentSubscription(m.Model):
+     account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
+-    plan = m.ForeignKey('SubscriptionPlan', on_delete=m.SET_NULL, null=True, blank=True, related_name='current_plan')
++    studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='studio_subscription')
++    plan = m.ForeignKey('SubscriptionPlan', on_delete=m.CASCADE, null=True, blank=True, related_name='current_plan')
+     expiration = m.DateTimeField(null=True, blank=True)
+ 
+diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
+new file mode 100644
+index 0000000..ee309bd
+--- /dev/null
++++ b/subscriptions/serializers.py
+@@ -0,0 +1,59 @@
++from rest_framework.serializers import ModelSerializer, ValidationError
++from subscriptions.models import SubscriptionPlan, CurrentSubscription
++from payments.serializers import PaymentInfoSerializer
++import datetime
++
++class SubscriptionPlanSerializer(ModelSerializer):
++    class Meta:
++        model = SubscriptionPlan
++        fields = [
++                'price',
++                'interval',
++                ]
++
++
++class CurrentSubscriptionSerializer(ModelSerializer):
++
++    class Meta:
++        model = CurrentSubscription
++        fields = [
++                'account',
++                'studio',
++                'plan',
++                ]
++    def validate(self, data):
++        super().validate(data)
++        if 'expiration' in data:
++            raise ValidationError('cannot send expiration value')
++        else:
++            try:
++                interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
++                today = datetime.datetime.combine(datetime.datetime.today(), 
++                        datetime.datetime.min.time())
++                if interval == 'yearly':
++                    expiry = today.replace(year=today.year + 1, month=1, day=1)
++                elif interval == 'monthly':
++                    if today.month == 12:
++                        expiry = today.replace(year=today.year + 1, month=1, day=1)
++                    else:
++                        expiry = today.replace(month=today.month + 1, day=1)
++
++                elif interval == 'weekly':
++                    pass
++
++                elif interval == 'daily':
++                    pass
++
++                data['expiration'] = expiry
++
++                return data
++
++
++            except AttributeError:
++                data['expiration'] = None
++                return data
++
++class CreateUserSubscriptionSerializer(ModelSerializer):
++
++    payment_info = PaymentInfoSerializer
++    fields = []
+diff --git a/subscriptions/urls.py b/subscriptions/urls.py
+index 048064a..437af5b 100644
+--- a/subscriptions/urls.py
++++ b/subscriptions/urls.py
+@@ -9,7 +9,7 @@ app_name = 'subscriptions'
+ 
+ urlpatterns = [
+         path('subscribe/', SubscribeView.as_view()),
+-        path('update/', UpdateSubscriptionView.as_view()),
+-        path('cancel/', CancelSubscriptionView.as_view()),
++        path('<int:pk>/update/<int:subscription>/', UpdateSubscriptionView.as_view()),
++        path('<int:pk>/cancel/<int:subscription>/', CancelSubscriptionView.as_view()),
+ ]
+ 
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+index 91ea44a..156a97c 100644
+--- a/subscriptions/views.py
++++ b/subscriptions/views.py
+@@ -1,3 +1,27 @@
+ from django.shortcuts import render
++from rest_framework import generics
++from rest_framework.permissions import IsAuthenticated
++from rest_framework import mixins
++from subscriptions.models import CurrentSubscription
++from subscriptions.serializers import (
++        SubscriptionPlanSerializer,
++        CurrentSubscriptionSerializer,
++        )
++
++
++class SubscribeView(generics.CreateAPIView):
++    permission_classes = [IsAuthenticated]
++    serializer_class = CurrentSubscriptionSerializer
++
++class UpdateSubscriptionView(generics.UpdateAPIView):
++    permission_classes = [IsAuthenticated]
++    serializer_class = CurrentSubscriptionSerializer
++    def get_queryset(self):
++        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
++
++class CancelSubscriptionView(generics.DestroyAPIView):
++    permission_classes = [IsAuthenticated]
++    serializer_class = CurrentSubscriptionSerializer
++    def get_queryset(self):
++        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+ 
+-# Create your views here.
+
+commit 00ffba76b899a7ff7ce560264cce6cd6698a54aa
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Wed Nov 16 18:17:52 2022 -0500
+
+    Fixed Accounts avatar
+
+diff --git a/accounts/models.py b/accounts/models.py
+index 589cdc3..6fca33c 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -5,7 +5,7 @@ from django.db import models as m
+ 
+ class Account(User):
+     # first/last name and email are inherited from User
+-    avatar = m.ImageField(upload_to='account_avatars/')
++    avatar = m.ImageField(upload_to='account_avatars/', null=True, blank=True)
+     # phone number regex from: https://stackoverflow.com/a/19131360
+     phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$',
+                                  message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
+diff --git a/accounts/serializers.py b/accounts/serializers.py
+index c567089..3119f76 100644
+--- a/accounts/serializers.py
++++ b/accounts/serializers.py
+@@ -10,7 +10,7 @@ class AccountSerializer(serializers.ModelSerializer):
+     # editing it)
+     class Meta:
+         model = Account
+-        fields = ["username", "first_name", "last_name", "email", "phone_number"]
++        fields = ["username", "first_name", "last_name", "email", "avatar", "phone_number"]
+         read_only_fields = ["password"]
+         # not allowed to edit this attribute, so read only, from tutorial code
+ 
+@@ -23,7 +23,7 @@ class SignupSerializer(serializers.ModelSerializer):
+ 
+     class Meta:
+         model = Account  # returns the User model that is active in this project
+-        fields = ("username", "password", "password2", "first_name", "last_name", "email", "phone_number")
++        fields = ("username", "password", "password2", "first_name", "last_name", "email", "avatar", "phone_number")
+ 
+         # Specify the input type for password in the sign up, already did for password 2
+         # we can also specify the write_only attribute to specify that a field should only be used for writing data
+diff --git a/accounts/views.py b/accounts/views.py
+index 86da5b3..5a56904 100644
+--- a/accounts/views.py
++++ b/accounts/views.py
+@@ -11,6 +11,7 @@ from rest_framework import status
+ 
+ # Create your views here.
+ class SignUpView(APIView):
++    # reference: https://thinkster.io/tutorials/django-json-api/authentication
+     permission_classes = (AllowAny,)
+     serializer_class = SignupSerializer
+ 
+
+commit 3b307f37d65cc2a23ee96e2ef59006269dea138a
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Wed Nov 16 18:16:40 2022 -0500
+
+    add bash for remigrate
+
+diff --git a/remigrate.sh b/remigrate.sh
+new file mode 100644
+index 0000000..8e70b2f
+--- /dev/null
++++ b/remigrate.sh
+@@ -0,0 +1,12 @@
++find . -path "*/migrations/*.py" -not -name "__init__.py" -delete 
++find . -path "*/migrations/*.pyc"  -delete
++
++./manage.py makemigrations
++./manage.py migrate
++
++# create admin:admin
++DJANGO_SUPERUSER_PASSWORD=admin \
++DJANGO_SUPERUSER_USERNAME=admin \
++DJANGO_SUPERUSER_EMAIL=admin@nonexist.com \
++./manage.py createsuperuser \
++--no-input
+\ No newline at end of file
+
+commit 6d444d1e547f04d487bf8c14805a9cbe7afd1db9
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 17:32:34 2022 -0500
+
+    payment subscription urls
+
+diff --git a/payments/urls.py b/payments/urls.py
+new file mode 100644
+index 0000000..dc29403
+--- /dev/null
++++ b/payments/urls.py
+@@ -0,0 +1,17 @@
++from django.urls import path
++from payments.views import (
++        CreatePaymentInfoView,
++        PaymentInfoUpdateView,
++        ListPaymentHistory,
++        ListPaymentUpcoming,
++        )
++
++app_name = 'payments'
++
++urlpatterns = [
++        path('add/', CreatePaymentInfoView.as_view()),
++        path('update/', PaymentInfoUpdateView.as_view()),
++        path('history/', ListPaymentHistory.as_view()),
++        path('upcoming/', ListPaymentUpcoming.as_view()),
++]
++
+diff --git a/subscriptions/urls.py b/subscriptions/urls.py
+new file mode 100644
+index 0000000..048064a
+--- /dev/null
++++ b/subscriptions/urls.py
+@@ -0,0 +1,15 @@
++from django.urls import path
++from subscriptions.views import (
++        SubscribeView,
++        UpdateSubscriptionView,
++        CancelSubscriptionView,
++        )
++
++app_name = 'subscriptions'
++
++urlpatterns = [
++        path('subscribe/', SubscribeView.as_view()),
++        path('update/', UpdateSubscriptionView.as_view()),
++        path('cancel/', CancelSubscriptionView.as_view()),
++]
++
+
+commit 13eaa0f45c07a760caf6c69d7cc0e48547006ec4
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 17:07:26 2022 -0500
+
+    payments fixes
+
+diff --git a/payments/serializers.py b/payments/serializers.py
+index ce84618..4ca7603 100644
+--- a/payments/serializers.py
++++ b/payments/serializers.py
+@@ -7,8 +7,8 @@ class PaymentInfoSerializer(serializers.ModelSerializer):
+     account = AccountSerializer
+ 
+     class Meta:
+-        model = PaymentHistory
+-        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
++        model = PaymentInfo
++        fields = ['account', 'name_on_card', 'card_number', 'cvv', 'expiry_date']
+ 
+ 
+ class PaymentHistorySerializer(serializers.ModelSerializer):
+diff --git a/payments/views.py b/payments/views.py
+index 2935a3a..cef08fa 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -7,11 +7,9 @@ from django.utils import timezone
+ from django.shortcuts import get_object_or_404
+ 
+ 
+-# Create your views here.
+-
+ class CreatePaymentInfoView(CreateAPIView):
+     permission_classes = [IsAuthenticated]
+-    serializer_class = PaymentInfo
++    serializer_class = PaymentInfoSerializer
+ 
+ 
+ class PaymentInfoUpdateView(UpdateAPIView):
+
+commit 168f3a89fdeb138128f866eb9fcdab8eb8ed0e72
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 17:05:36 2022 -0500
+
+    added payments, subscriptions urls
+
+diff --git a/TFC/urls.py b/TFC/urls.py
+index d674dd1..c01d095 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -23,6 +23,8 @@ urlpatterns = [
+     path('accounts/', include('accounts.urls')),
+     path('studios/', include('studios.urls')),
+     path('classes/', include('classes.urls')),
++    path('payments/', include('payments.urls')),
++    path('subscriptions/', include('subscriptions.urls')),
+ ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+ # add media_URL and MEDIA_ROOT from settings for image urls to work properly
+ 
+
+commit 66478b5e6d3cc6c911edf7df899d2b655acaceaf
+Merge: bb22fbc e8a639d
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Wed Nov 16 15:27:45 2022 -0500
+
+    Merge pull request #14 from nathan-hansen/payment_subscription_draft
+    
+    Added initial draft of views and serializers for payment
+
+commit e8a639d9d48ec4501f9c66a9b8f3fb52f3a67fc5
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Wed Nov 16 15:26:54 2022 -0500
+
+    Added initial draft of views and serializers for payment
+
+diff --git a/accounts/models.py b/accounts/models.py
+index f6cbcf6..df11bb2 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -6,6 +6,7 @@ from django.db import models as m
+ class Account(User):
+     # first/last name and email are inherited from User
+     avatar = m.ImageField(upload_to='account_avatars/')
++    # phone number regex from: https://stackoverflow.com/a/19131360
+     phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$',
+                                  message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
+     phone_number = m.CharField(validators=[phone_regex], max_length=250, null=True, blank=True)
+diff --git a/payments/serializers.py b/payments/serializers.py
+new file mode 100644
+index 0000000..ce84618
+--- /dev/null
++++ b/payments/serializers.py
+@@ -0,0 +1,19 @@
++from rest_framework import serializers
++from payments.models import PaymentInfo, PaymentHistory
++from accounts.serializers import AccountSerializer
++
++
++class PaymentInfoSerializer(serializers.ModelSerializer):
++    account = AccountSerializer
++
++    class Meta:
++        model = PaymentHistory
++        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
++
++
++class PaymentHistorySerializer(serializers.ModelSerializer):
++    account = AccountSerializer
++
++    class Meta:
++        model = PaymentHistory
++        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
+diff --git a/payments/views.py b/payments/views.py
+index 91ea44a..2935a3a 100644
+--- a/payments/views.py
++++ b/payments/views.py
+@@ -1,3 +1,45 @@
+ from django.shortcuts import render
++from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
++from rest_framework.permissions import IsAuthenticated, AllowAny
++from payments.serializers import PaymentInfoSerializer, PaymentHistorySerializer
++from payments.models import PaymentInfo, PaymentHistory
++from django.utils import timezone
++from django.shortcuts import get_object_or_404
++
+ 
+ # Create your views here.
++
++class CreatePaymentInfoView(CreateAPIView):
++    permission_classes = [IsAuthenticated]
++    serializer_class = PaymentInfo
++
++
++class PaymentInfoUpdateView(UpdateAPIView):
++    permission_classes = [IsAuthenticated]
++    # make sure user is logged in
++    serializer_class = PaymentInfoSerializer
++
++    def get_object(self):
++        return get_object_or_404(PaymentInfo, account=self.request.user)
++
++
++class ListPaymentHistory(ListAPIView):
++    permission_classes = [IsAuthenticated]
++    serializer_class = PaymentHistorySerializer
++
++    def get_queryset(self):
++        # first filter by payments of logged-in user, then filter for past payments
++        user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__lte=timezone.now())
++        # then order by most recent and return
++        return user_queryset.order_by('timestamp')
++
++
++class ListPaymentUpcoming(ListAPIView):
++    permission_classes = [IsAuthenticated]
++    serializer_class = PaymentHistorySerializer
++
++    def get_queryset(self):
++        # first filter by payments of logged-in user, then filter for past payments
++        user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__gte=timezone.now())
++        # then order by most recent and return
++        return user_queryset.order_by('timestamp')
+
+commit bb22fbc461a830122fefb72944ed00bce29169ce
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 15:02:54 2022 -0500
+
+    removed debug info
+
+diff --git a/studios/models.py b/studios/models.py
+index 4182dd8..8e77caf 100644
+--- a/studios/models.py
++++ b/studios/models.py
+@@ -18,7 +18,6 @@ def extend_sqlite(connection=None, **kwargs):
+         cf('sin', 1, math.sin)
+         cf('least', 2, min)
+         cf('greatest', 2, max)
+-        print('SQLite extended successfully.')
+ 
+ 
+ class Studio(m.Model):
+
+commit 192ac75d11738d831690b89cdde7289cc57a7200
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Wed Nov 16 14:43:39 2022 -0500
+
+    moved CurrentSubscription model
+
+diff --git a/accounts/models.py b/accounts/models.py
+index f6cbcf6..c19bdc8 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -10,7 +10,3 @@ class Account(User):
+                                  message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
+     phone_number = m.CharField(validators=[phone_regex], max_length=250, null=True, blank=True)
+ 
+-class CurrentSubscription(m.Model):
+-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
+-    plan = m.ForeignKey('subscriptions.SubscriptionPlan', on_delete=m.CASCADE, related_name='current_subscription')
+-    expiration = m.DateTimeField()
+diff --git a/subscriptions/models.py b/subscriptions/models.py
+index 416ad24..3a40a75 100644
+--- a/subscriptions/models.py
++++ b/subscriptions/models.py
+@@ -5,3 +5,8 @@ class SubscriptionPlan(m.Model):
+     payment = m.DecimalField(decimal_places=2, max_digits=12)
+     interval = m.DurationField()
+ 
++class CurrentSubscription(m.Model):
++    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
++    plan = m.ForeignKey('SubscriptionPlan', on_delete=m.SET_NULL, null=True, blank=True, related_name='current_plan')
++    expiration = m.DateTimeField(null=True, blank=True)
++
+
+commit ad55b4e189f25e1adbb12a2f33dcfc6b6b195ff1
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Wed Nov 16 13:22:44 2022 -0500
+
+    models for addtime
+
+diff --git a/classes/admin.py b/classes/admin.py
+index 107af92..663c6f1 100644
+--- a/classes/admin.py
++++ b/classes/admin.py
+@@ -1,9 +1,53 @@
+ from django.contrib import admin
++from django.urls import path, reverse
++from django.utils.html import format_html
+ 
+ from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
++from classes.forms import ClassCreateTimeForm, ClassEditTimeForm, ClassDeleteTimeForm
+ 
+ # Register your models here.
+ admin.site.register(Class)
+ admin.site.register(Keywords)
+ admin.site.register(ClassTimeTable)
+-admin.site.register(EnrollClass)
+\ No newline at end of file
++admin.site.register(EnrollClass)
++
++@admin.register(Class)
++class ClassAdmin(admin.ModelAdmin):
++    def class_actions(self, obj):
++        return format_html(
++            '<a class="button" href="{}">Create Time</a>&nbsp;',
++            '<a class="button" href="{}">Edit Time</a>&nbsp;',
++            reverse('admin:classes_class_create_time', args=[obj.pk]),
++            reverse('admin:classes_class_edit_time', args=[obj.pk]),
++        )
++    class_actions.short_description = 'Actions'
++    class_actions.allow_tags = True
++
++    def get_urls(self):
++        urls = super().get_urls()
++        my_urls = [
++            path('class_settime/', self.set_class_time, name='class_settime'),
++            path('class_edittime/', self.edit_class_time, name='class_edittime'),
++        ]
++        return my_urls + urls
++
++    def set_class_time(self, request, class_id, *args, **kwargs):
++        return self.process_action(
++            request = request,
++            class_id = class_id,
++            action = 'set_time',
++            action_form = ClassCreateTimeForm,
++            action_title = 'Create Time',
++        )
++
++    def edit_class_time(self, request, class_id, *args, **kwargs):
++        return self.process_action(
++            request = request,
++            class_id = class_id,
++            action = 'edit_time',
++            action_form = ClassEditTimeForm,
++            action_title = 'Edit Time',
++        )
++
++    def process_action(self, request, class_id, action, action_form, action_title):
++        class_obj = Class.objects.get(id=class_id)
+\ No newline at end of file
+diff --git a/classes/forms.py b/classes/forms.py
+new file mode 100644
+index 0000000..4d0415c
+--- /dev/null
++++ b/classes/forms.py
+@@ -0,0 +1,33 @@
++from django import forms
++
++from classes.models import Class, ClassTimeTable, EnrollClass
++
++
++class ClassActionForm(forms.Form):
++
++    def form_action(self, class_obj: Class, user):
++        raise NotImplementedError()
++
++    def save(self, class_obj: Class, user):
++        class_obj, user = self.form_action(class_obj, user)
++        return class_obj, user
++
++class ClassCreateTimeForm(ClassActionForm):
++    class_time = forms.DateTimeField()
++    class_end = forms.DateTimeField()
++    duration = forms.DurationField()
++    spot_left = forms.IntegerField()
++
++    def form_action(self, class_obj: Class, user):
++        return Class.set_time(
++            class_time=self.cleaned_data['class_time'],
++            class_end=self.cleaned_data['class_end'],
++            duration=self.cleaned_data['duration'],
++            spot_left=self.cleaned_data['spot_left'],
++        )
++
++class ClassEditTimeForm(ClassActionForm):
++    ...
++
++class ClassDeleteTimeForm(ClassActionForm):
++    ...
+\ No newline at end of file
+diff --git a/classes/models.py b/classes/models.py
+index 4d55c17..a3bac6d 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -1,3 +1,5 @@
++import datetime
++
+ from django.db import models as m
+ 
+ from accounts.models import Account
+@@ -10,6 +12,31 @@ class Class(m.Model):
+     coach = m.CharField(max_length=250)
+     duration = m.DurationField()
+ 
++    def set_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
++        self.duration = duration
++
++        time_i = class_time
++        while time_i < class_end:
++            ClassTimeTable.objects.create(
++                class_id=self,
++                time=time_i,
++                spot_left=spot_left,
++            )
++            time_i += duration
++
++        return
++
++    def edit_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
++        ClassTimeTable.objects.filter(class_id=self).delete()
++        self.set_time(class_time, class_end, duration, spot_left)
++    
++    def delete_one_time(self, time: datetime.datetime):
++        if not ClassTimeTable.objects.filter(class_id=self, time=time).exists():
++            return False
++
++        ClassTimeTable.objects.filter(class_id=self, time=time).delete()
++        return True
++
+ class Keywords(m.Model):
+     classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='keywords')
+     keyword = m.CharField(max_length=250)
+
+commit 302895c53eb36e09aa2288c676b3060ff3f9a55b
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Tue Nov 15 23:05:06 2022 -0500
+
+    moved EnrollClass serializer from accounts app to classes app
+
+diff --git a/accounts/serializers.py b/accounts/serializers.py
+index 12381de..c567089 100644
+--- a/accounts/serializers.py
++++ b/accounts/serializers.py
+@@ -1,7 +1,6 @@
+ from rest_framework import serializers
+ from django.utils.translation import gettext_lazy as _
+ from django.contrib.auth import get_user_model
+-from accounts.models import EnrollClass
+ from classes.models import ClassTimeTable
+ from accounts.models import Account
+ 
+@@ -16,16 +15,6 @@ class AccountSerializer(serializers.ModelSerializer):
+         # not allowed to edit this attribute, so read only, from tutorial code
+ 
+ 
+-class EnrollClassSerializer(serializers.ModelSerializer):
+-    account = AccountSerializer()
+-
+-    # classtime = ClassTimeTableSerializer()
+-
+-    class Meta:
+-        model = EnrollClass
+-        fields = ['account', 'classtime']
+-
+-
+ # based on the tutorial code
+ class SignupSerializer(serializers.ModelSerializer):
+     # Want a signup form that asks for the user's username, firstname, lastname, email, phone_number
+diff --git a/classes/serializers.py b/classes/serializers.py
+index e3e39a2..bd28ea5 100644
+--- a/classes/serializers.py
++++ b/classes/serializers.py
+@@ -1,6 +1,7 @@
+ from rest_framework import serializers
+ 
+-from classes.models import Class, ClassTimeTable, Keywords
++from accounts.serializers import AccountSerializer
++from classes.models import Class, ClassTimeTable, Keywords, EnrollClass
+ 
+ 
+ class KeywordsSerializer(serializers.ModelSerializer):
+@@ -29,3 +30,11 @@ class ClassSerializer(serializers.ModelSerializer):
+         model = Class
+         fields = ['name', 'description', 'coach', 'keywords', 'timetable']
+ 
++
++class EnrollClassSerializer(serializers.ModelSerializer):
++    account = AccountSerializer()
++    classtime = ClassTimeTableSerializer()
++
++    class Meta:
++        model = EnrollClass
++        fields = ['account', 'classtime']
+
+commit cae9966b9a15dd6da9fcb8270c0663e65f4426fc
+Merge: 9b57a89 9e86e75
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Tue Nov 15 22:03:28 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc
+
+commit 9b57a8975a164680a9aad7d20c8842365f2f2eb0
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Tue Nov 15 22:01:50 2022 -0500
+
+    add url; fix small bug
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 60d8999..599386d 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -119,7 +119,7 @@ AUTH_PASSWORD_VALIDATORS = [
+ 
+ LANGUAGE_CODE = "en-us"
+ 
+-TIME_ZONE = "UTC"
++TIME_ZONE = "America/Toronto"
+ 
+ USE_I18N = True
+ 
+diff --git a/TFC/urls.py b/TFC/urls.py
+index 1df3f49..3d47e62 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -20,5 +20,5 @@ urlpatterns = [
+     path('admin/', admin.site.urls),
+     path('accounts/', include('accounts.urls')),
+     path('studios/', include('studios.urls')),
+-
++    path('classes/', include('classes.urls')),
+ ]
+diff --git a/classes/serializers.py b/classes/serializers.py
+index 47b1622..e3e39a2 100644
+--- a/classes/serializers.py
++++ b/classes/serializers.py
+@@ -1,6 +1,6 @@
+ from rest_framework import serializers
+ 
+-from classes.models import Class, ClassTimeTables, Keywords
++from classes.models import Class, ClassTimeTable, Keywords
+ 
+ 
+ class KeywordsSerializer(serializers.ModelSerializer):
+@@ -14,7 +14,7 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
+     Classes must appear in the order of their start time (from now), and the class information must be shown. 
+     Past or cancelled classes should not be listed.'''
+     class Meta:
+-        model = ClassTimeTables
++        model = ClassTimeTable
+         fields = ['time', 'spotleft']
+ 
+ 
+diff --git a/classes/views.py b/classes/views.py
+index b7d229c..eb93e24 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -1,13 +1,13 @@
+-from rest_framework import generics, get_object_or_404
++from django.shortcuts import get_object_or_404
++from django.utils import timezone
++from rest_framework import generics
+ from rest_framework.permissions import IsAuthenticated
+ from rest_framework.response import Response
+ from rest_framework.views import APIView
+ 
+-from accounts.models import EnrollClass
+-from classes.models import Class, ClassTimeTable
++from classes.models import Class, ClassTimeTable, EnrollClass
+ from classes.serializers import ClassSerializer
+ 
+-from django.utils import timezone
+ 
+ # Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
+
+commit 9e86e752666ded760774c8c740a2a26847fb45d5
+Merge: 62773e3 217bda3
+Author: Edward <81656509+ed29leung@users.noreply.github.com>
+Date:   Tue Nov 15 21:14:32 2022 -0500
+
+    Merge pull request #9 from nathan-hansen/account-draft
+    
+    Account draft
+
+commit 62773e34832527a624a11c8dbdec99ac9f453166
+Merge: b104047 3f2257d
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Tue Nov 15 19:23:33 2022 -0500
+
+    Merge pull request #10 from nathan-hansen/model_class
+    
+    model draft
+
+commit 3f2257dd0cab739b0fd94b112682c17e38edf529
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Tue Nov 15 12:22:33 2022 -0500
+
+    done with view; admin panel left
+
+diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
+deleted file mode 100644
+index a072b37..0000000
+--- a/accounts/migrations/0001_initial.py
++++ /dev/null
+@@ -1,54 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-12 22:31
+-
+-from django.conf import settings
+-import django.contrib.auth.models
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ('auth', '0012_alter_user_first_name_max_length'),
+-        ('classes', '0001_initial'),
+-        ('subscriptions', '__first__'),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name='Account',
+-            fields=[
+-                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
+-                ('avatar', models.ImageField(upload_to='')),
+-                ('phone_number', models.CharField(max_length=250)),
+-            ],
+-            options={
+-                'verbose_name': 'user',
+-                'verbose_name_plural': 'users',
+-                'abstract': False,
+-            },
+-            bases=('auth.user',),
+-            managers=[
+-                ('objects', django.contrib.auth.models.UserManager()),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name='EnrollClass',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='accounts.account')),
+-                ('classtime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='classes.classtimetable')),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name='CurrentSubscription',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('expiration', models.DateTimeField()),
+-                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='accounts.account')),
+-                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='subscriptions.subscriptionplan')),
+-            ],
+-        ),
+-    ]
+diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
+deleted file mode 100644
+index 88e945f..0000000
+--- a/classes/migrations/0001_initial.py
++++ /dev/null
+@@ -1,44 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-12 22:31
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ('studios', '0001_initial'),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name='Class',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('name', models.CharField(max_length=250)),
+-                ('description', models.TextField()),
+-                ('coach', models.CharField(max_length=250)),
+-                ('duration', models.DurationField()),
+-                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tfc_class', to='studios.studio')),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name='Keywords',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('keyword', models.CharField(max_length=250)),
+-                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='classes.class')),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name='ClassTimeTable',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('time', models.DateTimeField()),
+-                ('spotleft', models.IntegerField()),
+-                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable', to='classes.class')),
+-            ],
+-        ),
+-    ]
+diff --git a/classes/models.py b/classes/models.py
+index b5be145..4d55c17 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -22,9 +22,10 @@ class ClassTimeTable(m.Model):
+     def check_full(self):
+         return self.spotleft != 0
+ 
++
+ class EnrollClass(m.Model):
+-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
+-    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
++    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='enrollclass')
++    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enrollclass')
+ 
+     def enroll(self, account: Account, classtime: ClassTimeTable):
+         self.account = account
+@@ -33,3 +34,6 @@ class EnrollClass(m.Model):
+ 
+     def check_enroll(self, account: Account, classtime: ClassTimeTable):
+         return self.objects.filter(account=account, classtime=classtime).exists()
++
++    def get_user_enroll(self, account: Account):
++        return self.objects.filter(account=account)
+\ No newline at end of file
+diff --git a/classes/utils.py b/classes/utils.py
+deleted file mode 100644
+index 181b78b..0000000
+--- a/classes/utils.py
++++ /dev/null
+@@ -1,9 +0,0 @@
+-from accounts.models import User
+-
+-
+-def get_classes_with_spots():
+-    ...
+-
+-def get_user_classes(user: User):
+-    ...
+-
+diff --git a/classes/views.py b/classes/views.py
+index 7cc651b..b7d229c 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -6,22 +6,28 @@ from rest_framework.views import APIView
+ from accounts.models import EnrollClass
+ from classes.models import Class, ClassTimeTable
+ from classes.serializers import ClassSerializer
+-from classes.utils import get_classes_with_spots, get_user_classes
+ 
++from django.utils import timezone
+ 
+ # Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
+     serializer_class = ClassSerializer
+ 
+     def get_queryset(self):
+-        return get_classes_with_spots()
++        # https://stackoverflow.com/questions/19223953/django-filtering-from-other-model
++        return Class.objects. \
++            filter(timetable__spotleft__gte=1). \
++            filter(timetable__time__gte=timezone.now()). \
++                distinct().order_by('timetable__time')
+ 
+ class ListMyClassView(generics.ListAPIView):
+     permission_classes = (IsAuthenticated,)
+     serializer_class = ClassSerializer
+ 
+     def get_queryset(self):
+-        return get_user_classes(self.request.user)
++        return Class.objects. \
++            filter(timetable__enrollclass__account=self.request.user)
++
+ 
+ class ModifyClassView(APIView):
+     permission_classes = (IsAuthenticated,)
+diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
+deleted file mode 100644
+index 904fd06..0000000
+--- a/studios/migrations/0001_initial.py
++++ /dev/null
+@@ -1,44 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-12 22:31
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name='Studio',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('name', models.CharField(max_length=250)),
+-                ('address', models.CharField(max_length=250)),
+-                ('latitude', models.FloatField()),
+-                ('longitude', models.FloatField()),
+-                ('postal_code', models.CharField(max_length=250)),
+-                ('phone_number', models.CharField(max_length=250)),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name='StudioImage',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('image', models.ImageField(upload_to='')),
+-                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='studios.studio')),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name='Amenities',
+-            fields=[
+-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+-                ('type', models.CharField(max_length=250)),
+-                ('quantity', models.IntegerField()),
+-                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='studios.studio')),
+-            ],
+-        ),
+-    ]
+
+commit 146ae718d643c147646252f6bd34bd05c8e87b89
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Tue Nov 15 11:48:38 2022 -0500
+
+    modify operations
+
+diff --git a/accounts/models.py b/accounts/models.py
+index d128e9b..db0318a 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -11,7 +11,3 @@ class CurrentSubscription(m.Model):
+     account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
+     plan = m.ForeignKey('subscriptions.SubscriptionPlan', on_delete=m.CASCADE, related_name='current_subscription')
+     expiration = m.DateTimeField()
+-
+-class EnrollClass(m.Model):
+-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
+-    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
+\ No newline at end of file
+diff --git a/classes/admin.py b/classes/admin.py
+index 4e10981..107af92 100644
+--- a/classes/admin.py
++++ b/classes/admin.py
+@@ -1,8 +1,9 @@
+ from django.contrib import admin
+ 
+-from classes.models import Class, ClassTimeTable, Keywords
++from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
+ 
+ # Register your models here.
+ admin.site.register(Class)
+ admin.site.register(Keywords)
+ admin.site.register(ClassTimeTable)
++admin.site.register(EnrollClass)
+\ No newline at end of file
+diff --git a/classes/models.py b/classes/models.py
+index b9ffe69..b5be145 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -1,5 +1,7 @@
+ from django.db import models as m
+ 
++from accounts.models import Account
++
+ 
+ class Class(m.Model):
+     studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='tfc_class')
+@@ -15,4 +17,19 @@ class Keywords(m.Model):
+ class ClassTimeTable(m.Model):
+     classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='timetable')
+     time = m.DateTimeField()
+-    spotleft = m.IntegerField()
+\ No newline at end of file
++    spotleft = m.IntegerField()
++
++    def check_full(self):
++        return self.spotleft != 0
++
++class EnrollClass(m.Model):
++    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
++    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
++
++    def enroll(self, account: Account, classtime: ClassTimeTable):
++        self.account = account
++        self.classtime = classtime
++        self.save()
++
++    def check_enroll(self, account: Account, classtime: ClassTimeTable):
++        return self.objects.filter(account=account, classtime=classtime).exists()
+diff --git a/classes/urls.py b/classes/urls.py
+index 3aafaaf..ee719d6 100644
+--- a/classes/urls.py
++++ b/classes/urls.py
+@@ -1,7 +1,16 @@
+ from django.urls import path
+ 
++from classes.views import (
++    ListUpcomingClassView,
++    ListMyClassView,
++    ModifyClassView,
++)
++
+ app_name = 'classes'
+ 
+ urlpatterns = [
++    path('list/', ListUpcomingClassView.as_view(), name='list'),
++    path('history/', ListMyClassView.as_view(), name='history'),
++    path('modify/', ModifyClassView.as_view(), name='modify'),
+ ]
+ 
+diff --git a/classes/views.py b/classes/views.py
+index 8869053..7cc651b 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -1,19 +1,15 @@
+-from django.shortcuts import get_object_or_404
+-from rest_framework import generics
++from rest_framework import generics, get_object_or_404
+ from rest_framework.permissions import IsAuthenticated
++from rest_framework.response import Response
++from rest_framework.views import APIView
+ 
+-from classes.models import Class
++from accounts.models import EnrollClass
++from classes.models import Class, ClassTimeTable
+ from classes.serializers import ClassSerializer
+-
+ from classes.utils import get_classes_with_spots, get_user_classes
+-# Create your views here.
+-
+-class ClassView(generics.RetrieveAPIView):
+-    serializer_class = ClassSerializer
+ 
+-    def get_object(self):
+-        return get_object_or_404(Class, id=self.kwargs['class'])
+ 
++# Create your views here.
+ class ListUpcomingClassView(generics.ListAPIView):
+     serializer_class = ClassSerializer
+ 
+@@ -27,12 +23,33 @@ class ListMyClassView(generics.ListAPIView):
+     def get_queryset(self):
+         return get_user_classes(self.request.user)
+ 
+-class EnrollClassView(generics.UpdateAPIView):
++class ModifyClassView(APIView):
+     permission_classes = (IsAuthenticated,)
+-    serializer_class = ClassSerializer
+-
+-    def get_object(self):
+-        return get_object_or_404(Class, id=self.kwargs['class'])
+ 
+-    def perform_update(self, serializer):
+-        serializer.save()
+\ No newline at end of file
++    def post(self, request):
++        user = request.user
++        classtime = request.data.get('timeid')
++        op = request.data.get('op')
++
++        if not classtime or not op:
++            return Response({'error': 'Missing class or time'}, status=400)
++
++        if op not in ['enroll', 'drop']:
++            return Response({'error': 'Invalid op'}, status=400)
++
++        enroll_class = EnrollClass()
++        if enroll_class.check_enroll(user, classtime) and op == 'enroll':
++            return Response({'error': 'Already enrolled'}, status=400)
++        elif not enroll_class.check_enroll(user, classtime) and op == 'drop':
++            return Response({'error': 'Not enrolled'}, status=400)
++
++        classtime_ = get_object_or_404(ClassTimeTable, id=classtime)
++        if classtime_.check_full() and op == 'enroll':
++            return Response({'error': 'Class is full'}, status=400)
++
++        if op == 'enroll':
++            enroll_class.enroll(user, classtime_)
++            return Response({'message': 'Enrolled'}, status=200)
++        elif op == 'drop':
++            enroll_class.drop(user, classtime_)
++            return Response({'message': 'Dropped'}, status=200)
+\ No newline at end of file
+
+commit 8cd4c83fb064dbdfa18f52e74b4d7e4fa5cbce2e
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Mon Nov 14 23:09:34 2022 -0500
+
+    add serializers
+
+diff --git a/classes/admin.py b/classes/admin.py
+index 8c38f3f..4e10981 100644
+--- a/classes/admin.py
++++ b/classes/admin.py
+@@ -1,3 +1,8 @@
+ from django.contrib import admin
+ 
++from classes.models import Class, ClassTimeTable, Keywords
++
+ # Register your models here.
++admin.site.register(Class)
++admin.site.register(Keywords)
++admin.site.register(ClassTimeTable)
+diff --git a/classes/serializers.py b/classes/serializers.py
+new file mode 100644
+index 0000000..47b1622
+--- /dev/null
++++ b/classes/serializers.py
+@@ -0,0 +1,31 @@
++from rest_framework import serializers
++
++from classes.models import Class, ClassTimeTables, Keywords
++
++
++class KeywordsSerializer(serializers.ModelSerializer):
++    class Meta:
++        model = Keywords
++        fields = ('id', 'keyword')
++
++
++class ClassTimeTableSerializer(serializers.ModelSerializer):
++    ''' As a user, I want to see the class schedule of a specific studio on its page. 
++    Classes must appear in the order of their start time (from now), and the class information must be shown. 
++    Past or cancelled classes should not be listed.'''
++    class Meta:
++        model = ClassTimeTables
++        fields = ['time', 'spotleft']
++
++
++class ClassSerializer(serializers.ModelSerializer):
++    '''As the website admin, I can create/edit a class in a specific studio. 
++    A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
++    capacity, and times. '''
++    keywords = KeywordsSerializer(many=True, read_only=True)
++    timetable = ClassTimeTableSerializer(many=True, read_only=True)
++
++    class Meta:
++        model = Class
++        fields = ['name', 'description', 'coach', 'keywords', 'timetable']
++
+diff --git a/classes/urls.py b/classes/urls.py
+new file mode 100644
+index 0000000..3aafaaf
+--- /dev/null
++++ b/classes/urls.py
+@@ -0,0 +1,7 @@
++from django.urls import path
++
++app_name = 'classes'
++
++urlpatterns = [
++]
++
+diff --git a/classes/utils.py b/classes/utils.py
+new file mode 100644
+index 0000000..181b78b
+--- /dev/null
++++ b/classes/utils.py
+@@ -0,0 +1,9 @@
++from accounts.models import User
++
++
++def get_classes_with_spots():
++    ...
++
++def get_user_classes(user: User):
++    ...
++
+diff --git a/classes/views.py b/classes/views.py
+index 91ea44a..8869053 100644
+--- a/classes/views.py
++++ b/classes/views.py
+@@ -1,3 +1,38 @@
+-from django.shortcuts import render
++from django.shortcuts import get_object_or_404
++from rest_framework import generics
++from rest_framework.permissions import IsAuthenticated
+ 
++from classes.models import Class
++from classes.serializers import ClassSerializer
++
++from classes.utils import get_classes_with_spots, get_user_classes
+ # Create your views here.
++
++class ClassView(generics.RetrieveAPIView):
++    serializer_class = ClassSerializer
++
++    def get_object(self):
++        return get_object_or_404(Class, id=self.kwargs['class'])
++
++class ListUpcomingClassView(generics.ListAPIView):
++    serializer_class = ClassSerializer
++
++    def get_queryset(self):
++        return get_classes_with_spots()
++
++class ListMyClassView(generics.ListAPIView):
++    permission_classes = (IsAuthenticated,)
++    serializer_class = ClassSerializer
++
++    def get_queryset(self):
++        return get_user_classes(self.request.user)
++
++class EnrollClassView(generics.UpdateAPIView):
++    permission_classes = (IsAuthenticated,)
++    serializer_class = ClassSerializer
++
++    def get_object(self):
++        return get_object_or_404(Class, id=self.kwargs['class'])
++
++    def perform_update(self, serializer):
++        serializer.save()
+\ No newline at end of file
+
+commit 217bda353c4ee574971944419d95e7fdcdb96116
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Mon Nov 14 22:39:50 2022 -0500
+
+    Added code for Account avatar imagefield, added some code in settings and urls to support image media urls, and added basic validation for phone number and confirm password fields.
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 60d8999..9c62a78 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -136,6 +136,9 @@ STATIC_URL = "static/"
+ 
+ DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
+ 
+-# media root folder for any images
++# media root folder for any images, gathering uploads
+ 
+ MEDIA_ROOT = BASE_DIR / "images/"
++
++# group all media url
++MEDIA_URL = 'images/'
+diff --git a/TFC/urls.py b/TFC/urls.py
+index 1df3f49..a4aa970 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -13,6 +13,8 @@ Including another URLconf
+     1. Import the include() function: from django.urls import include, path
+     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+ """
++from django.conf import settings
++from django.conf.urls.static import static
+ from django.contrib import admin
+ from django.urls import path, include
+ 
+@@ -20,5 +22,6 @@ urlpatterns = [
+     path('admin/', admin.site.urls),
+     path('accounts/', include('accounts.urls')),
+     path('studios/', include('studios.urls')),
++] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
++# add media_URL and MEDIA_ROOT from settings for image urls to work properly
+ 
+-]
+diff --git a/accounts/models.py b/accounts/models.py
+index d128e9b..e7d92e5 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -1,11 +1,14 @@
+ from django.contrib.auth.models import User
++from django.core.validators import RegexValidator
+ from django.db import models as m
+ 
+ 
+ class Account(User):
+     # first/last name and email are inherited from User
+-    avatar = m.ImageField()
+-    phone_number = m.CharField(max_length=250)
++    avatar = m.ImageField(upload_to='account_avatars/')
++    phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$',
++                                 message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
++    phone_number = m.CharField(validators=[phone_regex], max_length=250, null=True, blank=True)
+ 
+ class CurrentSubscription(m.Model):
+     account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
+diff --git a/accounts/serializers.py b/accounts/serializers.py
+index 482155f..12381de 100644
+--- a/accounts/serializers.py
++++ b/accounts/serializers.py
+@@ -43,6 +43,11 @@ class SignupSerializer(serializers.ModelSerializer):
+             "password": {"write_only": True, "style": {"input_type": "password"}},
+         }
+ 
++    def validate(self, data):  # override validate function to add custom validation
++        if data['password'] != data['password2']:  # check if pass matches confirm pass
++            raise serializers.ValidationError({"password": "Password fields didn't match."})
++        return data
++
+     def create(self, validated_data: dict) -> Account:
+         # pop password 2
+         validated_data.pop('password2')
+
+commit be5c3bcbb0d34857118c96251b406bc7cbf40344
+Merge: 8cccadb b104047
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Mon Nov 14 21:41:13 2022 -0500
+
+    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc into account-draft
+
+commit b104047a74f529d9357d0737551fe6494f3c5e29
+Merge: d0a7957 3e079cf
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Mon Nov 14 19:48:24 2022 -0500
+
+    Merge pull request #6 from nathan-hansen/initial-studio-rest
+    
+    Initial studio rest
+
+commit 3e079cfdbee837a913bb75e0bf369e098930665e
+Merge: 859fc56 d0a7957
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Mon Nov 14 19:47:31 2022 -0500
+
+    Merge branch 'master' into initial-studio-rest
+
+commit 859fc562a7e8359823b3513b14f887af71fa0106
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Mon Nov 14 19:44:10 2022 -0500
+
+    admin studio views; proximity list
+
+diff --git a/requirements.txt b/requirements.txt
+index 09690ed..77c9896 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -1,4 +1,5 @@
+ Django
+ djangorestframework
+ djangorestframework-simplejwt
++geopy
+ Pillow
+diff --git a/studios/admin.py b/studios/admin.py
+index 8c38f3f..fd903ff 100644
+--- a/studios/admin.py
++++ b/studios/admin.py
+@@ -1,3 +1,6 @@
+ from django.contrib import admin
++from studios.models import Studio, StudioImage, Amenities
+ 
+-# Register your models here.
++admin.site.register(Studio)
++admin.site.register(StudioImage)
++admin.site.register(Amenities)
+diff --git a/studios/migrations/0006_alter_amenities_options.py b/studios/migrations/0006_alter_amenities_options.py
+new file mode 100644
+index 0000000..068409a
+--- /dev/null
++++ b/studios/migrations/0006_alter_amenities_options.py
+@@ -0,0 +1,17 @@
++# Generated by Django 4.1.3 on 2022-11-15 00:24
++
++from django.db import migrations
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("studios", "0005_alter_studio_phone_number"),
++    ]
++
++    operations = [
++        migrations.AlterModelOptions(
++            name="amenities",
++            options={"verbose_name_plural": "Amenities"},
++        ),
++    ]
+diff --git a/studios/models.py b/studios/models.py
+index 8271018..54c764f 100644
+--- a/studios/models.py
++++ b/studios/models.py
+@@ -1,4 +1,24 @@
+ from django.db import models as m
++from django.db.models.expressions import RawSQL
++from django.db.backends.signals import connection_created
++from django.dispatch import receiver
++import math
++
++
++# Following method sourced from user @rphlo at
++# https://stackoverflow.com/questions/19703975/django-sort-by-distance
++@receiver(connection_created)
++def extend_sqlite(connection=None, **kwargs):
++    if connection.vendor == "sqlite":
++        # sqlite doesn't natively support math functions, so add them
++        cf = connection.connection.create_function
++        cf('acos', 1, math.acos)
++        cf('cos', 1, math.cos)
++        cf('radians', 1, math.radians)
++        cf('sin', 1, math.sin)
++        cf('least', 2, min)
++        cf('greatest', 2, max)
++        print('SQLite extended successfully.')
+ 
+ class Studio(m.Model):
+     name = m.CharField(max_length=250)
+@@ -8,6 +28,29 @@ class Studio(m.Model):
+     postal_code = m.CharField(max_length=250)
+     phone_number = m.CharField(max_length=250)
+ 
++    # Following method sourced from user @rphlo at
++    # https://stackoverflow.com/questions/19703975/django-sort-by-distance
++    def get_locations_nearby_coords(latitude, longitude, max_distance=None):
++        """
++        Return objects sorted by distance to specified coordinates
++        which distance is less than max_distance given in kilometers
++        """
++        # Great circle distance formula
++        gcd_formula = "6371 * acos(least(greatest(\
++        cos(radians(%s)) * cos(radians(latitude)) \
++        * cos(radians(longitude) - radians(%s)) + \
++        sin(radians(%s)) * sin(radians(latitude)) \
++        , -1), 1))"
++        distance_raw_sql = RawSQL(
++            gcd_formula,
++            (latitude, longitude, latitude)
++        )
++        qs = Studio.objects.all() \
++        .annotate(distance=distance_raw_sql) \
++        .order_by('distance')
++        if max_distance is not None:
++            qs = qs.filter(distance__lt=max_distance)
++        return qs
+ 
+ class StudioImage(m.Model):
+     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
+@@ -18,4 +61,6 @@ class Amenities(m.Model):
+     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='amenities')
+     amenity_type = m.CharField(max_length=250)
+     quantity = m.IntegerField()
++    class Meta:
++        verbose_name_plural = "Amenities"
+ 
+diff --git a/studios/serializers.py b/studios/serializers.py
+index 72a4aaf..115f6bb 100644
+--- a/studios/serializers.py
++++ b/studios/serializers.py
+@@ -35,6 +35,6 @@ class AmenitiesSerializer(ModelSerializer):
+         model = Amenities
+         fields = [
+                 'studio',
+-                'type',
++                'amenity_type',
+                 'quantity',
+                 ]
+diff --git a/studios/urls.py b/studios/urls.py
+index c08f2ec..fbaeaff 100644
+--- a/studios/urls.py
++++ b/studios/urls.py
+@@ -1,19 +1,17 @@
+ from django.urls import path
+ from studios.views import (
+-        CreateStudioView,
+-        UpdateStudioView,
+-        DeleteStudioView,
+         ListStudioByProximityView,
+         StudioView,
++        ListStudioImagesView,
++        ListAmenitiesView,
+         )
+ 
+ app_name = 'studios'
+ 
+ urlpatterns = [
+-        path('create/', CreateStudioView.as_view()),
+-        path('<int:pk>/update/', UpdateStudioView.as_view()),
+-        path('<int:pk>/delete/', DeleteStudioView.as_view()),
+-        path('list/', ListStudioByProximityView.as_view()),
+-        path('<int:pk>/', StudioView.as_view()),
++        path('list/<latitude>,<longitude>', ListStudioByProximityView.as_view()),
++        path('<int:studio>/', StudioView.as_view()),
++        path('<int:studio>/images/', ListStudioImagesView.as_view()),
++        path('<int:studio>/amenities/', ListAmenitiesView.as_view()),
+ ]
+ 
+diff --git a/studios/views.py b/studios/views.py
+index bfe8655..16b63cc 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -1,36 +1,36 @@
+ from django.shortcuts import get_object_or_404
++from geopy.distance import geodesic
+ from rest_framework import generics
+-from rest_framework.permissions import IsAdminUser
+-from studios.serializers import StudioSerializer
+-from studios.models import Studio
+-
+-# admin authenticated views
+-class CreateStudioView(generics.CreateAPIView):
+-    permission_classes = [IsAdminUser]
+-    serializer_class = StudioSerializer
+-
+-
+-class UpdateStudioView(generics.UpdateAPIView):
+-    serializer_class = StudioSerializer
+-    queryset = Studio.objects.all()
+-    permission_classes = [IsAdminUser]
+-    def partial_update(self, request, *args, **kwargs):
+-        kwargs['partial'] = True
+-        return self.update(request, *args, **kwargs)
+-
+-class DeleteStudioView(generics.DestroyAPIView):
+-    permission_classes = [IsAdminUser]
+-    queryset = Studio.objects.all()
+-    serializer_class = StudioSerializer
++from studios.serializers import (
++        StudioSerializer, 
++        StudioImageSerializer, 
++        AmenitiesSerializer
++        )
++from studios.models import Studio, StudioImage, Amenities
+ 
+ # user authenticated views
+ class ListStudioByProximityView(generics.ListAPIView):
+     serializer_class = StudioSerializer
+-    queryset = Studio.objects.all()
+-    pass
++    def get_queryset(self):
++        lat = float(self.kwargs['latitude'])
++        lon = float(self.kwargs['longitude'])
++        print(f'lat: {lat}, lon: {lon}')
++        return Studio.get_locations_nearby_coords(lat, lon)
+ 
+ class StudioView(generics.RetrieveAPIView):
+     serializer_class = StudioSerializer
+ 
+     def get_object(self):
+-        return get_object_or_404(Studio, id=self.kwargs['pk'])
++        return get_object_or_404(Studio, id=self.kwargs['studio'])
++
++# views for related models
++class ListStudioImagesView(generics.ListAPIView):
++    serializer_class = StudioImageSerializer
++    def get_queryset(self):
++        return StudioImage.objects.filter(studio=self.kwargs['studio'])
++
++class ListAmenitiesView(generics.ListAPIView):
++    serializer_class = AmenitiesSerializer
++    def get_queryset(self):
++        return Amenities.objects.filter(studio=self.kwargs['studio'])
++
+
+commit d22283825870bdf6752bb1d964f3813844c85ee5
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Mon Nov 14 18:20:58 2022 -0500
+
+    added upload support to StudioImage model; changed studio phone number to string
+
+diff --git a/.gitignore b/.gitignore
+index 4ad4e6a..dd0b9c0 100644
+--- a/.gitignore
++++ b/.gitignore
+@@ -1,3 +1,5 @@
+ __pycache__/
+ db.sqlite3
+ env/
++images/studios/*
++images/avatars/*
+diff --git a/TFC/settings.py b/TFC/settings.py
+index eadd068..60d8999 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -135,3 +135,7 @@ STATIC_URL = "static/"
+ # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
+ 
+ DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
++
++# media root folder for any images
++
++MEDIA_ROOT = BASE_DIR / "images/"
+diff --git a/studios/migrations/0002_amenities.py b/studios/migrations/0002_amenities.py
+new file mode 100644
+index 0000000..c41114f
+--- /dev/null
++++ b/studios/migrations/0002_amenities.py
+@@ -0,0 +1,38 @@
++# Generated by Django 4.1.3 on 2022-11-14 21:15
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("studios", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="Amenities",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("amenity_type", models.CharField(max_length=250)),
++                ("quantity", models.IntegerField()),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="amenities",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++        ),
++    ]
+diff --git a/studios/migrations/0003_alter_studioimage_image.py b/studios/migrations/0003_alter_studioimage_image.py
+new file mode 100644
+index 0000000..dbf671d
+--- /dev/null
++++ b/studios/migrations/0003_alter_studioimage_image.py
+@@ -0,0 +1,20 @@
++# Generated by Django 4.1.3 on 2022-11-14 21:36
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("studios", "0002_amenities"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="studioimage",
++            name="image",
++            field=models.ImageField(
++                upload_to="studios/<django.db.models.fields.related.ForeignKey>/"
++            ),
++        ),
++    ]
+diff --git a/studios/migrations/0004_alter_studioimage_image.py b/studios/migrations/0004_alter_studioimage_image.py
+new file mode 100644
+index 0000000..f9cee56
+--- /dev/null
++++ b/studios/migrations/0004_alter_studioimage_image.py
+@@ -0,0 +1,18 @@
++# Generated by Django 4.1.3 on 2022-11-14 22:53
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("studios", "0003_alter_studioimage_image"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="studioimage",
++            name="image",
++            field=models.ImageField(upload_to="studios/"),
++        ),
++    ]
+diff --git a/studios/migrations/0005_alter_studio_phone_number.py b/studios/migrations/0005_alter_studio_phone_number.py
+new file mode 100644
+index 0000000..7b4abdb
+--- /dev/null
++++ b/studios/migrations/0005_alter_studio_phone_number.py
+@@ -0,0 +1,18 @@
++# Generated by Django 4.1.3 on 2022-11-14 23:18
++
++from django.db import migrations, models
++
++
++class Migration(migrations.Migration):
++
++    dependencies = [
++        ("studios", "0004_alter_studioimage_image"),
++    ]
++
++    operations = [
++        migrations.AlterField(
++            model_name="studio",
++            name="phone_number",
++            field=models.CharField(max_length=250),
++        ),
++    ]
+diff --git a/studios/models.py b/studios/models.py
+index de9629e..8271018 100644
+--- a/studios/models.py
++++ b/studios/models.py
+@@ -6,9 +6,16 @@ class Studio(m.Model):
+     latitude = m.FloatField()
+     longitude = m.FloatField()
+     postal_code = m.CharField(max_length=250)
+-    phone_number = m.IntegerField()
++    phone_number = m.CharField(max_length=250)
+ 
+ 
+ class StudioImage(m.Model):
+     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
+-    image = m.ImageField()
++    image = m.ImageField(upload_to="studios/")
++
++
++class Amenities(m.Model):
++    studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='amenities')
++    amenity_type = m.CharField(max_length=250)
++    quantity = m.IntegerField()
++
+diff --git a/studios/serializers.py b/studios/serializers.py
+index c0ae0dc..72a4aaf 100644
+--- a/studios/serializers.py
++++ b/studios/serializers.py
+@@ -1,5 +1,5 @@
+-from rest_framework.serializers import ModelSerializer
+-from studios.models import Studio
++from rest_framework.serializers import ModelSerializer, SlugRelatedField
++from studios.models import Studio, StudioImage, Amenities
+ 
+ class StudioSerializer(ModelSerializer):
+     class Meta:
+@@ -12,3 +12,29 @@ class StudioSerializer(ModelSerializer):
+                 'postal_code',
+                 'phone_number',
+                 ]
++
++
++class StudioImageSerializer(ModelSerializer):
++    studio = SlugRelatedField(
++            queryset = Studio.objects.all(), slug_field = 'pk'
++            )
++    def __init__(self, *args, **kwargs):
++        many = kwargs.pop('many', True)
++        super(StudioImageSerializer, self).__init__(many=many, *args, **kwargs)
++
++    class Meta:
++        model = StudioImage
++        fields = [
++                'studio',
++                'image',
++                ]
++
++
++class AmenitiesSerializer(ModelSerializer):
++    class Meta:
++        model = Amenities
++        fields = [
++                'studio',
++                'type',
++                'quantity',
++                ]
+
+commit 8cccadb5acfd1237ede9c057f35b6edf18ec69f3
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Sun Nov 13 23:01:56 2022 -0500
+
+    Added basic registration, login, view and edit profile functionality
+
+diff --git a/accounts/serializers.py b/accounts/serializers.py
+new file mode 100644
+index 0000000..482155f
+--- /dev/null
++++ b/accounts/serializers.py
+@@ -0,0 +1,50 @@
++from rest_framework import serializers
++from django.utils.translation import gettext_lazy as _
++from django.contrib.auth import get_user_model
++from accounts.models import EnrollClass
++from classes.models import ClassTimeTable
++from accounts.models import Account
++
++
++class AccountSerializer(serializers.ModelSerializer):
++    # we use this serializer to serialize the user model in the browsable api (get its data and display it/allow
++    # editing it)
++    class Meta:
++        model = Account
++        fields = ["username", "first_name", "last_name", "email", "phone_number"]
++        read_only_fields = ["password"]
++        # not allowed to edit this attribute, so read only, from tutorial code
++
++
++class EnrollClassSerializer(serializers.ModelSerializer):
++    account = AccountSerializer()
++
++    # classtime = ClassTimeTableSerializer()
++
++    class Meta:
++        model = EnrollClass
++        fields = ['account', 'classtime']
++
++
++# based on the tutorial code
++class SignupSerializer(serializers.ModelSerializer):
++    # Want a signup form that asks for the user's username, firstname, lastname, email, phone_number
++    # and password, we would also like to have an additional field to confirm the password (password2)
++    password2 = serializers.CharField(label=_("Confirm password"), write_only=True, style={"input_type": "password"})
++
++    class Meta:
++        model = Account  # returns the User model that is active in this project
++        fields = ("username", "password", "password2", "first_name", "last_name", "email", "phone_number")
++
++        # Specify the input type for password in the sign up, already did for password 2
++        # we can also specify the write_only attribute to specify that a field should only be used for writing data
++        # and not for reading data
++        extra_kwargs = {
++            "password": {"write_only": True, "style": {"input_type": "password"}},
++        }
++
++    def create(self, validated_data: dict) -> Account:
++        # pop password 2
++        validated_data.pop('password2')
++        # return the created user, use the User create_user method to make the user
++        return Account.objects.create_user(**validated_data)
+diff --git a/accounts/urls.py b/accounts/urls.py
+index a7380b3..de6863b 100644
+--- a/accounts/urls.py
++++ b/accounts/urls.py
+@@ -1,6 +1,14 @@
+ from django.urls import path
++from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
++from accounts.views import SignUpView, AccountView, AccountUpdateView
+ 
+ app_name = 'accounts'
+ 
+ urlpatterns = [
++    path('login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
++    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
++    path('signup/', SignUpView.as_view(), name='sign_up'),
++    path('<int:account_id>/', AccountView.as_view()),
++    path('update/', AccountUpdateView.as_view())
++
+ ]
+diff --git a/accounts/views.py b/accounts/views.py
+index 91ea44a..86da5b3 100644
+--- a/accounts/views.py
++++ b/accounts/views.py
+@@ -1,3 +1,39 @@
+ from django.shortcuts import render
++from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
++from rest_framework.permissions import IsAuthenticated, AllowAny
++from accounts.models import Account
++from accounts.serializers import AccountSerializer, SignupSerializer
++from django.shortcuts import get_object_or_404
++from rest_framework.views import APIView
++from rest_framework.response import Response
++from rest_framework import status
++
+ 
+ # Create your views here.
++class SignUpView(APIView):
++    permission_classes = (AllowAny,)
++    serializer_class = SignupSerializer
++
++    def post(self, request):
++        sign_up_serializer = self.serializer_class(data=request.data)
++        sign_up_serializer.is_valid(raise_exception=True)
++        sign_up_serializer.save()
++
++        return Response(sign_up_serializer.data, status=status.HTTP_201_CREATED)
++
++
++class AccountView(RetrieveAPIView):
++    serializer_class = AccountSerializer
++
++    def get_object(self):
++        return get_object_or_404(Account, id=self.kwargs['account_id'])
++
++
++class AccountUpdateView(UpdateAPIView):
++    permission_classes = [IsAuthenticated]
++    # make sure user is logged in
++    serializer_class = AccountSerializer
++
++    def get_object(self):
++        return get_object_or_404(Account, id=self.request.user.pk)
++        # use request.user.pk so that the logged in user can only edit their own profile
+
+commit ea73f1ab64d3235dfb8e294f14f8496b6a7442ee
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Sun Nov 13 20:52:43 2022 -0500
+
+    studio CRUD working
+
+diff --git a/TFC/urls.py b/TFC/urls.py
+index 3db96a3..1df3f49 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -17,6 +17,8 @@ from django.contrib import admin
+ from django.urls import path, include
+ 
+ urlpatterns = [
+-    path("admin/", admin.site.urls),
+-    path('accounts/', include('accounts.urls'))
++    path('admin/', admin.site.urls),
++    path('accounts/', include('accounts.urls')),
++    path('studios/', include('studios.urls')),
++
+ ]
+diff --git a/studios/serializers.py b/studios/serializers.py
+new file mode 100644
+index 0000000..c0ae0dc
+--- /dev/null
++++ b/studios/serializers.py
+@@ -0,0 +1,14 @@
++from rest_framework.serializers import ModelSerializer
++from studios.models import Studio
++
++class StudioSerializer(ModelSerializer):
++    class Meta:
++        model = Studio
++        fields = [
++                'name',
++                'address',
++                'latitude',
++                'longitude',
++                'postal_code',
++                'phone_number',
++                ]
+diff --git a/studios/urls.py b/studios/urls.py
+new file mode 100644
+index 0000000..c08f2ec
+--- /dev/null
++++ b/studios/urls.py
+@@ -0,0 +1,19 @@
++from django.urls import path
++from studios.views import (
++        CreateStudioView,
++        UpdateStudioView,
++        DeleteStudioView,
++        ListStudioByProximityView,
++        StudioView,
++        )
++
++app_name = 'studios'
++
++urlpatterns = [
++        path('create/', CreateStudioView.as_view()),
++        path('<int:pk>/update/', UpdateStudioView.as_view()),
++        path('<int:pk>/delete/', DeleteStudioView.as_view()),
++        path('list/', ListStudioByProximityView.as_view()),
++        path('<int:pk>/', StudioView.as_view()),
++]
++
+diff --git a/studios/views.py b/studios/views.py
+index 91ea44a..bfe8655 100644
+--- a/studios/views.py
++++ b/studios/views.py
+@@ -1,3 +1,36 @@
+-from django.shortcuts import render
++from django.shortcuts import get_object_or_404
++from rest_framework import generics
++from rest_framework.permissions import IsAdminUser
++from studios.serializers import StudioSerializer
++from studios.models import Studio
+ 
+-# Create your views here.
++# admin authenticated views
++class CreateStudioView(generics.CreateAPIView):
++    permission_classes = [IsAdminUser]
++    serializer_class = StudioSerializer
++
++
++class UpdateStudioView(generics.UpdateAPIView):
++    serializer_class = StudioSerializer
++    queryset = Studio.objects.all()
++    permission_classes = [IsAdminUser]
++    def partial_update(self, request, *args, **kwargs):
++        kwargs['partial'] = True
++        return self.update(request, *args, **kwargs)
++
++class DeleteStudioView(generics.DestroyAPIView):
++    permission_classes = [IsAdminUser]
++    queryset = Studio.objects.all()
++    serializer_class = StudioSerializer
++
++# user authenticated views
++class ListStudioByProximityView(generics.ListAPIView):
++    serializer_class = StudioSerializer
++    queryset = Studio.objects.all()
++    pass
++
++class StudioView(generics.RetrieveAPIView):
++    serializer_class = StudioSerializer
++
++    def get_object(self):
++        return get_object_or_404(Studio, id=self.kwargs['pk'])
+
+commit d0a7957540c553fa900fa1bfebb9eff1967efb12
+Merge: 60f3ad6 8a7f9fc
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 12 19:47:28 2022 -0500
+
+    Merge pull request #5 from nathan-hansen/model_class
+    
+    Convert DB schema into Models
+
+commit 8a7f9fc2cf6037a94f303b4a7dbaa357b5221de5
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 12 17:32:52 2022 -0500
+
+    modify db here and there
+
+diff --git a/Documents/CSC309.png b/Documents/CSC309.png
+index 63c7abd..0c0326e 100644
+Binary files a/Documents/CSC309.png and b/Documents/CSC309.png differ
+diff --git a/Documents/DBSchema.sql b/Documents/DBSchema.sql
+index d730e53..ec02b68 100644
+--- a/Documents/DBSchema.sql
++++ b/Documents/DBSchema.sql
+@@ -7,7 +7,6 @@ table Account [headercolor: #2D6512] {
+   email StringField
+   avatar ImageField
+   phone_number StringField
+-  current_subscription ForeignKey
+ }
+ 
+ table Studio [headercolor: #4B82B0] {
+@@ -67,11 +66,11 @@ table SubscriptionPlan [headercolor: #79AD51] {
+   payment DecimalField
+   // one of "monthly", "yearly", etc
+   // change if more complexity needed
+-  interval StringField
++  interval DurationField
+ }
+ 
+ table CurrentSubscription [headercolor: #126E7A] {
+-  id int [pk]
++  account ForeignKey
+   plan ForeignKey
+   expiration DateTimeField
+ }
+@@ -81,9 +80,11 @@ table PaymentInfo [headercolor: #24BAB1] {
+   account ForeignKey
+   card_number IntegerField
+   card_expiry IntegerField
++  cvv IntegerField
++  name_on_card StringField
+ }
+ Ref: PaymentInfo.account - Account.id
+-Ref: Account.current_subscription - CurrentSubscription.id
++Ref: Account.id - CurrentSubscription.account
+ 
+ table PaymentHistory [headercolor: #24BAB1] {
+   id int [pk]
+
+commit 2ac7df98e07f90ecf5bb6e4d05733adfe3521c06
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 12 17:32:09 2022 -0500
+
+    migrate
+
+diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
+new file mode 100644
+index 0000000..a072b37
+--- /dev/null
++++ b/accounts/migrations/0001_initial.py
+@@ -0,0 +1,54 @@
++# Generated by Django 4.1.3 on 2022-11-12 22:31
++
++from django.conf import settings
++import django.contrib.auth.models
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ('auth', '0012_alter_user_first_name_max_length'),
++        ('classes', '0001_initial'),
++        ('subscriptions', '__first__'),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name='Account',
++            fields=[
++                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
++                ('avatar', models.ImageField(upload_to='')),
++                ('phone_number', models.CharField(max_length=250)),
++            ],
++            options={
++                'verbose_name': 'user',
++                'verbose_name_plural': 'users',
++                'abstract': False,
++            },
++            bases=('auth.user',),
++            managers=[
++                ('objects', django.contrib.auth.models.UserManager()),
++            ],
++        ),
++        migrations.CreateModel(
++            name='EnrollClass',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='accounts.account')),
++                ('classtime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='classes.classtimetable')),
++            ],
++        ),
++        migrations.CreateModel(
++            name='CurrentSubscription',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('expiration', models.DateTimeField()),
++                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='accounts.account')),
++                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='subscriptions.subscriptionplan')),
++            ],
++        ),
++    ]
+diff --git a/accounts/models.py b/accounts/models.py
+index 768bf95..d128e9b 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -6,7 +6,6 @@ class Account(User):
+     # first/last name and email are inherited from User
+     avatar = m.ImageField()
+     phone_number = m.CharField(max_length=250)
+-    current_subscription = m.ForeignKey('subscriptions.CurrentSubscription', on_delete=m.SET_NULL, related_name='account')
+ 
+ class CurrentSubscription(m.Model):
+     account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
+diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
+new file mode 100644
+index 0000000..88e945f
+--- /dev/null
++++ b/classes/migrations/0001_initial.py
+@@ -0,0 +1,44 @@
++# Generated by Django 4.1.3 on 2022-11-12 22:31
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ('studios', '0001_initial'),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name='Class',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('name', models.CharField(max_length=250)),
++                ('description', models.TextField()),
++                ('coach', models.CharField(max_length=250)),
++                ('duration', models.DurationField()),
++                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tfc_class', to='studios.studio')),
++            ],
++        ),
++        migrations.CreateModel(
++            name='Keywords',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('keyword', models.CharField(max_length=250)),
++                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='classes.class')),
++            ],
++        ),
++        migrations.CreateModel(
++            name='ClassTimeTable',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('time', models.DateTimeField()),
++                ('spotleft', models.IntegerField()),
++                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable', to='classes.class')),
++            ],
++        ),
++    ]
+diff --git a/payments/models.py b/payments/models.py
+index 6873cde..da41b3a 100644
+--- a/payments/models.py
++++ b/payments/models.py
+@@ -2,14 +2,14 @@ from django.db import models as m
+ 
+ 
+ class PaymentInfo(m.Model):
+-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_info')
++    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='payment_info')
+     card_number = m.CharField(max_length=250)
+     expiry_date = m.DateField()
+     cvv = m.IntegerField()
+     name_on_card = m.CharField(max_length=250)
+ 
+ class PaymentHistory(m.Model):
+-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_history')
++    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='payment_history')
+     timestamp = m.DateTimeField()
+     amount = m.FloatField()
+     card_number = m.CharField(max_length=250)
+diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
+new file mode 100644
+index 0000000..904fd06
+--- /dev/null
++++ b/studios/migrations/0001_initial.py
+@@ -0,0 +1,44 @@
++# Generated by Django 4.1.3 on 2022-11-12 22:31
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name='Studio',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('name', models.CharField(max_length=250)),
++                ('address', models.CharField(max_length=250)),
++                ('latitude', models.FloatField()),
++                ('longitude', models.FloatField()),
++                ('postal_code', models.CharField(max_length=250)),
++                ('phone_number', models.CharField(max_length=250)),
++            ],
++        ),
++        migrations.CreateModel(
++            name='StudioImage',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('image', models.ImageField(upload_to='')),
++                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='studios.studio')),
++            ],
++        ),
++        migrations.CreateModel(
++            name='Amenities',
++            fields=[
++                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
++                ('type', models.CharField(max_length=250)),
++                ('quantity', models.IntegerField()),
++                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='studios.studio')),
++            ],
++        ),
++    ]
+
+commit 7e31469be54fa09be91a46ecce6af2b65b25358d
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 12 17:26:14 2022 -0500
+
+    finish init contribute; remove old migration
+
+diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
+deleted file mode 100644
+index 30a162f..0000000
+--- a/accounts/migrations/0001_initial.py
++++ /dev/null
+@@ -1,45 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-11 02:37
+-
+-from django.conf import settings
+-import django.contrib.auth.models
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ("auth", "0012_alter_user_first_name_max_length"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="User",
+-            fields=[
+-                (
+-                    "user_ptr",
+-                    models.OneToOneField(
+-                        auto_created=True,
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        parent_link=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        to=settings.AUTH_USER_MODEL,
+-                    ),
+-                ),
+-                ("avatar", models.ImageField(upload_to="")),
+-                ("phone_number", models.IntegerField()),
+-            ],
+-            options={
+-                "verbose_name": "user",
+-                "verbose_name_plural": "users",
+-                "abstract": False,
+-            },
+-            bases=("auth.user",),
+-            managers=[
+-                ("objects", django.contrib.auth.models.UserManager()),
+-            ],
+-        ),
+-    ]
+diff --git a/accounts/models.py b/accounts/models.py
+index 99e3872..768bf95 100644
+--- a/accounts/models.py
++++ b/accounts/models.py
+@@ -1,6 +1,18 @@
+-from django.db import models as m
+ from django.contrib.auth.models import User
++from django.db import models as m
++
+ 
+-class User(User):
++class Account(User):
++    # first/last name and email are inherited from User
+     avatar = m.ImageField()
+-    phone_number = m.IntegerField()
++    phone_number = m.CharField(max_length=250)
++    current_subscription = m.ForeignKey('subscriptions.CurrentSubscription', on_delete=m.SET_NULL, related_name='account')
++
++class CurrentSubscription(m.Model):
++    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
++    plan = m.ForeignKey('subscriptions.SubscriptionPlan', on_delete=m.CASCADE, related_name='current_subscription')
++    expiration = m.DateTimeField()
++
++class EnrollClass(m.Model):
++    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
++    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
+\ No newline at end of file
+diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
+deleted file mode 100644
+index 61a2604..0000000
+--- a/classes/migrations/0001_initial.py
++++ /dev/null
+@@ -1,45 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-11 02:37
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = [
+-        ("studios", "0001_initial"),
+-    ]
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="Class",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("name", models.CharField(max_length=250)),
+-                ("description", models.TextField()),
+-                ("coach", models.CharField(max_length=250)),
+-                ("keywords", models.TextField()),
+-                ("capacity", models.IntegerField()),
+-                ("start_time", models.DateTimeField()),
+-                ("duration", models.DurationField()),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="tfc_class",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-        ),
+-    ]
+diff --git a/classes/models.py b/classes/models.py
+index e3caecc..b9ffe69 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -6,7 +6,13 @@ class Class(m.Model):
+     name = m.CharField(max_length=250)
+     description = m.TextField()
+     coach = m.CharField(max_length=250)
+-    keywords = m.TextField()
+-    capacity = m.IntegerField()
+-    start_time = m.DateTimeField()
+     duration = m.DurationField()
++
++class Keywords(m.Model):
++    classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='keywords')
++    keyword = m.CharField(max_length=250)
++
++class ClassTimeTable(m.Model):
++    classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='timetable')
++    time = m.DateTimeField()
++    spotleft = m.IntegerField()
+\ No newline at end of file
+diff --git a/payments/models.py b/payments/models.py
+index 90f53fe..6873cde 100644
+--- a/payments/models.py
++++ b/payments/models.py
+@@ -1,15 +1,16 @@
+ from django.db import models as m
+ 
+-class Payment(m.Model):
+-    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='user_payment')
+-    card_number = m.IntegerField()
+-    card_expiry = m.IntegerField()
+-    card_security = m.IntegerField()
+-    current_subscription = m.ForeignKey('subscriptions.Subscription', null=True, on_delete=m.SET_NULL, related_name='current_subscription_payment')
+ 
++class PaymentInfo(m.Model):
++    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_info')
++    card_number = m.CharField(max_length=250)
++    expiry_date = m.DateField()
++    cvv = m.IntegerField()
++    name_on_card = m.CharField(max_length=250)
+ 
+ class PaymentHistory(m.Model):
+-    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='payment_history')
++    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_history')
+     timestamp = m.DateTimeField()
+-    amount = m.DecimalField(decimal_places=2, max_digits=12)
+-
++    amount = m.FloatField()
++    card_number = m.CharField(max_length=250)
++    card_expiry = m.DateField()
+\ No newline at end of file
+diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
+deleted file mode 100644
+index 853bc9b..0000000
+--- a/studios/migrations/0001_initial.py
++++ /dev/null
+@@ -1,57 +0,0 @@
+-# Generated by Django 4.1.3 on 2022-11-11 02:37
+-
+-from django.db import migrations, models
+-import django.db.models.deletion
+-
+-
+-class Migration(migrations.Migration):
+-
+-    initial = True
+-
+-    dependencies = []
+-
+-    operations = [
+-        migrations.CreateModel(
+-            name="Studio",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("name", models.CharField(max_length=250)),
+-                ("address", models.CharField(max_length=250)),
+-                ("latitude", models.FloatField()),
+-                ("longitude", models.FloatField()),
+-                ("postal_code", models.CharField(max_length=250)),
+-                ("phone_number", models.IntegerField()),
+-            ],
+-        ),
+-        migrations.CreateModel(
+-            name="StudioImage",
+-            fields=[
+-                (
+-                    "id",
+-                    models.BigAutoField(
+-                        auto_created=True,
+-                        primary_key=True,
+-                        serialize=False,
+-                        verbose_name="ID",
+-                    ),
+-                ),
+-                ("image", models.ImageField(upload_to="")),
+-                (
+-                    "studio",
+-                    models.ForeignKey(
+-                        on_delete=django.db.models.deletion.CASCADE,
+-                        related_name="image",
+-                        to="studios.studio",
+-                    ),
+-                ),
+-            ],
+-        ),
+-    ]
+diff --git a/studios/models.py b/studios/models.py
+index de9629e..be48700 100644
+--- a/studios/models.py
++++ b/studios/models.py
+@@ -1,14 +1,20 @@
+ from django.db import models as m
+ 
++
+ class Studio(m.Model):
+     name = m.CharField(max_length=250)
+     address = m.CharField(max_length=250)
+     latitude = m.FloatField()
+     longitude = m.FloatField()
+     postal_code = m.CharField(max_length=250)
+-    phone_number = m.IntegerField()
++    phone_number = m.CharField(max_length=250)
+ 
+ 
+ class StudioImage(m.Model):
+     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
+     image = m.ImageField()
++
++class Amenities(m.Model):
++    studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='amenities')
++    type = m.CharField(max_length=250)
++    quantity = m.IntegerField()
+\ No newline at end of file
+diff --git a/subscriptions/models.py b/subscriptions/models.py
+index c8b2249..416ad24 100644
+--- a/subscriptions/models.py
++++ b/subscriptions/models.py
+@@ -1,6 +1,7 @@
+ from django.db import models as m
+ 
+-class Subscription(m.Model):
++
++class SubscriptionPlan(m.Model):
+     payment = m.DecimalField(decimal_places=2, max_digits=12)
+-    # TODO: interval should be one of 'weekly', 'yearly', 'daily', etc
+-    interval = m.CharField(max_length=16)
++    interval = m.DurationField()
++
+
+commit af6dee3fed84637a65f0e63716a8d87324983756
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 12 16:44:21 2022 -0500
+
+    init commit
+
+diff --git a/classes/models.py b/classes/models.py
+index 7d384d5..e3caecc 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -1,5 +1,6 @@
+ from django.db import models as m
+ 
++
+ class Class(m.Model):
+     studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='tfc_class')
+     name = m.CharField(max_length=250)
+
+commit 60f3ad6e080e69a638a7cdc72b105bb4e84adaa5
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Sat Nov 12 16:40:54 2022 -0500
+
+    change class name
+
+diff --git a/Documents/CSC309.png b/Documents/CSC309.png
+index 0bc5406..63c7abd 100644
+Binary files a/Documents/CSC309.png and b/Documents/CSC309.png differ
+diff --git a/Documents/DBSchema.sql b/Documents/DBSchema.sql
+index 9bfa57f..d730e53 100644
+--- a/Documents/DBSchema.sql
++++ b/Documents/DBSchema.sql
+@@ -48,19 +48,19 @@ Ref: Class.studio > Studio.id
+ 
+ table Keywords [headercolor: #EB801B] {
+   keyword StringField
+-  class ForeignKey
++  classid ForeignKey
+ }
+-Ref: Keywords.class > Class.id
++Ref: Keywords.classid > Class.id
+ 
+ // Use this table if you want to cancel 
+ // one time in a recursive class
+ table ClassTimeTable [headercolor: #EB801B] {
+   id int [pk]
+-  class ForeignKey
++  classid ForeignKey
+   time DateTimeField
+   spotleft IntegerField
+ }
+-Ref: ClassTimeTable.class > Class.id
++Ref: ClassTimeTable.classid > Class.id
+ 
+ table SubscriptionPlan [headercolor: #79AD51] {
+   id int [pk]
+
+commit 08c3059f48b7996e8374a69eb60430bcea04418c
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Fri Nov 11 23:16:57 2022 -0500
+
+    added django rest prerequisites
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 02584ff..eadd068 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -42,8 +42,17 @@ INSTALLED_APPS = [
+     "studios",
+     "payments",
+     "subscriptions",
++    "rest_framework",
+ ]
+ 
++REST_FRAMEWORK = {
++    'DEFAULT_AUTHENTICATION_CLASSES': (
++        'rest_framework_simplejwt.authentication.JWTAuthentication',
++        'rest_framework.authentication.SessionAuthentication',
++        'rest_framework.authentication.BasicAuthentication',
++    ),
++}
++
+ MIDDLEWARE = [
+     "django.middleware.security.SecurityMiddleware",
+     "django.contrib.sessions.middleware.SessionMiddleware",
+diff --git a/requirements.txt b/requirements.txt
+index 19781b7..09690ed 100644
+--- a/requirements.txt
++++ b/requirements.txt
+@@ -1,2 +1,4 @@
+ Django
++djangorestframework
++djangorestframework-simplejwt
+ Pillow
+
+commit e5b42ad50fa7d2d000470c7afcd463938e42fc5e
+Merge: 7facdf1 e31c595
+Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
+Date:   Fri Nov 11 22:46:34 2022 -0500
+
+    Merge pull request #2 from nathan-hansen/DB-file
+    
+    Create DBSchema.sql
+
+commit e31c59586870cf9ccb7128bf8b0f345ccfb8632f
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 11 22:44:45 2022 -0500
+
+    add pictures
+
+diff --git a/Documents/CSC309.png b/Documents/CSC309.png
+new file mode 100644
+index 0000000..0bc5406
+Binary files /dev/null and b/Documents/CSC309.png differ
+diff --git a/Documents/DBSchema.sql b/Documents/DBSchema.sql
+index fa5500a..9bfa57f 100644
+--- a/Documents/DBSchema.sql
++++ b/Documents/DBSchema.sql
+@@ -1,3 +1,5 @@
++-- Image generated by dbdiagram.io
++
+ table Account [headercolor: #2D6512] {
+   id int [pk]
+   first_name StringField
+
+commit b12e5a58152dee3a010a628ffd2e4be8c6586aa6
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 11 22:42:39 2022 -0500
+
+    fix one-to-one
+
+diff --git a/DBSchema.sql b/Documents/DBSchema.sql
+similarity index 68%
+rename from DBSchema.sql
+rename to Documents/DBSchema.sql
+index 0bac5c9..fa5500a 100644
+--- a/DBSchema.sql
++++ b/Documents/DBSchema.sql
+@@ -1,4 +1,4 @@
+-table Account {
++table Account [headercolor: #2D6512] {
+   id int [pk]
+   first_name StringField
+   last_name StringField
+@@ -8,7 +8,7 @@ table Account {
+   current_subscription ForeignKey
+ }
+ 
+-table Studio {
++table Studio [headercolor: #4B82B0] {
+   id int [pk]
+   name StringField
+   address StringField
+@@ -19,20 +19,20 @@ table Studio {
+   // images
+ }
+ 
+-table StudioImage {
++table StudioImage [headercolor: #4B82B0] {
+   studio ForeignKey
+   image ImageField
+ }
+ Ref: StudioImage.studio > Studio.id
+ 
+-table Amenities {
++table Amenities [headercolor: #4B82B0] {
+   studio ForeignKey
+   type StringField
+   quantity int
+ }
+ Ref: Amenities.studio > Studio.id
+ 
+-table Class {
++table Class [headercolor: #EB801B] {
+   id int [pk]
+   studio ForeignKey
+   name StringField
+@@ -44,7 +44,7 @@ table Class {
+ }
+ Ref: Class.studio > Studio.id
+ 
+-table Keywords {
++table Keywords [headercolor: #EB801B] {
+   keyword StringField
+   class ForeignKey
+ }
+@@ -52,7 +52,7 @@ Ref: Keywords.class > Class.id
+ 
+ // Use this table if you want to cancel 
+ // one time in a recursive class
+-table ClassTimeTable {
++table ClassTimeTable [headercolor: #EB801B] {
+   id int [pk]
+   class ForeignKey
+   time DateTimeField
+@@ -60,7 +60,7 @@ table ClassTimeTable {
+ }
+ Ref: ClassTimeTable.class > Class.id
+ 
+-table SubscriptionPlan {
++table SubscriptionPlan [headercolor: #79AD51] {
+   id int [pk]
+   payment DecimalField
+   // one of "monthly", "yearly", etc
+@@ -68,22 +68,22 @@ table SubscriptionPlan {
+   interval StringField
+ }
+ 
+-table CurrentSubscription {
++table CurrentSubscription [headercolor: #126E7A] {
+   id int [pk]
+   plan ForeignKey
+   expiration DateTimeField
+ }
+-Ref: CurrentSubscription.plan > SubscriptionPlan.id
++Ref: CurrentSubscription.plan - SubscriptionPlan.id
+ 
+-table Payment {
++table PaymentInfo [headercolor: #24BAB1] {
+   account ForeignKey
+   card_number IntegerField
+   card_expiry IntegerField
+ }
+-Ref: Payment.account > Account.id
+-Ref: Account.current_subscription > CurrentSubscription.id
++Ref: PaymentInfo.account - Account.id
++Ref: Account.current_subscription - CurrentSubscription.id
+ 
+-table PaymentHistory {
++table PaymentHistory [headercolor: #24BAB1] {
+   id int [pk]
+   account ForeignKey
+   timestamp DateTimeField
+@@ -93,9 +93,9 @@ table PaymentHistory {
+ }
+ Ref: PaymentHistory.account > Account.id
+ 
+-table EnrollClass {
++table EnrollClass [headercolor: #DE65C3] {
+   account ForeignKey
+   classtime ForeignKey
+ }
+ Ref: EnrollClass.account > Account.id
+-Ref: EnrollClass.classtime > ClassTimeTable.id
++Ref: EnrollClass.classtime > ClassTimeTable.id
+\ No newline at end of file
+
+commit ca372a4d67a8672ee5ea88dbddc262e6aaa9a282
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 11 22:32:52 2022 -0500
+
+    Subscription
+
+diff --git a/DBSchema.sql b/DBSchema.sql
+index 186f33a..0bac5c9 100644
+--- a/DBSchema.sql
++++ b/DBSchema.sql
+@@ -5,7 +5,7 @@ table Account {
+   email StringField
+   avatar ImageField
+   phone_number StringField
+-  
++  current_subscription ForeignKey
+ }
+ 
+ table Studio {
+@@ -60,7 +60,7 @@ table ClassTimeTable {
+ }
+ Ref: ClassTimeTable.class > Class.id
+ 
+-table Subscription {
++table SubscriptionPlan {
+   id int [pk]
+   payment DecimalField
+   // one of "monthly", "yearly", etc
+@@ -68,16 +68,20 @@ table Subscription {
+   interval StringField
+ }
+ 
+-table Payment {
++table CurrentSubscription {
+   id int [pk]
++  plan ForeignKey
++  expiration DateTimeField
++}
++Ref: CurrentSubscription.plan > SubscriptionPlan.id
++
++table Payment {
+   account ForeignKey
+   card_number IntegerField
+   card_expiry IntegerField
+-  card_security IntegerField
+-  current_subscription ForeignKey
+ }
+ Ref: Payment.account > Account.id
+-Ref: Payment.current_subscription > Subscription.id
++Ref: Account.current_subscription > CurrentSubscription.id
+ 
+ table PaymentHistory {
+   id int [pk]
+@@ -86,7 +90,6 @@ table PaymentHistory {
+   amount DecimalField
+   card_number IntegerField
+   card_expiry IntegerField
+-  card_security IntegerField
+ }
+ Ref: PaymentHistory.account > Account.id
+ 
+
+commit d0f8ab3cf382159e02d8c9bb75661008827a8c80
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 11 22:13:10 2022 -0500
+
+    add course booking
+
+diff --git a/DBSchema.sql b/DBSchema.sql
+index 63e532e..186f33a 100644
+--- a/DBSchema.sql
++++ b/DBSchema.sql
+@@ -1,4 +1,4 @@
+-table User {
++table Account {
+   id int [pk]
+   first_name StringField
+   last_name StringField
+@@ -27,7 +27,7 @@ Ref: StudioImage.studio > Studio.id
+ 
+ table Amenities {
+   studio ForeignKey
+-  type varchar
++  type StringField
+   quantity int
+ }
+ Ref: Amenities.studio > Studio.id
+@@ -40,14 +40,26 @@ table Class {
+   coach StringField
+   // keywords type could change...
+   // assess during implementation
+-  keywords TextField
+-  capacity IntegerField
+-  start_time DateTimeField
+-  // this could be end time instead
+-  duration DurationField 
++  duration DurationField
+ }
+ Ref: Class.studio > Studio.id
+ 
++table Keywords {
++  keyword StringField
++  class ForeignKey
++}
++Ref: Keywords.class > Class.id
++
++// Use this table if you want to cancel 
++// one time in a recursive class
++table ClassTimeTable {
++  id int [pk]
++  class ForeignKey
++  time DateTimeField
++  spotleft IntegerField
++}
++Ref: ClassTimeTable.class > Class.id
++
+ table Subscription {
+   id int [pk]
+   payment DecimalField
+@@ -58,23 +70,29 @@ table Subscription {
+ 
+ table Payment {
+   id int [pk]
+-  user ForeignKey
++  account ForeignKey
+   card_number IntegerField
+   card_expiry IntegerField
+   card_security IntegerField
+   current_subscription ForeignKey
+ }
+-Ref: Payment.user > User.id
++Ref: Payment.account > Account.id
+ Ref: Payment.current_subscription > Subscription.id
+ 
+ table PaymentHistory {
+   id int [pk]
+-  user ForeignKey
++  account ForeignKey
+   timestamp DateTimeField
+   amount DecimalField
+   card_number IntegerField
+   card_expiry IntegerField
+   card_security IntegerField
+ }
+-Ref: PaymentHistory.user > User.id
++Ref: PaymentHistory.account > Account.id
+ 
++table EnrollClass {
++  account ForeignKey
++  classtime ForeignKey
++}
++Ref: EnrollClass.account > Account.id
++Ref: EnrollClass.classtime > ClassTimeTable.id
+
+commit 73f198f950700d04da5b4778114d8918b92cdb7c
+Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
+Date:   Fri Nov 11 20:57:55 2022 -0500
+
+    Create DBSchema.sql
+    
+    schema file for collaboration. #1
+
+diff --git a/DBSchema.sql b/DBSchema.sql
+new file mode 100644
+index 0000000..63e532e
+--- /dev/null
++++ b/DBSchema.sql
+@@ -0,0 +1,80 @@
++table User {
++  id int [pk]
++  first_name StringField
++  last_name StringField
++  email StringField
++  avatar ImageField
++  phone_number StringField
++  
++}
++
++table Studio {
++  id int [pk]
++  name StringField
++  address StringField
++  latitude FloatField
++  longitude FloatField
++  postal_code StringField
++  phone_number StringField
++  // images
++}
++
++table StudioImage {
++  studio ForeignKey
++  image ImageField
++}
++Ref: StudioImage.studio > Studio.id
++
++table Amenities {
++  studio ForeignKey
++  type varchar
++  quantity int
++}
++Ref: Amenities.studio > Studio.id
++
++table Class {
++  id int [pk]
++  studio ForeignKey
++  name StringField
++  description TextField
++  coach StringField
++  // keywords type could change...
++  // assess during implementation
++  keywords TextField
++  capacity IntegerField
++  start_time DateTimeField
++  // this could be end time instead
++  duration DurationField 
++}
++Ref: Class.studio > Studio.id
++
++table Subscription {
++  id int [pk]
++  payment DecimalField
++  // one of "monthly", "yearly", etc
++  // change if more complexity needed
++  interval StringField
++}
++
++table Payment {
++  id int [pk]
++  user ForeignKey
++  card_number IntegerField
++  card_expiry IntegerField
++  card_security IntegerField
++  current_subscription ForeignKey
++}
++Ref: Payment.user > User.id
++Ref: Payment.current_subscription > Subscription.id
++
++table PaymentHistory {
++  id int [pk]
++  user ForeignKey
++  timestamp DateTimeField
++  amount DecimalField
++  card_number IntegerField
++  card_expiry IntegerField
++  card_security IntegerField
++}
++Ref: PaymentHistory.user > User.id
++
+
+commit 7facdf1dbd3cab7282be958fdb22d4d2f3bb2d8f
+Author: ed29leung <edwardleung.ca@gmail.com>
+Date:   Thu Nov 10 23:15:15 2022 -0500
+
+    Test Commit - added urls.py file to accounts
+
+diff --git a/TFC/urls.py b/TFC/urls.py
+index b705392..3db96a3 100644
+--- a/TFC/urls.py
++++ b/TFC/urls.py
+@@ -14,8 +14,9 @@ Including another URLconf
+     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+ """
+ from django.contrib import admin
+-from django.urls import path
++from django.urls import path, include
+ 
+ urlpatterns = [
+     path("admin/", admin.site.urls),
++    path('accounts/', include('accounts.urls'))
+ ]
+diff --git a/accounts/urls.py b/accounts/urls.py
+new file mode 100644
+index 0000000..a7380b3
+--- /dev/null
++++ b/accounts/urls.py
+@@ -0,0 +1,6 @@
++from django.urls import path
++
++app_name = 'accounts'
++
++urlpatterns = [
++]
+
+commit 4db7802d19f39c868b4034bee6c4d5ce1e5f1799
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Thu Nov 10 21:38:53 2022 -0500
+
+    added initial payments/subscriptions; fixed studio location
+
+diff --git a/TFC/settings.py b/TFC/settings.py
+index 5f7ca4f..02584ff 100644
+--- a/TFC/settings.py
++++ b/TFC/settings.py
+@@ -40,6 +40,8 @@ INSTALLED_APPS = [
+     "accounts",
+     "classes",
+     "studios",
++    "payments",
++    "subscriptions",
+ ]
+ 
+ MIDDLEWARE = [
+diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
+new file mode 100644
+index 0000000..30a162f
+--- /dev/null
++++ b/accounts/migrations/0001_initial.py
+@@ -0,0 +1,45 @@
++# Generated by Django 4.1.3 on 2022-11-11 02:37
++
++from django.conf import settings
++import django.contrib.auth.models
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ("auth", "0012_alter_user_first_name_max_length"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="User",
++            fields=[
++                (
++                    "user_ptr",
++                    models.OneToOneField(
++                        auto_created=True,
++                        on_delete=django.db.models.deletion.CASCADE,
++                        parent_link=True,
++                        primary_key=True,
++                        serialize=False,
++                        to=settings.AUTH_USER_MODEL,
++                    ),
++                ),
++                ("avatar", models.ImageField(upload_to="")),
++                ("phone_number", models.IntegerField()),
++            ],
++            options={
++                "verbose_name": "user",
++                "verbose_name_plural": "users",
++                "abstract": False,
++            },
++            bases=("auth.user",),
++            managers=[
++                ("objects", django.contrib.auth.models.UserManager()),
++            ],
++        ),
++    ]
+diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
+new file mode 100644
+index 0000000..61a2604
+--- /dev/null
++++ b/classes/migrations/0001_initial.py
+@@ -0,0 +1,45 @@
++# Generated by Django 4.1.3 on 2022-11-11 02:37
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = [
++        ("studios", "0001_initial"),
++    ]
++
++    operations = [
++        migrations.CreateModel(
++            name="Class",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("name", models.CharField(max_length=250)),
++                ("description", models.TextField()),
++                ("coach", models.CharField(max_length=250)),
++                ("keywords", models.TextField()),
++                ("capacity", models.IntegerField()),
++                ("start_time", models.DateTimeField()),
++                ("duration", models.DurationField()),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="tfc_class",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++        ),
++    ]
+diff --git a/payments/__init__.py b/payments/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/payments/admin.py b/payments/admin.py
+new file mode 100644
+index 0000000..8c38f3f
+--- /dev/null
++++ b/payments/admin.py
+@@ -0,0 +1,3 @@
++from django.contrib import admin
++
++# Register your models here.
+diff --git a/payments/apps.py b/payments/apps.py
+new file mode 100644
+index 0000000..61898af
+--- /dev/null
++++ b/payments/apps.py
+@@ -0,0 +1,6 @@
++from django.apps import AppConfig
++
++
++class PaymentsConfig(AppConfig):
++    default_auto_field = "django.db.models.BigAutoField"
++    name = "payments"
+diff --git a/payments/models.py b/payments/models.py
+new file mode 100644
+index 0000000..90f53fe
+--- /dev/null
++++ b/payments/models.py
+@@ -0,0 +1,15 @@
++from django.db import models as m
++
++class Payment(m.Model):
++    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='user_payment')
++    card_number = m.IntegerField()
++    card_expiry = m.IntegerField()
++    card_security = m.IntegerField()
++    current_subscription = m.ForeignKey('subscriptions.Subscription', null=True, on_delete=m.SET_NULL, related_name='current_subscription_payment')
++
++
++class PaymentHistory(m.Model):
++    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='payment_history')
++    timestamp = m.DateTimeField()
++    amount = m.DecimalField(decimal_places=2, max_digits=12)
++
+diff --git a/payments/tests.py b/payments/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/payments/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/payments/views.py b/payments/views.py
+new file mode 100644
+index 0000000..91ea44a
+--- /dev/null
++++ b/payments/views.py
+@@ -0,0 +1,3 @@
++from django.shortcuts import render
++
++# Create your views here.
+diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
+new file mode 100644
+index 0000000..853bc9b
+--- /dev/null
++++ b/studios/migrations/0001_initial.py
+@@ -0,0 +1,57 @@
++# Generated by Django 4.1.3 on 2022-11-11 02:37
++
++from django.db import migrations, models
++import django.db.models.deletion
++
++
++class Migration(migrations.Migration):
++
++    initial = True
++
++    dependencies = []
++
++    operations = [
++        migrations.CreateModel(
++            name="Studio",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("name", models.CharField(max_length=250)),
++                ("address", models.CharField(max_length=250)),
++                ("latitude", models.FloatField()),
++                ("longitude", models.FloatField()),
++                ("postal_code", models.CharField(max_length=250)),
++                ("phone_number", models.IntegerField()),
++            ],
++        ),
++        migrations.CreateModel(
++            name="StudioImage",
++            fields=[
++                (
++                    "id",
++                    models.BigAutoField(
++                        auto_created=True,
++                        primary_key=True,
++                        serialize=False,
++                        verbose_name="ID",
++                    ),
++                ),
++                ("image", models.ImageField(upload_to="")),
++                (
++                    "studio",
++                    models.ForeignKey(
++                        on_delete=django.db.models.deletion.CASCADE,
++                        related_name="image",
++                        to="studios.studio",
++                    ),
++                ),
++            ],
++        ),
++    ]
+diff --git a/studios/models.py b/studios/models.py
+index e653092..de9629e 100644
+--- a/studios/models.py
++++ b/studios/models.py
+@@ -1,10 +1,10 @@
+ from django.db import models as m
+-from django.contrib.gis.db import models as gm
+ 
+ class Studio(m.Model):
+     name = m.CharField(max_length=250)
+     address = m.CharField(max_length=250)
+-    location = gm.PointField()
++    latitude = m.FloatField()
++    longitude = m.FloatField()
+     postal_code = m.CharField(max_length=250)
+     phone_number = m.IntegerField()
+ 
+diff --git a/subscriptions/__init__.py b/subscriptions/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/subscriptions/admin.py b/subscriptions/admin.py
+new file mode 100644
+index 0000000..8c38f3f
+--- /dev/null
++++ b/subscriptions/admin.py
+@@ -0,0 +1,3 @@
++from django.contrib import admin
++
++# Register your models here.
+diff --git a/subscriptions/apps.py b/subscriptions/apps.py
+new file mode 100644
+index 0000000..040deb2
+--- /dev/null
++++ b/subscriptions/apps.py
+@@ -0,0 +1,6 @@
++from django.apps import AppConfig
++
++
++class SubscriptionsConfig(AppConfig):
++    default_auto_field = "django.db.models.BigAutoField"
++    name = "subscriptions"
+diff --git a/subscriptions/models.py b/subscriptions/models.py
+new file mode 100644
+index 0000000..c8b2249
+--- /dev/null
++++ b/subscriptions/models.py
+@@ -0,0 +1,6 @@
++from django.db import models as m
++
++class Subscription(m.Model):
++    payment = m.DecimalField(decimal_places=2, max_digits=12)
++    # TODO: interval should be one of 'weekly', 'yearly', 'daily', etc
++    interval = m.CharField(max_length=16)
+diff --git a/subscriptions/tests.py b/subscriptions/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/subscriptions/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/subscriptions/views.py b/subscriptions/views.py
+new file mode 100644
+index 0000000..91ea44a
+--- /dev/null
++++ b/subscriptions/views.py
+@@ -0,0 +1,3 @@
++from django.shortcuts import render
++
++# Create your views here.
+
+commit e83bdfcc21927ac6b31a317aa245f7d6952e8025
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Thu Nov 10 16:52:37 2022 -0500
+
+    resolved initial model errors
+
+diff --git a/classes/models.py b/classes/models.py
+index 4e55811..7d384d5 100644
+--- a/classes/models.py
++++ b/classes/models.py
+@@ -1,10 +1,10 @@
+ from django.db import models as m
+ 
+ class Class(m.Model):
+-    studio = m.ForeignKey('Studio', on_delete=m.SET_NULL, related_name='studio')
+-    name = m.CharField()
++    studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='tfc_class')
++    name = m.CharField(max_length=250)
+     description = m.TextField()
+-    coach = m.CharField()
++    coach = m.CharField(max_length=250)
+     keywords = m.TextField()
+     capacity = m.IntegerField()
+     start_time = m.DateTimeField()
+diff --git a/studios/models.py b/studios/models.py
+index a53c034..e653092 100644
+--- a/studios/models.py
++++ b/studios/models.py
+@@ -2,13 +2,13 @@ from django.db import models as m
+ from django.contrib.gis.db import models as gm
+ 
+ class Studio(m.Model):
+-    name = m.CharField()
+-    address = m.CharField()
++    name = m.CharField(max_length=250)
++    address = m.CharField(max_length=250)
+     location = gm.PointField()
+-    postal_code = m.CharField()
++    postal_code = m.CharField(max_length=250)
+     phone_number = m.IntegerField()
+ 
+ 
+ class StudioImage(m.Model):
+-    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
++    studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
+     image = m.ImageField()
+
+commit a743d41f16341d60d3a5b5e9f94152ead20c01c5
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Thu Nov 10 16:39:50 2022 -0500
+
+    removed redundant folder
+
+diff --git a/.gitignore b/.gitignore
+new file mode 100644
+index 0000000..4ad4e6a
+--- /dev/null
++++ b/.gitignore
+@@ -0,0 +1,3 @@
++__pycache__/
++db.sqlite3
++env/
+diff --git a/TFC/TFC/__init__.py b/TFC/__init__.py
+similarity index 100%
+rename from TFC/TFC/__init__.py
+rename to TFC/__init__.py
+diff --git a/TFC/TFC/asgi.py b/TFC/asgi.py
+similarity index 100%
+rename from TFC/TFC/asgi.py
+rename to TFC/asgi.py
+diff --git a/TFC/TFC/settings.py b/TFC/settings.py
+similarity index 100%
+rename from TFC/TFC/settings.py
+rename to TFC/settings.py
+diff --git a/TFC/TFC/urls.py b/TFC/urls.py
+similarity index 100%
+rename from TFC/TFC/urls.py
+rename to TFC/urls.py
+diff --git a/TFC/TFC/wsgi.py b/TFC/wsgi.py
+similarity index 100%
+rename from TFC/TFC/wsgi.py
+rename to TFC/wsgi.py
+diff --git a/TFC/accounts/__init__.py b/accounts/__init__.py
+similarity index 100%
+rename from TFC/accounts/__init__.py
+rename to accounts/__init__.py
+diff --git a/TFC/accounts/admin.py b/accounts/admin.py
+similarity index 100%
+rename from TFC/accounts/admin.py
+rename to accounts/admin.py
+diff --git a/TFC/accounts/apps.py b/accounts/apps.py
+similarity index 100%
+rename from TFC/accounts/apps.py
+rename to accounts/apps.py
+diff --git a/TFC/accounts/migrations/__init__.py b/accounts/migrations/__init__.py
+similarity index 100%
+rename from TFC/accounts/migrations/__init__.py
+rename to accounts/migrations/__init__.py
+diff --git a/TFC/accounts/models.py b/accounts/models.py
+similarity index 60%
+rename from TFC/accounts/models.py
+rename to accounts/models.py
+index fb14e7f..99e3872 100644
+--- a/TFC/accounts/models.py
++++ b/accounts/models.py
+@@ -2,5 +2,5 @@ from django.db import models as m
+ from django.contrib.auth.models import User
+ 
+ class User(User):
+-    avatar = ImageField()
+-    phone_number = IntegerField()
++    avatar = m.ImageField()
++    phone_number = m.IntegerField()
+diff --git a/TFC/accounts/tests.py b/accounts/tests.py
+similarity index 100%
+rename from TFC/accounts/tests.py
+rename to accounts/tests.py
+diff --git a/TFC/accounts/views.py b/accounts/views.py
+similarity index 100%
+rename from TFC/accounts/views.py
+rename to accounts/views.py
+diff --git a/TFC/classes/__init__.py b/classes/__init__.py
+similarity index 100%
+rename from TFC/classes/__init__.py
+rename to classes/__init__.py
+diff --git a/TFC/classes/admin.py b/classes/admin.py
+similarity index 100%
+rename from TFC/classes/admin.py
+rename to classes/admin.py
+diff --git a/TFC/classes/apps.py b/classes/apps.py
+similarity index 100%
+rename from TFC/classes/apps.py
+rename to classes/apps.py
+diff --git a/TFC/classes/migrations/__init__.py b/classes/migrations/__init__.py
+similarity index 100%
+rename from TFC/classes/migrations/__init__.py
+rename to classes/migrations/__init__.py
+diff --git a/TFC/classes/models.py b/classes/models.py
+similarity index 76%
+rename from TFC/classes/models.py
+rename to classes/models.py
+index 23df279..4e55811 100644
+--- a/TFC/classes/models.py
++++ b/classes/models.py
+@@ -1,7 +1,7 @@
+ from django.db import models as m
+ 
+ class Class(m.Model):
+-    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
++    studio = m.ForeignKey('Studio', on_delete=m.SET_NULL, related_name='studio')
+     name = m.CharField()
+     description = m.TextField()
+     coach = m.CharField()
+diff --git a/TFC/classes/tests.py b/classes/tests.py
+similarity index 100%
+rename from TFC/classes/tests.py
+rename to classes/tests.py
+diff --git a/TFC/classes/views.py b/classes/views.py
+similarity index 100%
+rename from TFC/classes/views.py
+rename to classes/views.py
+diff --git a/TFC/manage.py b/manage.py
+similarity index 100%
+rename from TFC/manage.py
+rename to manage.py
+diff --git a/TFC/requirements.txt b/requirements.txt
+similarity index 100%
+rename from TFC/requirements.txt
+rename to requirements.txt
+diff --git a/TFC/studios/__init__.py b/studios/__init__.py
+similarity index 100%
+rename from TFC/studios/__init__.py
+rename to studios/__init__.py
+diff --git a/TFC/studios/admin.py b/studios/admin.py
+similarity index 100%
+rename from TFC/studios/admin.py
+rename to studios/admin.py
+diff --git a/TFC/studios/apps.py b/studios/apps.py
+similarity index 100%
+rename from TFC/studios/apps.py
+rename to studios/apps.py
+diff --git a/TFC/studios/migrations/__init__.py b/studios/migrations/__init__.py
+similarity index 100%
+rename from TFC/studios/migrations/__init__.py
+rename to studios/migrations/__init__.py
+diff --git a/TFC/studios/models.py b/studios/models.py
+similarity index 73%
+rename from TFC/studios/models.py
+rename to studios/models.py
+index db00947..a53c034 100644
+--- a/TFC/studios/models.py
++++ b/studios/models.py
+@@ -1,13 +1,14 @@
+ from django.db import models as m
++from django.contrib.gis.db import models as gm
+ 
+ class Studio(m.Model):
+     name = m.CharField()
+     address = m.CharField()
+-    location = m.PointField()
++    location = gm.PointField()
+     postal_code = m.CharField()
+     phone_number = m.IntegerField()
+ 
+ 
+ class StudioImage(m.Model):
+     studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
+-    image = ImageField()
++    image = m.ImageField()
+diff --git a/TFC/studios/tests.py b/studios/tests.py
+similarity index 100%
+rename from TFC/studios/tests.py
+rename to studios/tests.py
+diff --git a/TFC/studios/views.py b/studios/views.py
+similarity index 100%
+rename from TFC/studios/views.py
+rename to studios/views.py
+
+commit 821b90e75be808400c01ddd262ac2efaac926dec
+Author: Nathan Hansen <nathanajhansen@gmail.com>
+Date:   Thu Nov 10 16:19:44 2022 -0500
+
+    initial commit
+
+diff --git a/TFC/.gitignore b/TFC/.gitignore
+new file mode 100644
+index 0000000..853e982
+--- /dev/null
++++ b/TFC/.gitignore
+@@ -0,0 +1,4 @@
++# ignore these files
++__pycache__/
++db.sqlite3
++env/
+diff --git a/TFC/TFC/__init__.py b/TFC/TFC/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/TFC/asgi.py b/TFC/TFC/asgi.py
+new file mode 100644
+index 0000000..07b518d
+--- /dev/null
++++ b/TFC/TFC/asgi.py
+@@ -0,0 +1,16 @@
++"""
++ASGI config for TFC project.
++
++It exposes the ASGI callable as a module-level variable named ``application``.
++
++For more information on this file, see
++https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
++"""
++
++import os
++
++from django.core.asgi import get_asgi_application
++
++os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
++
++application = get_asgi_application()
+diff --git a/TFC/TFC/settings.py b/TFC/TFC/settings.py
+new file mode 100644
+index 0000000..5f7ca4f
+--- /dev/null
++++ b/TFC/TFC/settings.py
+@@ -0,0 +1,126 @@
++"""
++Django settings for TFC project.
++
++Generated by 'django-admin startproject' using Django 4.1.2.
++
++For more information on this file, see
++https://docs.djangoproject.com/en/4.1/topics/settings/
++
++For the full list of settings and their values, see
++https://docs.djangoproject.com/en/4.1/ref/settings/
++"""
++
++from pathlib import Path
++
++# Build paths inside the project like this: BASE_DIR / 'subdir'.
++BASE_DIR = Path(__file__).resolve().parent.parent
++
++
++# Quick-start development settings - unsuitable for production
++# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
++
++# SECURITY WARNING: keep the secret key used in production secret!
++SECRET_KEY = "django-insecure-d$*)b428p&##d4!mjl(zs!k@09c3y2ka00#!a9q=rkgf20rpoq"
++
++# SECURITY WARNING: don't run with debug turned on in production!
++DEBUG = True
++
++ALLOWED_HOSTS = []
++
++
++# Application definition
++
++INSTALLED_APPS = [
++    "django.contrib.admin",
++    "django.contrib.auth",
++    "django.contrib.contenttypes",
++    "django.contrib.sessions",
++    "django.contrib.messages",
++    "django.contrib.staticfiles",
++    "accounts",
++    "classes",
++    "studios",
++]
++
++MIDDLEWARE = [
++    "django.middleware.security.SecurityMiddleware",
++    "django.contrib.sessions.middleware.SessionMiddleware",
++    "django.middleware.common.CommonMiddleware",
++    "django.middleware.csrf.CsrfViewMiddleware",
++    "django.contrib.auth.middleware.AuthenticationMiddleware",
++    "django.contrib.messages.middleware.MessageMiddleware",
++    "django.middleware.clickjacking.XFrameOptionsMiddleware",
++]
++
++ROOT_URLCONF = "TFC.urls"
++
++TEMPLATES = [
++    {
++        "BACKEND": "django.template.backends.django.DjangoTemplates",
++        "DIRS": [],
++        "APP_DIRS": True,
++        "OPTIONS": {
++            "context_processors": [
++                "django.template.context_processors.debug",
++                "django.template.context_processors.request",
++                "django.contrib.auth.context_processors.auth",
++                "django.contrib.messages.context_processors.messages",
++            ],
++        },
++    },
++]
++
++WSGI_APPLICATION = "TFC.wsgi.application"
++
++
++# Database
++# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
++
++DATABASES = {
++    "default": {
++        "ENGINE": "django.db.backends.sqlite3",
++        "NAME": BASE_DIR / "db.sqlite3",
++    }
++}
++
++
++# Password validation
++# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
++
++AUTH_PASSWORD_VALIDATORS = [
++    {
++        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
++    },
++    {
++        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
++    },
++    {
++        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
++    },
++    {
++        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
++    },
++]
++
++
++# Internationalization
++# https://docs.djangoproject.com/en/4.1/topics/i18n/
++
++LANGUAGE_CODE = "en-us"
++
++TIME_ZONE = "UTC"
++
++USE_I18N = True
++
++USE_TZ = True
++
++
++# Static files (CSS, JavaScript, Images)
++# https://docs.djangoproject.com/en/4.1/howto/static-files/
++
++STATIC_URL = "static/"
++
++# Default primary key field type
++# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
++
++DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
+diff --git a/TFC/TFC/urls.py b/TFC/TFC/urls.py
+new file mode 100644
+index 0000000..b705392
+--- /dev/null
++++ b/TFC/TFC/urls.py
+@@ -0,0 +1,21 @@
++"""TFC URL Configuration
++
++The `urlpatterns` list routes URLs to views. For more information please see:
++    https://docs.djangoproject.com/en/4.1/topics/http/urls/
++Examples:
++Function views
++    1. Add an import:  from my_app import views
++    2. Add a URL to urlpatterns:  path('', views.home, name='home')
++Class-based views
++    1. Add an import:  from other_app.views import Home
++    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
++Including another URLconf
++    1. Import the include() function: from django.urls import include, path
++    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
++"""
++from django.contrib import admin
++from django.urls import path
++
++urlpatterns = [
++    path("admin/", admin.site.urls),
++]
+diff --git a/TFC/TFC/wsgi.py b/TFC/TFC/wsgi.py
+new file mode 100644
+index 0000000..7030d44
+--- /dev/null
++++ b/TFC/TFC/wsgi.py
+@@ -0,0 +1,16 @@
++"""
++WSGI config for TFC project.
++
++It exposes the WSGI callable as a module-level variable named ``application``.
++
++For more information on this file, see
++https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
++"""
++
++import os
++
++from django.core.wsgi import get_wsgi_application
++
++os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
++
++application = get_wsgi_application()
+diff --git a/TFC/accounts/__init__.py b/TFC/accounts/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/accounts/admin.py b/TFC/accounts/admin.py
+new file mode 100644
+index 0000000..8c38f3f
+--- /dev/null
++++ b/TFC/accounts/admin.py
+@@ -0,0 +1,3 @@
++from django.contrib import admin
++
++# Register your models here.
+diff --git a/TFC/accounts/apps.py b/TFC/accounts/apps.py
+new file mode 100644
+index 0000000..0cb51e6
+--- /dev/null
++++ b/TFC/accounts/apps.py
+@@ -0,0 +1,6 @@
++from django.apps import AppConfig
++
++
++class AccountsConfig(AppConfig):
++    default_auto_field = "django.db.models.BigAutoField"
++    name = "accounts"
+diff --git a/TFC/accounts/migrations/__init__.py b/TFC/accounts/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/accounts/models.py b/TFC/accounts/models.py
+new file mode 100644
+index 0000000..fb14e7f
+--- /dev/null
++++ b/TFC/accounts/models.py
+@@ -0,0 +1,6 @@
++from django.db import models as m
++from django.contrib.auth.models import User
++
++class User(User):
++    avatar = ImageField()
++    phone_number = IntegerField()
+diff --git a/TFC/accounts/tests.py b/TFC/accounts/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/TFC/accounts/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/TFC/accounts/views.py b/TFC/accounts/views.py
+new file mode 100644
+index 0000000..91ea44a
+--- /dev/null
++++ b/TFC/accounts/views.py
+@@ -0,0 +1,3 @@
++from django.shortcuts import render
++
++# Create your views here.
+diff --git a/TFC/classes/__init__.py b/TFC/classes/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/classes/admin.py b/TFC/classes/admin.py
+new file mode 100644
+index 0000000..8c38f3f
+--- /dev/null
++++ b/TFC/classes/admin.py
+@@ -0,0 +1,3 @@
++from django.contrib import admin
++
++# Register your models here.
+diff --git a/TFC/classes/apps.py b/TFC/classes/apps.py
+new file mode 100644
+index 0000000..627ea4c
+--- /dev/null
++++ b/TFC/classes/apps.py
+@@ -0,0 +1,6 @@
++from django.apps import AppConfig
++
++
++class ClassesConfig(AppConfig):
++    default_auto_field = "django.db.models.BigAutoField"
++    name = "classes"
+diff --git a/TFC/classes/migrations/__init__.py b/TFC/classes/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/classes/models.py b/TFC/classes/models.py
+new file mode 100644
+index 0000000..23df279
+--- /dev/null
++++ b/TFC/classes/models.py
+@@ -0,0 +1,11 @@
++from django.db import models as m
++
++class Class(m.Model):
++    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
++    name = m.CharField()
++    description = m.TextField()
++    coach = m.CharField()
++    keywords = m.TextField()
++    capacity = m.IntegerField()
++    start_time = m.DateTimeField()
++    duration = m.DurationField()
+diff --git a/TFC/classes/tests.py b/TFC/classes/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/TFC/classes/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/TFC/classes/views.py b/TFC/classes/views.py
+new file mode 100644
+index 0000000..91ea44a
+--- /dev/null
++++ b/TFC/classes/views.py
+@@ -0,0 +1,3 @@
++from django.shortcuts import render
++
++# Create your views here.
+diff --git a/TFC/manage.py b/TFC/manage.py
+new file mode 100755
+index 0000000..45e4ff2
+--- /dev/null
++++ b/TFC/manage.py
+@@ -0,0 +1,22 @@
++#!/usr/bin/env python
++"""Django's command-line utility for administrative tasks."""
++import os
++import sys
++
++
++def main():
++    """Run administrative tasks."""
++    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
++    try:
++        from django.core.management import execute_from_command_line
++    except ImportError as exc:
++        raise ImportError(
++            "Couldn't import Django. Are you sure it's installed and "
++            "available on your PYTHONPATH environment variable? Did you "
++            "forget to activate a virtual environment?"
++        ) from exc
++    execute_from_command_line(sys.argv)
++
++
++if __name__ == "__main__":
++    main()
+diff --git a/TFC/requirements.txt b/TFC/requirements.txt
+new file mode 100644
+index 0000000..19781b7
+--- /dev/null
++++ b/TFC/requirements.txt
+@@ -0,0 +1,2 @@
++Django
++Pillow
+diff --git a/TFC/studios/__init__.py b/TFC/studios/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/studios/admin.py b/TFC/studios/admin.py
+new file mode 100644
+index 0000000..8c38f3f
+--- /dev/null
++++ b/TFC/studios/admin.py
+@@ -0,0 +1,3 @@
++from django.contrib import admin
++
++# Register your models here.
+diff --git a/TFC/studios/apps.py b/TFC/studios/apps.py
+new file mode 100644
+index 0000000..43f35b4
+--- /dev/null
++++ b/TFC/studios/apps.py
+@@ -0,0 +1,6 @@
++from django.apps import AppConfig
++
++
++class StudiosConfig(AppConfig):
++    default_auto_field = "django.db.models.BigAutoField"
++    name = "studios"
+diff --git a/TFC/studios/migrations/__init__.py b/TFC/studios/migrations/__init__.py
+new file mode 100644
+index 0000000..e69de29
+diff --git a/TFC/studios/models.py b/TFC/studios/models.py
+new file mode 100644
+index 0000000..db00947
+--- /dev/null
++++ b/TFC/studios/models.py
+@@ -0,0 +1,13 @@
++from django.db import models as m
++
++class Studio(m.Model):
++    name = m.CharField()
++    address = m.CharField()
++    location = m.PointField()
++    postal_code = m.CharField()
++    phone_number = m.IntegerField()
++
++
++class StudioImage(m.Model):
++    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
++    image = ImageField()
+diff --git a/TFC/studios/tests.py b/TFC/studios/tests.py
+new file mode 100644
+index 0000000..7ce503c
+--- /dev/null
++++ b/TFC/studios/tests.py
+@@ -0,0 +1,3 @@
++from django.test import TestCase
++
++# Create your tests here.
+diff --git a/TFC/studios/views.py b/TFC/studios/views.py
+new file mode 100644
+index 0000000..91ea44a
+--- /dev/null
++++ b/TFC/studios/views.py
+@@ -0,0 +1,3 @@
++from django.shortcuts import render
++
++# Create your views here.

commit d35b04f3210ce7654d91e369c5891ee81f13c755
Merge: c02c67c 312af27
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 19:33:10 2022 -0500

    Merge remote-tracking branch 'origin/master'

commit c02c67c21e1dcac9377c1421c121b49ff8c72286
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 19:32:56 2022 -0500

    updated postman collection token

diff --git a/postman.json b/postman.json
index ac233fa..8a89555 100644
--- a/postman.json
+++ b/postman.json
@@ -1,6 +1,6 @@
 {
 	"info": {
-		"_postman_id": "3f010057-dc49-4124-9e98-07181300afb8",
+		"_postman_id": "8de17d76-54ff-40fa-9d0d-af82041fff8c",
 		"name": "CSC309 TFC Project Backend",
 		"description": "Built by Letian Cheng, Nathan Hansen, Edward Leung",
 		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
@@ -1733,7 +1733,14 @@
 		}
 	],
 	"auth": {
-		"type": "bearer"
+		"type": "bearer",
+		"bearer": [
+			{
+				"key": "token",
+				"value": "{{token}}",
+				"type": "string"
+			}
+		]
 	},
 	"event": [
 		{
@@ -1763,12 +1770,12 @@
 		},
 		{
 			"key": "latitude",
-			"value": "eiusmod veniam ullamco",
+			"value": "50",
 			"type": "any"
 		},
 		{
 			"key": "longitude",
-			"value": "eiusmod veniam ullamco",
+			"value": "50",
 			"type": "any"
 		},
 		{

commit 312af270edb6b42e4cafac53b57059b5f4006b1f
Merge: 7aed007 2605993
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 19:32:04 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 7aed00793bc622b65c4b2f18c1bb8cc7501248ab
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 19:31:53 2022 -0500

    handle undefined lat lon values

diff --git a/studios/views.py b/studios/views.py
index b30aaaa..bc1a9f5 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -1,6 +1,7 @@
 from django.shortcuts import get_object_or_404
 from rest_framework import generics
 from rest_framework import filters
+from rest_framework.response import Response
 from django_filters.rest_framework import DjangoFilterBackend
 from studios.serializers import (
         StudioSerializer, 
@@ -20,8 +21,13 @@ class ListStudioByProximityView(generics.ListAPIView):
     filterset_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
     search_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
     def get_queryset(self):
-        lat = float(self.kwargs['latitude'])
-        lon = float(self.kwargs['longitude'])
+        try:
+            lat = float(self.kwargs['latitude'])
+            lon = float(self.kwargs['longitude'])
+        except:
+            lat = 0
+            lon = 0
+
 
         queryset = Studio.get_locations_nearby_coords(lat, lon)
 

commit 26059937f9ec97afb4fb0ca2b77eda854076d73d
Merge: c06fa54 9b31175
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 19:12:35 2022 -0500

    Merge remote-tracking branch 'origin/master'

commit c06fa54c982d30776b1ff508ef66485c5348f6c6
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 19:12:19 2022 -0500

    changed shell script to usr

diff --git a/generate_payments.sh b/generate_payments.sh
index 7182764..aca328b 100644
--- a/generate_payments.sh
+++ b/generate_payments.sh
@@ -1,4 +1,4 @@
-#! /bin/bash
+#!/usr/bin/bash
 if [ $# -ne 0 ]
 then
     echo "Usage: ./generate_payments.sh no arguments"

commit 9b311756d61e5ab1a5a2187815af8153703a2d25
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 19:12:00 2022 -0500

    /usr/bin/bash

diff --git a/startup.sh b/startup.sh
index b0241b0..15d926f 100755
--- a/startup.sh
+++ b/startup.sh
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/usr/bin/bash
 
 python3.10 -m venv env
 source env/bin/activate

commit bb44e97f80e72d7cfff66fef6ce7a5e2d7acc026
Merge: 6904db9 887deba
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 18:59:58 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 6904db9ae3c6151d289aace87a9383ebec15c6cb
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 18:59:20 2022 -0500

    sh to bash

diff --git a/startup.sh b/startup.sh
index 1cd986c..b0241b0 100755
--- a/startup.sh
+++ b/startup.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 python3.10 -m venv env
 source env/bin/activate

commit 887deba1a4632b9fd497384823aed84a94f2bcdb
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 18:51:54 2022 -0500

    add one more req

diff --git a/requirements.txt b/requirements.txt
index 94b6d06..b59f64c 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -5,3 +5,4 @@ django-filter
 drf-yasg
 geopy
 Pillow
+tzdata
\ No newline at end of file

commit 67ae2c76730baf598d2c3a9ff686ad31a2fb1999
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 18:46:01 2022 -0500

    delete migration

diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
deleted file mode 100644
index 1b8d389..0000000
--- a/accounts/migrations/0001_initial.py
+++ /dev/null
@@ -1,59 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-16 19:48
-
-from django.conf import settings
-import django.contrib.auth.models
-import django.core.validators
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ("auth", "0012_alter_user_first_name_max_length"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="Account",
-            fields=[
-                (
-                    "user_ptr",
-                    models.OneToOneField(
-                        auto_created=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        parent_link=True,
-                        primary_key=True,
-                        serialize=False,
-                        to=settings.AUTH_USER_MODEL,
-                    ),
-                ),
-                ("avatar", models.ImageField(upload_to="account_avatars/")),
-                (
-                    "phone_number",
-                    models.CharField(
-                        blank=True,
-                        max_length=250,
-                        null=True,
-                        validators=[
-                            django.core.validators.RegexValidator(
-                                message="Phone number must be in the format: '+999999999', with a maximum of 15 digits",
-                                regex="^\\+?1?\\d{9,15}$",
-                            )
-                        ],
-                    ),
-                ),
-            ],
-            options={
-                "verbose_name": "user",
-                "verbose_name_plural": "users",
-                "abstract": False,
-            },
-            bases=("auth.user",),
-            managers=[
-                ("objects", django.contrib.auth.models.UserManager()),
-            ],
-        ),
-    ]
diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
deleted file mode 100644
index c623526..0000000
--- a/classes/migrations/0001_initial.py
+++ /dev/null
@@ -1,120 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-16 19:48
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ("studios", "0001_initial"),
-        ("accounts", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="Class",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("name", models.CharField(max_length=250)),
-                ("description", models.TextField()),
-                ("coach", models.CharField(max_length=250)),
-                ("duration", models.DurationField()),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="tfc_class",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="ClassTimeTable",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("time", models.DateTimeField()),
-                ("spotleft", models.IntegerField()),
-                (
-                    "classid",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="timetable",
-                        to="classes.class",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="Keywords",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("keyword", models.CharField(max_length=250)),
-                (
-                    "classid",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="keywords",
-                        to="classes.class",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="EnrollClass",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                (
-                    "account",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="enrollclass",
-                        to="accounts.account",
-                    ),
-                ),
-                (
-                    "classtime",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="enrollclass",
-                        to="classes.classtimetable",
-                    ),
-                ),
-            ],
-        ),
-    ]
diff --git a/payments/migrations/0001_initial.py b/payments/migrations/0001_initial.py
deleted file mode 100644
index dfbc5ea..0000000
--- a/payments/migrations/0001_initial.py
+++ /dev/null
@@ -1,68 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-16 21:56
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ("accounts", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="PaymentInfo",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("card_number", models.CharField(max_length=250)),
-                ("expiry_date", models.DateField()),
-                ("cvv", models.IntegerField()),
-                ("name_on_card", models.CharField(max_length=250)),
-                (
-                    "account",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="payment_info",
-                        to="accounts.account",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="PaymentHistory",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("timestamp", models.DateTimeField()),
-                ("amount", models.FloatField()),
-                ("card_number", models.CharField(max_length=250)),
-                ("card_expiry", models.DateField()),
-                (
-                    "account",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="payment_history",
-                        to="accounts.account",
-                    ),
-                ),
-            ],
-        ),
-    ]
diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
deleted file mode 100644
index f29133e..0000000
--- a/studios/migrations/0001_initial.py
+++ /dev/null
@@ -1,84 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-16 19:48
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = []
-
-    operations = [
-        migrations.CreateModel(
-            name="Studio",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("name", models.CharField(max_length=250)),
-                ("address", models.CharField(max_length=250)),
-                ("latitude", models.FloatField()),
-                ("longitude", models.FloatField()),
-                ("postal_code", models.CharField(max_length=250)),
-                ("phone_number", models.CharField(max_length=250)),
-            ],
-        ),
-        migrations.CreateModel(
-            name="StudioImage",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("image", models.ImageField(upload_to="studios/")),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="image",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="Amenities",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("amenity_type", models.CharField(max_length=250)),
-                ("quantity", models.IntegerField()),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="amenities",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-            options={
-                "verbose_name_plural": "Amenities",
-            },
-        ),
-    ]
diff --git a/subscriptions/migrations/0001_initial.py b/subscriptions/migrations/0001_initial.py
deleted file mode 100644
index 16d2ac5..0000000
--- a/subscriptions/migrations/0001_initial.py
+++ /dev/null
@@ -1,74 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-16 22:14
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ("studios", "0001_initial"),
-        ("accounts", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="SubscriptionPlan",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("payment", models.DecimalField(decimal_places=2, max_digits=12)),
-                ("interval", models.DurationField()),
-            ],
-        ),
-        migrations.CreateModel(
-            name="CurrentSubscription",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("expiration", models.DateTimeField(blank=True, null=True)),
-                (
-                    "account",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="account_subscription",
-                        to="accounts.account",
-                    ),
-                ),
-                (
-                    "plan",
-                    models.ForeignKey(
-                        blank=True,
-                        null=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="current_plan",
-                        to="subscriptions.subscriptionplan",
-                    ),
-                ),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="studio_subscription",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-        ),
-    ]

commit c6df4260df4135bdee3ce537b7a63e874bf6f760
Merge: 2041306 f5293f2
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 18:21:45 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 204130632da947916909bc71b0aef2989fce83fb
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 18:20:50 2022 -0500

    minor change to class test

diff --git a/classes/tests.py b/classes/tests.py
index 70ef6fe..a37960c 100644
--- a/classes/tests.py
+++ b/classes/tests.py
@@ -243,4 +243,4 @@ class TestClasses(TestCase):
         self.assertEqual(response.status_code, 200)
         response = json.loads(response.content.decode('utf-8'))
         
-        self.assertEqual(len(response), len(total_list))
\ No newline at end of file
+        self.assertEqual(len(response["results"]), len(total_list))

commit f5293f2eee2cea7007d15795e5a0d3b9910b6c56
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 18:13:29 2022 -0500

    Updated postman.json postman collection class modify thing.

diff --git a/postman.json b/postman.json
index 05851da..ac233fa 100644
--- a/postman.json
+++ b/postman.json
@@ -691,8 +691,12 @@
 					"request": {
 						"method": "POST",
 						"header": [],
+						"body": {
+							"mode": "raw",
+							"raw": "{\r\n    \"classtime\": \"14:00:00\", \r\n    \"op\": \"eiusmod veniam ullamco\"\r\n}"
+						},
 						"url": {
-							"raw": "{{baseUrl}}/classes/modify/?classtime id=eiusmod veniam ullamco&account id=-69603318&op=eiusmod veniam ullamco",
+							"raw": "{{baseUrl}}/classes/modify/",
 							"host": [
 								"{{baseUrl}}"
 							],
@@ -700,23 +704,6 @@
 								"classes",
 								"modify",
 								""
-							],
-							"query": [
-								{
-									"key": "classtime id",
-									"value": "eiusmod veniam ullamco",
-									"description": "Class time"
-								},
-								{
-									"key": "account id",
-									"value": "-69603318",
-									"description": "User ID"
-								},
-								{
-									"key": "op",
-									"value": "eiusmod veniam ullamco",
-									"description": "Operation: either enroll or drop"
-								}
 							]
 						},
 						"description": "Enroll or drop a class"

commit 7900a9ab42e13fb98122c5199e7828558dc721bd
Merge: ce8a4a8 56c2287
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 18:02:08 2022 -0500

    Merge remote-tracking branch 'origin/master'

commit ce8a4a8faf04373746e767453e1642afc8125caf
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 17:50:28 2022 -0500

    Updated docs.pdf for subscription commit and added postman.json postman collection with variables.

diff --git a/docs.pdf b/docs.pdf
index 162cf27..ddcee4d 100644
Binary files a/docs.pdf and b/docs.pdf differ
diff --git a/postman.json b/postman.json
new file mode 100644
index 0000000..05851da
--- /dev/null
+++ b/postman.json
@@ -0,0 +1,1808 @@
+{
+	"info": {
+		"_postman_id": "3f010057-dc49-4124-9e98-07181300afb8",
+		"name": "CSC309 TFC Project Backend",
+		"description": "Built by Letian Cheng, Nathan Hansen, Edward Leung",
+		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
+	},
+	"item": [
+		{
+			"name": "accounts",
+			"item": [
+				{
+					"name": "update",
+					"item": [
+						{
+							"name": "accounts update update",
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Content-Type",
+										"value": "application/json"
+									},
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"username\": \"cKy2Eid\",\n  \"first_name\": \"incididunt\",\n  \"last_name\": \"consec\",\n  \"email\": \"UtKElrPc@ZHlgiiXGMskzPXkOKGrsLohwhrFr.pyvg\",\n  \"phone_number\": \"+134671078958\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/accounts/update/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"accounts",
+										"update",
+										""
+									]
+								},
+								"description": "Allows a user to update their account details."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "PUT",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/accounts/update/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"accounts",
+												"update",
+												""
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"username\": \"m\",\n  \"first_name\": \"culpa exercitation\",\n  \"last_name\": \"laboris incididunt\",\n  \"email\": \"JnfNm@uuwxBMJKAyTkeYXMxWgYe.purc\",\n  \"avatar\": \"http://bZaprN.rxxka8bV0f,lYI+\",\n  \"phone_number\": \"8346953504\"\n}"
+								}
+							]
+						},
+						{
+							"name": "accounts update partial update",
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Content-Type",
+										"value": "application/json"
+									},
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"username\": \"cKy2Eid\",\n  \"first_name\": \"incididunt\",\n  \"last_name\": \"consec\",\n  \"email\": \"UtKElrPc@ZHlgiiXGMskzPXkOKGrsLohwhrFr.pyvg\",\n  \"phone_number\": \"+134671078958\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/accounts/update/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"accounts",
+										"update",
+										""
+									]
+								},
+								"description": "Allows a user to update their account details."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "PATCH",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/accounts/update/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"accounts",
+												"update",
+												""
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"username\": \"m\",\n  \"first_name\": \"culpa exercitation\",\n  \"last_name\": \"laboris incididunt\",\n  \"email\": \"JnfNm@uuwxBMJKAyTkeYXMxWgYe.purc\",\n  \"avatar\": \"http://bZaprN.rxxka8bV0f,lYI+\",\n  \"phone_number\": \"8346953504\"\n}"
+								}
+							]
+						}
+					]
+				},
+				{
+					"name": "accounts api token refresh create",
+					"request": {
+						"method": "POST",
+						"header": [
+							{
+								"key": "Content-Type",
+								"value": "application/json"
+							},
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"refresh\": \"aute\"\n}",
+							"options": {
+								"raw": {
+									"language": "json"
+								}
+							}
+						},
+						"url": {
+							"raw": "{{baseUrl}}/accounts/api/token/refresh/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"accounts",
+								"api",
+								"token",
+								"refresh",
+								""
+							]
+						},
+						"description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "POST",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"refresh\": \"aute\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/accounts/api/token/refresh/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"accounts",
+										"api",
+										"token",
+										"refresh",
+										""
+									]
+								}
+							},
+							"status": "Created",
+							"code": 201,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"refresh\": \"id\",\n  \"access\": \"nostrud commodo\"\n}"
+						}
+					]
+				},
+				{
+					"name": "accounts login create",
+					"request": {
+						"auth": {
+							"type": "noauth"
+						},
+						"method": "POST",
+						"header": [
+							{
+								"key": "Content-Type",
+								"value": "application/json"
+							},
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"username\": \"deserunt cillum\",\n  \"password\": \"eiusmod fugiat\"\n}",
+							"options": {
+								"raw": {
+									"language": "json"
+								}
+							}
+						},
+						"url": {
+							"raw": "{{baseUrl}}/accounts/login/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"accounts",
+								"login",
+								""
+							]
+						},
+						"description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "POST",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"username\": \"deserunt cillum\",\n  \"password\": \"eiusmod fugiat\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/accounts/login/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"accounts",
+										"login",
+										""
+									]
+								}
+							},
+							"status": "Created",
+							"code": 201,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"username\": \"deserunt cillum\",\n  \"password\": \"eiusmod fugiat\"\n}"
+						}
+					]
+				},
+				{
+					"name": "accounts signup create",
+					"request": {
+						"auth": {
+							"type": "noauth"
+						},
+						"method": "POST",
+						"header": [
+							{
+								"key": "Content-Type",
+								"value": "application/json"
+							},
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"username\": \"0tvR\",\n  \"password\": \"amet tempor ea eiusmod\",\n  \"password2\": \"cillum \",\n  \"first_name\": \"voluptate in\",\n  \"last_name\": \"voluptate labore adipisicing in\",\n  \"email\": \"tUCgSPoU83@TrLl.xbc\",\n  \"phone_number\": \"16224935678\"\n}",
+							"options": {
+								"raw": {
+									"language": "json"
+								}
+							}
+						},
+						"url": {
+							"raw": "{{baseUrl}}/accounts/signup/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"accounts",
+								"signup",
+								""
+							]
+						},
+						"description": "Allows a user to register on the website."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "POST",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"username\": \"0tvR\",\n  \"password\": \"amet tempor ea eiusmod\",\n  \"password2\": \"cillum \",\n  \"first_name\": \"voluptate in\",\n  \"last_name\": \"voluptate labore adipisicing in\",\n  \"email\": \"tUCgSPoU83@TrLl.xbc\",\n  \"phone_number\": \"16224935678\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/accounts/signup/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"accounts",
+										"signup",
+										""
+									]
+								}
+							},
+							"status": "Created",
+							"code": 201,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"username\": \"jzujxke\",\n  \"password\": \"do ad qui sint\",\n  \"password2\": \"ex ad\",\n  \"first_name\": \"consectetur\",\n  \"last_name\": \"fugiat reprehenderit\",\n  \"email\": \"DxiYBn3Um@NHoKjvBqncpQuGc.dlp\",\n  \"avatar\": \"https://uSTTPMDpOBxwEzU.dvRohlm9jUZZd5\",\n  \"phone_number\": \"56147476878277\"\n}"
+						}
+					]
+				},
+				{
+					"name": "accounts read",
+					"request": {
+						"auth": {
+							"type": "noauth"
+						},
+						"method": "GET",
+						"header": [
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"url": {
+							"raw": "{{baseUrl}}/accounts/{{account_id}}/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"accounts",
+								"{{account_id}}",
+								""
+							]
+						},
+						"description": "View a given account."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "GET",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/accounts/:account_id/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"accounts",
+										":account_id",
+										""
+									],
+									"variable": [
+										{
+											"key": "account_id",
+											"value": "eiusmod veniam ullamco",
+											"description": "(Required) "
+										}
+									]
+								}
+							},
+							"status": "OK",
+							"code": 200,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"username\": \"m\",\n  \"first_name\": \"culpa exercitation\",\n  \"last_name\": \"laboris incididunt\",\n  \"email\": \"JnfNm@uuwxBMJKAyTkeYXMxWgYe.purc\",\n  \"avatar\": \"http://bZaprN.rxxka8bV0f,lYI+\",\n  \"phone_number\": \"8346953504\"\n}"
+						}
+					]
+				}
+			]
+		},
+		{
+			"name": "classes",
+			"item": [
+				{
+					"name": "{studio id}",
+					"item": [
+						{
+							"name": "classes schedule list",
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/classes/{{studio_id}}/schedule/?limit=-69603318&offset=-69603318",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"classes",
+										"{{studio_id}}",
+										"schedule",
+										""
+									],
+									"query": [
+										{
+											"key": "limit",
+											"value": "-69603318",
+											"description": "Number of results to return per page."
+										},
+										{
+											"key": "offset",
+											"value": "-69603318",
+											"description": "The initial index from which to return the results."
+										}
+									]
+								},
+								"description": "Allows a user to view their upcoming enrolled classes in chronological order."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "GET",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/classes/:studio_id/schedule/?limit=-69603318&offset=-69603318",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"classes",
+												":studio_id",
+												"schedule",
+												""
+											],
+											"query": [
+												{
+													"key": "limit",
+													"value": "-69603318"
+												},
+												{
+													"key": "offset",
+													"value": "-69603318"
+												}
+											],
+											"variable": [
+												{
+													"key": "studio_id",
+													"value": "eiusmod veniam ullamco",
+													"description": "(Required) "
+												}
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"count\": 62317673,\n  \"results\": [\n    {\n      \"account\": {\n        \"username\": \"hLoaT\",\n        \"first_name\": \"elit ut consequat proident id\",\n        \"last_name\": \"adipisicing aliquip velit sed\",\n        \"email\": \"cemU@OJXsxDxnZE.ofis\",\n        \"avatar\": \"https://P.kvixl1Y8l20GzcFFTtk7NQ5WruXfTbI\",\n        \"phone_number\": \"+1972989609955\"\n      },\n      \"classtime\": {\n        \"time\": \"1946-08-01T20:53:04.888Z\",\n        \"spotleft\": -10243156,\n        \"id\": 40741668,\n        \"class_detail\": \"deserunt\"\n      },\n      \"class_detail\": \"qui incididunt commodo elit magna\"\n    },\n    {\n      \"account\": {\n        \"username\": \"POw\",\n        \"first_name\": \"est laborum et cupidatat\",\n        \"last_name\": \"dolore\",\n        \"email\": \"V5BROLWCrKebJXV@tckFwNVYpHdZkoJhOettPqmZTtsqNjOmA.ctg\",\n        \"avatar\": \"http://cFGncgK.fpphSi0vITr+qUTV.bw3.qiiRQzFU3BmNKCc6oDvrOsRaDPLo6SvXh\",\n        \"phone_number\": \"+065574671145061\"\n      },\n      \"classtime\": {\n        \"time\": \"1945-08-12T02:25:46.985Z\",\n        \"spotleft\": 79383676,\n        \"id\": 23994760,\n        \"class_detail\": \"nostrud labore aliquip veniam\"\n      },\n      \"class_detail\": \"aliqua\"\n    }\n  ],\n  \"next\": \"https://ZzfojmmafQAEsin.qqxBW4BzI5,eZ\",\n  \"previous\": \"http://mbDjJguQhgeKAXwmtFUHpoUNdq.lytsbGR4i3hQWe1QB3dosY-ezRWHqQem\"\n}"
+								}
+							]
+						},
+						{
+							"name": "classes upcoming list",
+							"request": {
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/classes/{{studio_id}}/upcoming/?limit=-69603318&offset=-69603318",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"classes",
+										"{{studio_id}}",
+										"upcoming",
+										""
+									],
+									"query": [
+										{
+											"key": "limit",
+											"value": "-69603318",
+											"description": "Number of results to return per page."
+										},
+										{
+											"key": "offset",
+											"value": "-69603318",
+											"description": "The initial index from which to return the results."
+										}
+									]
+								},
+								"description": "List upcoming classes in a given studio."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "GET",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/classes/:studio_id/upcoming/?limit=-69603318&offset=-69603318",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"classes",
+												":studio_id",
+												"upcoming",
+												""
+											],
+											"query": [
+												{
+													"key": "limit",
+													"value": "-69603318"
+												},
+												{
+													"key": "offset",
+													"value": "-69603318"
+												}
+											],
+											"variable": [
+												{
+													"key": "studio_id",
+													"value": "eiusmod veniam ullamco",
+													"description": "(Required) "
+												}
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"count\": -53196476,\n  \"results\": [\n    {\n      \"time\": \"2011-07-27T04:01:29.560Z\",\n      \"spotleft\": 1491701,\n      \"id\": 48331768,\n      \"class_detail\": \"pariatur\"\n    },\n    {\n      \"time\": \"2019-05-12T06:00:11.557Z\",\n      \"spotleft\": 28721980,\n      \"id\": 34485788,\n      \"class_detail\": \"ut in esse\"\n    }\n  ],\n  \"next\": \"https://VwwmNqaJNWuZNNbROvgQHSlAXO.ykglaTvd3dTKwpVf0UHUarS\",\n  \"previous\": \"https://NrqjA.cvurPVMvy0GvhoqKLrXQRyeY10R67y7xwerAek0XfBo7qsaxgJBvWmKGtdVXDGey+k.QZCK\"\n}"
+								}
+							]
+						}
+					]
+				},
+				{
+					"name": "classes modify create",
+					"request": {
+						"method": "POST",
+						"header": [],
+						"url": {
+							"raw": "{{baseUrl}}/classes/modify/?classtime id=eiusmod veniam ullamco&account id=-69603318&op=eiusmod veniam ullamco",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"classes",
+								"modify",
+								""
+							],
+							"query": [
+								{
+									"key": "classtime id",
+									"value": "eiusmod veniam ullamco",
+									"description": "Class time"
+								},
+								{
+									"key": "account id",
+									"value": "-69603318",
+									"description": "User ID"
+								},
+								{
+									"key": "op",
+									"value": "eiusmod veniam ullamco",
+									"description": "Operation: either enroll or drop"
+								}
+							]
+						},
+						"description": "Enroll or drop a class"
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "POST",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/classes/modify/?classtime id=eiusmod veniam ullamco&account id=-69603318&op=eiusmod veniam ullamco",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"classes",
+										"modify",
+										""
+									],
+									"query": [
+										{
+											"key": "classtime id",
+											"value": "eiusmod veniam ullamco"
+										},
+										{
+											"key": "account id",
+											"value": "-69603318"
+										},
+										{
+											"key": "op",
+											"value": "eiusmod veniam ullamco"
+										}
+									]
+								}
+							},
+							"status": "Created",
+							"code": 201,
+							"_postman_previewlanguage": "text",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "text/plain"
+								}
+							],
+							"cookie": [],
+							"body": ""
+						}
+					]
+				}
+			]
+		},
+		{
+			"name": "payments",
+			"item": [
+				{
+					"name": "update",
+					"item": [
+						{
+							"name": "payments update update",
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Content-Type",
+										"value": "application/json"
+									},
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"name_on_card\": \"cupidatat adipisicing consequat\",\n  \"card_number\": \"veniam Duis anim eu\",\n  \"cvv\": -91286752,\n  \"expiry_date\": \"2011-11-20\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/payments/update/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"payments",
+										"update",
+										""
+									]
+								},
+								"description": "Allows a user to alter their credit card details."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "PUT",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/payments/update/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"payments",
+												"update",
+												""
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"name_on_card\": \"incididunt dolore\",\n  \"card_number\": \"mollit Excepteur aliqua\",\n  \"cvv\": 9734811,\n  \"expiry_date\": \"2013-11-09\",\n  \"account\": \"dolor incididunt elit\"\n}"
+								}
+							]
+						},
+						{
+							"name": "payments update partial update",
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Content-Type",
+										"value": "application/json"
+									},
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"name_on_card\": \"cupidatat adipisicing consequat\",\n  \"card_number\": \"veniam Duis anim eu\",\n  \"cvv\": -91286752,\n  \"expiry_date\": \"2011-11-20\"\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/payments/update/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"payments",
+										"update",
+										""
+									]
+								},
+								"description": "Allows a user to alter their credit card details."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "PATCH",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/payments/update/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"payments",
+												"update",
+												""
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"name_on_card\": \"incididunt dolore\",\n  \"card_number\": \"mollit Excepteur aliqua\",\n  \"cvv\": 9734811,\n  \"expiry_date\": \"2013-11-09\",\n  \"account\": \"dolor incididunt elit\"\n}"
+								}
+							]
+						}
+					]
+				},
+				{
+					"name": "payments add create",
+					"request": {
+						"method": "POST",
+						"header": [
+							{
+								"key": "Content-Type",
+								"value": "application/json"
+							},
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"name_on_card\": \"cupidatat adipisicing consequat\",\n  \"card_number\": \"veniam Duis anim eu\",\n  \"cvv\": -91286752,\n  \"expiry_date\": \"2011-11-20\"\n}",
+							"options": {
+								"raw": {
+									"language": "json"
+								}
+							}
+						},
+						"url": {
+							"raw": "{{baseUrl}}/payments/add/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"payments",
+								"add",
+								""
+							]
+						},
+						"description": "Allows a user to register their credit card details."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "POST",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/payments/add/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"payments",
+										"add",
+										""
+									]
+								}
+							},
+							"status": "Created",
+							"code": 201,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"name_on_card\": \"incididunt dolore\",\n  \"card_number\": \"mollit Excepteur aliqua\",\n  \"cvv\": 9734811,\n  \"expiry_date\": \"2013-11-09\",\n  \"account\": \"dolor incididunt elit\"\n}"
+						}
+					]
+				},
+				{
+					"name": "payments history list",
+					"request": {
+						"method": "GET",
+						"header": [
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"url": {
+							"raw": "{{baseUrl}}/payments/history/?limit=-69603318&offset=-69603318",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"payments",
+								"history",
+								""
+							],
+							"query": [
+								{
+									"key": "limit",
+									"value": "-69603318",
+									"description": "Number of results to return per page."
+								},
+								{
+									"key": "offset",
+									"value": "-69603318",
+									"description": "The initial index from which to return the results."
+								}
+							]
+						},
+						"description": "Allows a user to view all their past payments on file, sorted by recent."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "GET",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/payments/history/?limit=-69603318&offset=-69603318",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"payments",
+										"history",
+										""
+									],
+									"query": [
+										{
+											"key": "limit",
+											"value": "-69603318"
+										},
+										{
+											"key": "offset",
+											"value": "-69603318"
+										}
+									]
+								}
+							},
+							"status": "OK",
+							"code": 200,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"count\": 19412010,\n  \"results\": [\n    {\n      \"account\": \"ut esse sint\",\n      \"timestamp\": \"2009-11-14\",\n      \"amount\": -16766216.130180165,\n      \"card_number\": \"adipisicing sed reprehenderit commodo velit\",\n      \"card_expiry\": \"1960-01-25\"\n    },\n    {\n      \"account\": \"Duis est\",\n      \"timestamp\": \"2015-04-04\",\n      \"amount\": 30433537.682281077,\n      \"card_number\": \"exercitation non commodo aliquip\",\n      \"card_expiry\": \"2014-11-26\"\n    }\n  ],\n  \"next\": \"http://VgTpduJmZeCssdvzGiDKjwvuWRurByQ.mvjtnMcyHNTsupkVyH0eFBJdRmcj1N0L5.NTSls72-pZUWt1AdOuzQ9SK0bm1ujQ1bMS1v\",\n  \"previous\": \"https://bOEKuKWZZFmbTZqChcAIdzgeKdbyqTv.ydxjId4aLX-we0SlnnHhWkMr6j7MQEj0Is+LyBePV+6,ZfulDtdZXIGN,+NbLMP,OQ18fIv\"\n}"
+						}
+					]
+				},
+				{
+					"name": "payments upcoming list",
+					"request": {
+						"method": "GET",
+						"header": [],
+						"url": {
+							"raw": "{{baseUrl}}/payments/upcoming/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"payments",
+								"upcoming",
+								""
+							]
+						},
+						"description": "Allows a user to view their next upcoming payment, and the payment recurrence interval.\nThe next upcoming payment is when the coverage they have already paid for expires"
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "GET",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/payments/upcoming/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"payments",
+										"upcoming",
+										""
+									]
+								}
+							},
+							"status": "OK",
+							"code": 200,
+							"_postman_previewlanguage": "text",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "text/plain"
+								}
+							],
+							"cookie": [],
+							"body": ""
+						}
+					]
+				}
+			]
+		},
+		{
+			"name": "studios",
+			"item": [
+				{
+					"name": "{studio}",
+					"item": [
+						{
+							"name": "studios read",
+							"request": {
+								"auth": {
+									"type": "noauth"
+								},
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/studios/{{studio}}/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"studios",
+										"{{studio}}",
+										""
+									]
+								},
+								"description": "View Studio information given a Studio ID."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "GET",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/studios/:studio/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"studios",
+												":studio",
+												""
+											],
+											"variable": [
+												{
+													"key": "studio",
+													"value": "eiusmod veniam ullamco",
+													"description": "(Required) "
+												}
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"name\": \"in in elit aute\",\n  \"address\": \"nos\",\n  \"latitude\": -85459281.06266336,\n  \"longitude\": -23404344.796723947,\n  \"postal_code\": \"anim officia\",\n  \"phone_number\": \"velit occaecat fugiat anim\"\n}"
+								}
+							]
+						},
+						{
+							"name": "studios amenities list",
+							"request": {
+								"auth": {
+									"type": "noauth"
+								},
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/studios/{{studio}}/amenities/?limit=-69603318&offset=-69603318",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"studios",
+										"{{studio}}",
+										"amenities",
+										""
+									],
+									"query": [
+										{
+											"key": "limit",
+											"value": "-69603318",
+											"description": "Number of results to return per page."
+										},
+										{
+											"key": "offset",
+											"value": "-69603318",
+											"description": "The initial index from which to return the results."
+										}
+									]
+								},
+								"description": "View Amenities given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "GET",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/studios/:studio/amenities/?limit=-69603318&offset=-69603318",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"studios",
+												":studio",
+												"amenities",
+												""
+											],
+											"query": [
+												{
+													"key": "limit",
+													"value": "-69603318"
+												},
+												{
+													"key": "offset",
+													"value": "-69603318"
+												}
+											],
+											"variable": [
+												{
+													"key": "studio",
+													"value": "eiusmod veniam ullamco",
+													"description": "(Required) "
+												}
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"count\": 51575971,\n  \"results\": [\n    {\n      \"studio\": 7886004,\n      \"amenity_type\": \"Lorem veniam anim in\",\n      \"quantity\": -10543630\n    },\n    {\n      \"studio\": -25485704,\n      \"amenity_type\": \"Ut est\",\n      \"quantity\": 89061952\n    }\n  ],\n  \"next\": \"https://jSUSSCfswSbZRYcBOAUAh.kxSkNTQAwxXdVfCmJhqnI8g+9JAfOZ54837,LZdy+0GBEiHa\",\n  \"previous\": \"http://VJqMycG.hpM2GRV82sfGlR6ap\"\n}"
+								}
+							]
+						},
+						{
+							"name": "studios images list",
+							"request": {
+								"auth": {
+									"type": "noauth"
+								},
+								"method": "GET",
+								"header": [
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/studios/{{studio}}/images/?limit=-69603318&offset=-69603318",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"studios",
+										"{{studio}}",
+										"images",
+										""
+									],
+									"query": [
+										{
+											"key": "limit",
+											"value": "-69603318",
+											"description": "Number of results to return per page."
+										},
+										{
+											"key": "offset",
+											"value": "-69603318",
+											"description": "The initial index from which to return the results."
+										}
+									]
+								},
+								"description": "View StudioImages given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "GET",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/studios/:studio/images/?limit=-69603318&offset=-69603318",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"studios",
+												":studio",
+												"images",
+												""
+											],
+											"query": [
+												{
+													"key": "limit",
+													"value": "-69603318"
+												},
+												{
+													"key": "offset",
+													"value": "-69603318"
+												}
+											],
+											"variable": [
+												{
+													"key": "studio",
+													"value": "eiusmod veniam ullamco",
+													"description": "(Required) "
+												}
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"count\": 32473674,\n  \"results\": [\n    {\n      \"studio\": -3985930,\n      \"image\": \"https://mWBPJRELeoL.afsA695Ew+ymsxeKGzy2SPENpdYmhpw1ZMDYzRVHlgdFSjmrCH0kgQecTqM\"\n    },\n    {\n      \"studio\": -33435659,\n      \"image\": \"https://mzuIXtgWUuTEANIYjeUxymputMn.psoam5ddsiMUF\"\n    }\n  ],\n  \"next\": \"http://SB.rzdKBtknD0a89pBiB7VhoQwlDhSZ4tCebvIJKfsR-W+7rAHUmtTQu6xAoln2ptOrTuanm3oAPBYDql+\",\n  \"previous\": \"https://oJtrKIcqYSCsZnzkrLHzxSeBc.dplcSpSjrdsh+Q1JfdOH4aKAs1KPY,g7cKtFWO8Wp7Ol-ddOrdg27XhC+ABc9XlS\"\n}"
+								}
+							]
+						}
+					]
+				},
+				{
+					"name": "studios list read",
+					"request": {
+						"auth": {
+							"type": "noauth"
+						},
+						"method": "GET",
+						"header": [
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"url": {
+							"raw": "{{baseUrl}}/studios/list/{{latitude}},{{longitude}}?search=eiusmod veniam ullamco&limit=-69603318&offset=-69603318",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"studios",
+								"list",
+								"{{latitude}},{{longitude}}"
+							],
+							"query": [
+								{
+									"key": "search",
+									"value": "eiusmod veniam ullamco",
+									"description": "A search term."
+								},
+								{
+									"key": "limit",
+									"value": "-69603318",
+									"description": "Number of results to return per page."
+								},
+								{
+									"key": "offset",
+									"value": "-69603318",
+									"description": "The initial index from which to return the results."
+								}
+							]
+						},
+						"description": "List Studios by proximity, with optional search and filter capability via parameters.\nNeeds latitude and longitude values passed through the URL to operate."
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "GET",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/studios/list/{{latitude}},{{longitude}}?search=eiusmod veniam ullamco&limit=-69603318&offset=-69603318",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"studios",
+										"list",
+										"{{latitude}},{{longitude}}"
+									],
+									"query": [
+										{
+											"key": "search",
+											"value": "eiusmod veniam ullamco"
+										},
+										{
+											"key": "limit",
+											"value": "-69603318"
+										},
+										{
+											"key": "offset",
+											"value": "-69603318"
+										}
+									]
+								}
+							},
+							"status": "OK",
+							"code": 200,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"count\": 65204862,\n  \"results\": [\n    {\n      \"name\": \"velit ea esse\",\n      \"address\": \"do nisi id\",\n      \"latitude\": -56377377.380743176,\n      \"longitude\": -6529700.32437934,\n      \"postal_code\": \"ipsum magna\",\n      \"phone_number\": \"exercitation tempor\"\n    },\n    {\n      \"name\": \"occaecat ex\",\n      \"address\": \"tempor incididunt officia\",\n      \"latitude\": 79897394.20826659,\n      \"longitude\": 12430970.636889651,\n      \"postal_code\": \"ullamco occaecat dolor minim cillum\",\n      \"phone_number\": \"ut laboris exercitation nulla\"\n    }\n  ],\n  \"next\": \"https://cujJQOtdeh.wxsIvIhzYpHS90dnk1CgwTzWHwZXiidFS,Jng3F9QhT6OJZWPfBSWXM\",\n  \"previous\": \"https://HBmdOKiTNHpa.cncTk+PyZwXZgdXzmlGjG3PDfU,\"\n}"
+						}
+					]
+				}
+			]
+		},
+		{
+			"name": "subscriptions",
+			"item": [
+				{
+					"name": "update",
+					"item": [
+						{
+							"name": "subscriptions update update",
+							"request": {
+								"method": "PUT",
+								"header": [
+									{
+										"key": "Content-Type",
+										"value": "application/json"
+									},
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"plan\": -65348944\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/subscriptions/update/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"subscriptions",
+										"update",
+										""
+									]
+								},
+								"description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is added to the old one,\nand a new payment is created to reflect coverage to next expiry date."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "PUT",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/subscriptions/update/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"subscriptions",
+												"update",
+												""
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"account\": \"ullamco\",\n  \"plan\": -53650531,\n  \"expiration\": \"1969-04-11\"\n}"
+								}
+							]
+						},
+						{
+							"name": "subscriptions update partial update",
+							"request": {
+								"method": "PATCH",
+								"header": [
+									{
+										"key": "Content-Type",
+										"value": "application/json"
+									},
+									{
+										"key": "Accept",
+										"value": "application/json"
+									}
+								],
+								"body": {
+									"mode": "raw",
+									"raw": "{\n  \"plan\": -65348944\n}",
+									"options": {
+										"raw": {
+											"language": "json"
+										}
+									}
+								},
+								"url": {
+									"raw": "{{baseUrl}}/subscriptions/update/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"subscriptions",
+										"update",
+										""
+									]
+								},
+								"description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is added to the old one,\nand a new payment is created to reflect coverage to next expiry date."
+							},
+							"response": [
+								{
+									"name": "Untitled Response",
+									"originalRequest": {
+										"method": "PATCH",
+										"header": [
+											{
+												"description": "Added as a part of security scheme: basic",
+												"key": "Authorization",
+												"value": "Basic <credentials>"
+											}
+										],
+										"url": {
+											"raw": "{{baseUrl}}/subscriptions/update/",
+											"host": [
+												"{{baseUrl}}"
+											],
+											"path": [
+												"subscriptions",
+												"update",
+												""
+											]
+										}
+									},
+									"status": "OK",
+									"code": 200,
+									"_postman_previewlanguage": "json",
+									"header": [
+										{
+											"key": "Content-Type",
+											"value": "application/json"
+										}
+									],
+									"cookie": [],
+									"body": "{\n  \"account\": \"ullamco\",\n  \"plan\": -53650531,\n  \"expiration\": \"1969-04-11\"\n}"
+								}
+							]
+						}
+					]
+				},
+				{
+					"name": "subscriptions subscribe create",
+					"request": {
+						"method": "POST",
+						"header": [
+							{
+								"key": "Content-Type",
+								"value": "application/json"
+							},
+							{
+								"key": "Accept",
+								"value": "application/json"
+							}
+						],
+						"body": {
+							"mode": "raw",
+							"raw": "{\n  \"plan\": -65348944\n}",
+							"options": {
+								"raw": {
+									"language": "json"
+								}
+							}
+						},
+						"url": {
+							"raw": "{{baseUrl}}/subscriptions/subscribe/",
+							"host": [
+								"{{baseUrl}}"
+							],
+							"path": [
+								"subscriptions",
+								"subscribe",
+								""
+							]
+						},
+						"description": "Allows a user to subscribe. Prerequisites:\n- This account does not have a subscription \n(or a previously cancelled subscription - in which case the UpdateView should instead be used.)\n- This account has registered payment information\n\nThis method creates:\n- a CurrentSubscription entry for this user\n- an entry in PaymentHistory logging this transaction"
+					},
+					"response": [
+						{
+							"name": "Untitled Response",
+							"originalRequest": {
+								"method": "POST",
+								"header": [
+									{
+										"description": "Added as a part of security scheme: basic",
+										"key": "Authorization",
+										"value": "Basic <credentials>"
+									}
+								],
+								"url": {
+									"raw": "{{baseUrl}}/subscriptions/subscribe/",
+									"host": [
+										"{{baseUrl}}"
+									],
+									"path": [
+										"subscriptions",
+										"subscribe",
+										""
+									]
+								}
+							},
+							"status": "Created",
+							"code": 201,
+							"_postman_previewlanguage": "json",
+							"header": [
+								{
+									"key": "Content-Type",
+									"value": "application/json"
+								}
+							],
+							"cookie": [],
+							"body": "{\n  \"account\": \"ullamco\",\n  \"plan\": -53650531,\n  \"expiration\": \"1969-04-11\"\n}"
+						}
+					]
+				}
+			]
+		}
+	],
+	"auth": {
+		"type": "bearer"
+	},
+	"event": [
+		{
+			"listen": "prerequest",
+			"script": {
+				"type": "text/javascript",
+				"exec": [
+					""
+				]
+			}
+		},
+		{
+			"listen": "test",
+			"script": {
+				"type": "text/javascript",
+				"exec": [
+					""
+				]
+			}
+		}
+	],
+	"variable": [
+		{
+			"key": "baseUrl",
+			"value": "http://127.0.0.1:8000",
+			"type": "string"
+		},
+		{
+			"key": "latitude",
+			"value": "eiusmod veniam ullamco",
+			"type": "any"
+		},
+		{
+			"key": "longitude",
+			"value": "eiusmod veniam ullamco",
+			"type": "any"
+		},
+		{
+			"key": "token",
+			"value": "",
+			"type": "default"
+		},
+		{
+			"key": "studio_id",
+			"value": "",
+			"type": "default"
+		},
+		{
+			"key": "studio",
+			"value": "",
+			"type": "default"
+		},
+		{
+			"key": "account_id",
+			"value": "",
+			"type": "default"
+		}
+	]
+}
\ No newline at end of file

commit 56c2287e8b0821612cf4183d4f15166e0933446d
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 16:45:35 2022 -0500

    startup working w/ migrations deleted

diff --git a/startup.sh b/startup.sh
index 3abee7b..1cd986c 100755
--- a/startup.sh
+++ b/startup.sh
@@ -3,7 +3,6 @@
 python3.10 -m venv env
 source env/bin/activate
 python3 -m pip install -r requirements.txt --force-reinstall
-python3 manage.py migrate
 python3 manage.py makemigrations
 python3 manage.py migrate
 

commit 1bd60fe79e6193cf500964f72699796e09fdf0e3
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 16:34:47 2022 -0500

    chmod startup script

diff --git a/startup.sh b/startup.sh
old mode 100644
new mode 100755

commit 1a20713860239d7bc3b5c5ae6de9537b634d58b4
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 16:32:36 2022 -0500

    add startup.sh

diff --git a/startup.sh b/startup.sh
new file mode 100644
index 0000000..3abee7b
--- /dev/null
+++ b/startup.sh
@@ -0,0 +1,9 @@
+#!/bin/sh
+
+python3.10 -m venv env
+source env/bin/activate
+python3 -m pip install -r requirements.txt --force-reinstall
+python3 manage.py migrate
+python3 manage.py makemigrations
+python3 manage.py migrate
+

commit bd32bc666fc6b446eb4ec8981a2a390dd2bc906c
Merge: 25589b4 e8365e8
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Sat Nov 19 16:18:49 2022 -0500

    Merge pull request #28 from nathan-hansen/subscriptions-change
    
    Changed subscriptions so that when subscription is updated, new expir…

commit e8365e8dd69eaede33ccd7c6573437eb4ba9bb10
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sat Nov 19 16:15:08 2022 -0500

    Changed subscriptions so that when subscription is updated, new expiry date gets added to old one, and a new payment history based on the update is created upon update. Made payment history create a helper function. Changed upcoming payment generator to work on subscription expiry date and not past payment. Minor corrections to tests. Changed docstring. Altered subscription and payment models to use Datefield.

diff --git a/accounts/tests.py b/accounts/tests.py
index 0a808d6..b5f504b 100644
--- a/accounts/tests.py
+++ b/accounts/tests.py
@@ -90,7 +90,7 @@ class AccountTestCase(TestCase):
         access_token = response.data['access']
 
         avatar = open('./tests/wojak.jpg', 'rb')
-        response = self.client.post('/accounts/update/', {
+        response = self.client.put('/accounts/update/', {
             'username': self.username,
             'password': self.password,
             'first_name': 'test',
diff --git a/generate_payments.py b/generate_payments.py
index c7bf903..05ba8ae 100644
--- a/generate_payments.py
+++ b/generate_payments.py
@@ -22,13 +22,10 @@ def generate_payments_today():
             pay_time_str = response_data.get('timestamp')
             # convert datetime string in serialized object to datetime object
             # source: https://stackoverflow.com/a/13182163
-            pay_time = datetime.datetime.fromisoformat(pay_time_str)
-            # test_time = pay_time.replace(month=pay_time.month - 1)
-            # convert to a date object, just want year, month, day
-            pay_time_date = datetime.datetime.date(pay_time)
+            pay_time = datetime.date.fromisoformat(pay_time_str)
+            test_time = pay_time.replace(year=pay_time.year - 1, month=pay_time.month - 1)
             # in order to compare if payment is due today
-            # test_time = datetime.datetime.date(test_time)
-            if pay_time_date == datetime.date.today():  # check if payment time is today
+            if test_time == datetime.date.today():  # check if payment time is today
                 # deserialize response data and save the PaymentHistory object
                 payment_history = PaymentHistorySerializer(data=response_data)
                 # check if deserialized is valid
diff --git a/payments/functions.py b/payments/functions.py
index ff07bf1..276cc12 100644
--- a/payments/functions.py
+++ b/payments/functions.py
@@ -10,54 +10,58 @@ import datetime
 
 def generate_upcoming_payment(account_id: int):
     """
-    Take in an account id and generate the serialized most recent Payment History
-    of that account from the database, or return an error.
+    Take in an account id and return Upcoming payment based on the subscription plan
+    and payment of that account from the database (returned as serialized Payment History),
+    and return the recurrence interval, or return an error.
     """
     current_account = get_object_or_404(Account, id=account_id)
     # check if user has a subscription or payment info
     # check if payment info with this user exists, if not, raise error
     if not PaymentInfo.objects.filter(account=current_account).exists():
-        return {'error': 'No upcoming payments, User has no payment info'}, None, None
+        return {'error': 'No upcoming payments, User has no payment info'}, None
     if not CurrentSubscription.objects.filter(account=current_account).exists():
-        return {'error': 'No upcoming payments, User is not subscribed'}, None, None
+        return {'error': 'No upcoming payments, User is not subscribed'}, None
     # get object or 404 should never trigger here, due to checks above
     current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
-    # check if current subscription is expired
-    # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
-    timezone_info = current_subscription.expiration.tzinfo
-    if current_subscription.expiration < datetime.datetime.now(timezone_info):
-        return {'error': 'No upcoming payments, subscription expired'}, None, None
-
     # if current subscription is null, return accordingly
     if current_subscription.plan is None:
-        return {'error': 'You are not subscribed'}, None, None
+        return {'error': 'You are not subscribed'}, None
+    # check if current subscription is expired
+    if current_subscription.expiration < datetime.date.today():
+        return {'error': 'No upcoming payments, subscription expired'}, None
+
     # id of the plan should be stored in plan attribute
     current_plan_id = current_subscription.plan.id
     sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
+    # get the amount paid based on current subscription plan
     amount = sub_plan.payment
+    # Find the recurrence of the current subscription plan
+    interval = sub_plan.interval
 
-    # get the most recent past Payment and record payment info and time it was made
-    history_queryset = PaymentHistory.objects.filter(account=current_account).filter(
-        timestamp__lte=timezone.now())
-    most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
-    # user payment credentials
+    # user payment credentials from current payment method
     user_payment_info = PaymentInfo.objects.filter(account=current_account)[0]
     card_number = user_payment_info.card_number
     card_expiry = user_payment_info.expiry_date
-    # set the time attribute of future payment
-    most_recent_payment_time = most_recent_payment.timestamp
-    # calculate the date of the upcoming payment
-    interval = sub_plan.interval
-    future_time = None
-    if interval == "monthly":
-        if most_recent_payment_time.month == 12:
-            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1, month=1)
-        else:
-            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
-    elif interval == "yearly":
-        future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
-    # create PaymentHistory object for upcoming payment
+    # the future time of the payment is based on when the current subscription expires
+    future_time = current_subscription.expiration
     upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
                                       card_number=card_number, card_expiry=card_expiry)
     upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
-    return upcoming_payment_data, interval, current_subscription.expiration
+    return upcoming_payment_data, interval
+
+
+def create_payment_history(current_account: Account, sub_plan_id: int):
+    """
+    Create a Payment History with timestamp of today for Account current_account
+    based on the subscription plan with id sub_plan_id
+    """
+    current_payment_info = get_object_or_404(PaymentInfo, account=current_account)
+    card_number = current_payment_info.card_number
+    card_expiry = current_payment_info.expiry_date
+    sub_plan = get_object_or_404(SubscriptionPlan, id=sub_plan_id)
+    amount = sub_plan.payment
+    today = datetime.date.today()
+    PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number,
+                                  card_expiry=card_expiry)
+    return
+
diff --git a/payments/models.py b/payments/models.py
index da41b3a..7dc86de 100644
--- a/payments/models.py
+++ b/payments/models.py
@@ -10,7 +10,7 @@ class PaymentInfo(m.Model):
 
 class PaymentHistory(m.Model):
     account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='payment_history')
-    timestamp = m.DateTimeField()
+    timestamp = m.DateField()
     amount = m.FloatField()
     card_number = m.CharField(max_length=250)
     card_expiry = m.DateField()
\ No newline at end of file
diff --git a/payments/views.py b/payments/views.py
index b5702e1..48eec44 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -50,7 +50,7 @@ class PaymentInfoUpdateView(UpdateAPIView):
 
 class ListPaymentHistory(ListAPIView):
     """
-    Allows a user to view all their past payments on file.
+    Allows a user to view all their past payments on file, sorted by recent.
     """
     permission_classes = [IsAuthenticated]
     serializer_class = PaymentHistorySerializer
@@ -64,18 +64,18 @@ class ListPaymentHistory(ListAPIView):
 
 class PaymentUpcomingView(APIView):
     """
-    Allows a user to view their next upcoming payment, the payment interval, and the end date of the recurrence.
+    Allows a user to view their next upcoming payment, and the payment recurrence interval.
+    The next upcoming payment is when the coverage they have already paid for expires
     """
     permission_classes = [IsAuthenticated]
 
     def get(self, request):
-        payment_history_data, interval, end_payment = generate_upcoming_payment(self.request.user.id)
+        payment_history_data, interval = generate_upcoming_payment(self.request.user.id)
         if payment_history_data.get('error') is not None:
             return Response(payment_history_data, status=400)
         # else create the return data
         return_data = {"account": payment_history_data.get('account'),
                        "timestamp": payment_history_data.get('timestamp'), "amount": payment_history_data.get('amount'),
                        "card_number": payment_history_data.get('card_number'),
-                       "card_expiry": payment_history_data.get('card_expiry'), "recurrence": interval,
-                       "end_payment": end_payment}
+                       "card_expiry": payment_history_data.get('card_expiry'), "recurrence": interval}
         return Response(return_data, status=200)
diff --git a/subscriptions/models.py b/subscriptions/models.py
index 1d77be6..e04cf5b 100644
--- a/subscriptions/models.py
+++ b/subscriptions/models.py
@@ -1,12 +1,38 @@
+import datetime
+
 from django.db import models as m
 from rest_framework.validators import UniqueValidator
 
+
 class SubscriptionPlan(m.Model):
     payment = m.DecimalField(decimal_places=2, max_digits=12)
     interval = m.CharField(max_length=16)
 
+
 class CurrentSubscription(m.Model):
-    account = m.OneToOneField('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription') 
+    account = m.OneToOneField('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
     plan = m.ForeignKey('SubscriptionPlan', on_delete=m.CASCADE, null=True, blank=True, related_name='current_plan')
-    expiration = m.DateTimeField(null=True, blank=True)
+    expiration = m.DateField(null=True, blank=True)
 
+    def save(self, *args, **kwargs):
+        # use this to override update and change expiry date based on the old value
+        if self.pk:
+            current_sub = CurrentSubscription.objects.get(id=self.pk)
+            current_expiry = current_sub.expiration
+            # if we update and the previous value is Null but new value for plan is not null
+            # set expiration date to today, as if you were creating it
+            if current_expiry is None:
+                current_expiry = datetime.date.today()
+            # if the new updated value is for plan is not None, calculate expiry date
+            if self.plan is not None:
+                plan_interval = self.plan.interval
+                if plan_interval == "monthly":
+                    if current_expiry.month == 12:
+                        self.expiration = current_expiry.replace(year=current_expiry.year + 1, month=1)
+                    else:
+                        self.expiration = current_expiry.replace(month=current_expiry.month + 1)
+                elif plan_interval == "yearly":
+                    self.expiration = current_expiry.replace(year=current_expiry.year + 1)
+            else:
+                self.expiration = None
+        super(CurrentSubscription, self).save(*args, **kwargs)
diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
index c119fbd..d41be71 100644
--- a/subscriptions/serializers.py
+++ b/subscriptions/serializers.py
@@ -33,32 +33,37 @@ class CurrentSubscriptionSerializer(ModelSerializer):
         super().validate(data)
         if 'expiration' in data:
             raise ValidationError('cannot send expiration value')
-        else:
-            try:
-                interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
-                today = datetime.datetime.combine(datetime.datetime.today(),
-                                                  datetime.datetime.min.time())
-                if interval == 'yearly':
-                    expiry = today.replace(year=today.year + 1, month=1, day=1)
-                elif interval == 'monthly':
-                    if today.month == 12:
-                        expiry = today.replace(year=today.year + 1, month=1, day=1)
-                    else:
-                        expiry = today.replace(month=today.month + 1, day=1)
-
-                elif interval == 'weekly':
-                    pass
-
-                elif interval == 'daily':
-                    pass
-
-                data['expiration'] = expiry
-
-                return data
-
-
-            except AttributeError:
-                return data
+        # validate the interval in plan if there is a plan submitted
+        if data.get('plan') is not None:
+            interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
+            if interval not in ("monthly", "yearly"):
+                raise ValidationError('invalid interval')
+        return data
+        # else:
+        #     try:
+        #         interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
+        #         today = datetime.date.today()
+        #         if interval == 'yearly':
+        #             expiry = today.replace(year=today.year + 1, month=1, day=1)
+        #         elif interval == 'monthly':
+        #             if today.month == 12:
+        #                 expiry = today.replace(year=today.year + 1, month=1, day=1)
+        #             else:
+        #                 expiry = today.replace(month=today.month + 1, day=1)
+        #
+        #         elif interval == 'weekly':
+        #             pass
+        #
+        #         elif interval == 'daily':
+        #             pass
+        #
+        #         data['expiration'] = expiry
+        #
+        #         return data
+        #
+        #
+        #     except AttributeError:
+        #         return data
 
     # reference to override create method to pre-set attribute to logged-in user:
     # https://stackoverflow.com/a/58430009
@@ -66,8 +71,7 @@ class CurrentSubscriptionSerializer(ModelSerializer):
         current_account_id = self.context['request'].user.id
         current_account = get_object_or_404(Account, pk=current_account_id)
         interval = SubscriptionPlan.objects.get(id=validated_data['plan'].pk).interval
-        today = datetime.datetime.combine(datetime.datetime.today(),
-                                          datetime.datetime.min.time())
+        today = datetime.date.today()
         if interval == 'yearly':
             expiry = today.replace(year=today.year + 1, month=1, day=1)
         elif interval == 'monthly':
@@ -75,11 +79,7 @@ class CurrentSubscriptionSerializer(ModelSerializer):
                 expiry = today.replace(year=today.year + 1, month=1, day=1)
             else:
                 expiry = today.replace(month=today.month + 1, day=1)
-
-        elif interval == 'weekly':
-            pass
-
-        elif interval == 'daily':
-            pass
+        else:
+            raise ValidationError('invalid interval')
         return CurrentSubscription.objects.create(account=current_account, 
                                                   plan=validated_data['plan'], expiration=expiry)
diff --git a/subscriptions/tests.py b/subscriptions/tests.py
index 38eafb4..eba10d7 100644
--- a/subscriptions/tests.py
+++ b/subscriptions/tests.py
@@ -24,14 +24,14 @@ class SubscriptionTest(TestCase):
                 payment=random.randint(0, 100),
                 interval=i,
             )
-            for i in ["yearly", "monthly", "weekly", "daily"]
+            for i in ["yearly", "monthly"]
         ]
 
     def test_create_subscription(self):
         # create a subscription
         subscription = SubscriptionPlan.objects.create(
             payment=10.00,
-            interval=random.choice(["monthly", "yearly", "weekly", "daily"]),
+            interval=random.choice(["monthly", "yearly"]),
         )
 
         # check if subscription is created
diff --git a/subscriptions/views.py b/subscriptions/views.py
index 2491d5b..1835b4a 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -12,6 +12,7 @@ from payments.models import PaymentInfo, PaymentHistory
 from accounts.models import Account
 from rest_framework.response import Response
 import datetime
+from payments.functions import create_payment_history
 
 
 class SubscribeView(generics.CreateAPIView):
@@ -46,25 +47,18 @@ class SubscribeView(generics.CreateAPIView):
             return Response({'error': 'User does not have Payment Info to subscribe'}, status=400)
         # otherwise keep the existing create view api logic
         created_subscription = super(SubscribeView, self).create(request, *args, **kwargs)
+        new_current_sub_plan_id = created_subscription.data.get('plan')
 
         # Create Payment History
-        current_payment_info = get_object_or_404(PaymentInfo, account=current_account)
-        card_number = current_payment_info.card_number
-        card_expiry = current_payment_info.expiry_date
-        new_current_sub_plan_id = created_subscription.data.get('plan')
-        sub_plan = get_object_or_404(SubscriptionPlan, id=new_current_sub_plan_id)
-        amount = sub_plan.payment
-        today = datetime.datetime.combine(datetime.datetime.today(),
-                                          datetime.datetime.min.time())
-        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number,
-                                      card_expiry=card_expiry)
+        create_payment_history(current_account, new_current_sub_plan_id)
         return created_subscription
 
 
 class UpdateSubscriptionView(generics.UpdateAPIView):
     """
     Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).
-    If a user changes to a non-null subscription plan, the newer expiry date is used.
+    If a user changes to a non-null subscription plan, the newer expiry date is added to the old one,
+    and a new payment is created to reflect coverage to next expiry date.
     """
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
@@ -74,5 +68,9 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
         current_account = get_object_or_404(Account, id=self.request.user.id)
         # use get object or 404 because we are updating specific current subscription with an id and account
         # use current_account because we only want logged-in user to be able to edit their subscriptions
-        return get_object_or_404(CurrentSubscription, account=current_account)
+        current_sub = get_object_or_404(CurrentSubscription, account=current_account)
+        sub_plan_id = self.request.data['plan']
+        if sub_plan_id != "":  # if the user did not unsubscribe, but picked yearly or monthly
+            create_payment_history(current_account, sub_plan_id)
+        return current_sub
         # will return "Not found" if current subscription does not belong to user

commit 25589b42c308c7cc501c3de7cd8f254384d809ad
Merge: 5460b52 6d3bfb8
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 14:02:57 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 5460b52af547c55696f4af40edbccf88f9e0644b
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 14:02:55 2022 -0500

    fix account signup swagger

diff --git a/accounts/views.py b/accounts/views.py
index 37f3417..e526d20 100644
--- a/accounts/views.py
+++ b/accounts/views.py
@@ -1,4 +1,6 @@
 from django.shortcuts import render
+from drf_yasg.utils import swagger_auto_schema
+from drf_yasg import openapi
 from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
 from rest_framework.permissions import IsAuthenticated, AllowAny
 from accounts.models import Account
@@ -18,6 +20,7 @@ class SignUpView(APIView):
     permission_classes = (AllowAny,)
     serializer_class = SignupSerializer
 
+    @swagger_auto_schema(request_body=SignupSerializer)
     def post(self, request):
         sign_up_serializer = self.serializer_class(data=request.data)
         sign_up_serializer.is_valid(raise_exception=True)

commit 6d3bfb8b952e9a2ea5581142527827fe92326f20
Merge: b7bbb5d 17c9f2f
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 13:59:47 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit b7bbb5d8c41b5cec9c92291d2eec96dca6900d0b
Merge: e4c7fc6 503cb34
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 13:59:27 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 17c9f2f6963e177db001c76d0712bcfe074ebd3f
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 13:59:25 2022 -0500

    override update method

diff --git a/classes/models.py b/classes/models.py
index 2c0510f..88fc17a 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -27,6 +27,12 @@ class Class(m.Model):
             raise ValidationError('Class start date cannot be later than class end date')
 
         return super().clean()
+    
+    def update(self, *args, **kwargs):
+        if 'class_start' in kwargs or 'class_end' in kwargs or 'class_time' in kwargs:
+            self.edit_time()
+
+        return super().update(*args, **kwargs)
 
     def save(self, *args, **kwargs):
         super().save(*args, **kwargs)
@@ -58,6 +64,7 @@ class Class(m.Model):
         ClassTimeTable.objects.filter(class_id=self, time=time).delete()
         return True
 
+
 class Keywords(m.Model):
     classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='keywords')
     keyword = m.CharField(max_length=250)

commit e4c7fc608958819e9e64f0966824c54a61e8f5e0
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 13:59:20 2022 -0500

    fixed studiolistview test

diff --git a/studios/tests.py b/studios/tests.py
index ecfaef2..85fed5a 100644
--- a/studios/tests.py
+++ b/studios/tests.py
@@ -1,9 +1,10 @@
 from django.test import TestCase, Client
 from django.contrib.auth.models import User
-import random, geopy
-
+import random
+from geopy.distance import great_circle
 from studios.models import Studio, StudioImage, Amenities
 
+
 # Create your tests here.
 class StudioTest(TestCase):
     studios = []
@@ -30,7 +31,7 @@ class StudioTest(TestCase):
                 postal_code="postal_code{}".format(i),
                 phone_number="1234567890",
             )
-            for i in range(random.randint(0, 20))
+            for i in range(1, random.randint(1, 21))
         ]
 
     def test_list_studio_by_proximity(self):
@@ -44,18 +45,17 @@ class StudioTest(TestCase):
                 "/studios/list/{},{}".format(cood[0], cood[1])
             )
             self.assertEqual(response.status_code, 200)
-            self.assertEqual(len(response.data), len(self.studios))
+            self.assertEqual(response.data['count'], len(self.studios))
 
             distance_list = [
-                (geopy.distance.distance(
+                (great_circle(
                     (studio.latitude, studio.longitude), cood
-                ).km, studio)
+                    ), studio)
                 for studio in self.studios
             ]
             distance_list.sort(key=lambda x: x[0])
 
-            # print(response.content)
             for i in range(len(self.studios)):
-                self.assertEqual(response.data[i]["name"], distance_list[i][1].name)
+                self.assertEqual(response.data["results"][i]["name"], distance_list[i][1].name)
         
 

commit 503cb34a5fc01eddba37d9e7123ef336dfb6e577
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 13:50:12 2022 -0500

    add manual swagger

diff --git a/classes/views.py b/classes/views.py
index 4db590c..30e9d65 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -1,4 +1,6 @@
 from django.shortcuts import get_object_or_404
+from drf_yasg.utils import swagger_auto_schema
+from drf_yasg import openapi
 from django.utils import timezone
 from rest_framework import generics
 from rest_framework.permissions import IsAuthenticated
@@ -41,12 +43,16 @@ class ListMyClassView(generics.ListAPIView):
             order_by('classtime__time')
 
 
+classtime = openapi.Parameter('classtime id', openapi.IN_QUERY, description="Class time", type=openapi.TYPE_STRING)
+user = openapi.Parameter('account id', openapi.IN_QUERY, description="User ID", type=openapi.TYPE_INTEGER)
+op = openapi.Parameter('op', openapi.IN_QUERY, description="Operation: either enroll or drop", type=openapi.TYPE_STRING)
 class ModifyClassView(APIView):
     """
-    Allows a user to enrol or drop a class.
+    Allows a user to enrol or drop a class. You need to login to use this action.
     """
     permission_classes = (IsAuthenticated,)
 
+    @swagger_auto_schema(manual_parameters=[classtime, user, op], operation_description="Enroll or drop a class")
     def post(self, request):
         user = Account.objects.get(id=request.user.id)
         classtime = request.data.get('timeid')
@@ -56,7 +62,7 @@ class ModifyClassView(APIView):
             return Response({'error': 'Missing class or time'}, status=400)
 
         if op not in ['enroll', 'drop']:
-            return Response({'error': 'Invalid op'}, status=400)
+            return Response({'error': 'op must be either enroll or drop'}, status=400)
 
 
         if EnrollClass.check_enroll(user, classtime) and op == 'enroll':

commit ee3a8f150cd9df212ead2ab738a2d3ed4e2f0a2f
Merge: f12210b 11f7c6c
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Sat Nov 19 12:14:10 2022 -0500

    Merge pull request #27 from nathan-hansen/add-docs
    
    Add docs

commit 11f7c6c64e34daac2db7e24f1e32c6092da9ad2c
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 12:13:03 2022 -0500

    added initial docs pdf and swagger json

diff --git a/docs.pdf b/docs.pdf
new file mode 100644
index 0000000..162cf27
Binary files /dev/null and b/docs.pdf differ
diff --git a/swagger.json b/swagger.json
new file mode 100644
index 0000000..b031151
--- /dev/null
+++ b/swagger.json
@@ -0,0 +1 @@
+{"swagger": "2.0", "info": {"title": "CSC309 TFC Project Backend", "description": "Built by Letian Cheng, Nathan Hansen, Edward Leung", "version": "v1"}, "host": "localhost:8000", "schemes": ["http"], "basePath": "/", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Basic": {"type": "basic"}}, "security": [{"Basic": []}], "paths": {"/accounts/api/token/refresh/": {"post": {"operationId": "accounts_api_token_refresh_create", "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenRefresh"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenRefresh"}}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/login/": {"post": {"operationId": "accounts_login_create", "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenObtainPair"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenObtainPair"}}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/signup/": {"post": {"operationId": "accounts_signup_create", "description": "Allows a user to register on the website.", "parameters": [], "responses": {"201": {"description": ""}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/update/": {"put": {"operationId": "accounts_update_update", "description": "Allows a user to update their account details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Account"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Account"}}}, "tags": ["accounts"]}, "patch": {"operationId": "accounts_update_partial_update", "description": "Allows a user to update their account details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Account"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Account"}}}, "tags": ["accounts"]}, "parameters": []}, "/accounts/{account_id}/": {"get": {"operationId": "accounts_read", "description": "View a given account.", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Account"}}}, "tags": ["accounts"]}, "parameters": [{"name": "account_id", "in": "path", "required": true, "type": "string"}]}, "/classes/modify/": {"post": {"operationId": "classes_modify_create", "description": "Allows a user to enrol or drop a class.", "parameters": [], "responses": {"201": {"description": ""}}, "tags": ["classes"]}, "parameters": []}, "/classes/{studio_id}/schedule/": {"get": {"operationId": "classes_schedule_list", "description": "Allows a user to view their upcoming enrolled classes in chronological order.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/EnrollClass"}}}}, "tags": ["classes"]}, "parameters": [{"name": "studio_id", "in": "path", "required": true, "type": "string"}]}, "/classes/{studio_id}/upcoming/": {"get": {"operationId": "classes_upcoming_list", "description": "List upcoming classes in a given studio.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/ClassTimeTable"}}}}, "tags": ["classes"]}, "parameters": [{"name": "studio_id", "in": "path", "required": true, "type": "string"}]}, "/payments/add/": {"post": {"operationId": "payments_add_create", "description": "Allows a user to register their credit card details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PaymentInfo"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/PaymentInfo"}}}, "tags": ["payments"]}, "parameters": []}, "/payments/history/": {"get": {"operationId": "payments_history_list", "description": "Allows a user to view all their past payments on file.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/PaymentHistory"}}}}, "tags": ["payments"]}, "parameters": []}, "/payments/upcoming/": {"get": {"operationId": "payments_upcoming_list", "description": "Allows a user to view their next upcoming payment, the payment interval, and the end date of the recurrence.", "parameters": [], "responses": {"200": {"description": ""}}, "tags": ["payments"]}, "parameters": []}, "/payments/update/": {"put": {"operationId": "payments_update_update", "description": "Allows a user to alter their credit card details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PaymentInfo"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/PaymentInfo"}}}, "tags": ["payments"]}, "patch": {"operationId": "payments_update_partial_update", "description": "Allows a user to alter their credit card details.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PaymentInfo"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/PaymentInfo"}}}, "tags": ["payments"]}, "parameters": []}, "/studios/list/{latitude},{longitude}": {"get": {"operationId": "studios_list_read", "description": "List Studios by proximity, with optional search and filter capability via parameters.\nNeeds latitude and longitude values passed through the URL to operate.", "parameters": [{"name": "search", "in": "query", "description": "A search term.", "required": false, "type": "string"}], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/Studio"}}}}, "tags": ["studios"]}, "parameters": [{"name": "latitude", "in": "path", "required": true, "type": "string"}, {"name": "longitude", "in": "path", "required": true, "type": "string"}]}, "/studios/{studio}/": {"get": {"operationId": "studios_read", "description": "View Studio information given a Studio ID.", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Studio"}}}, "tags": ["studios"]}, "parameters": [{"name": "studio", "in": "path", "required": true, "type": "string"}]}, "/studios/{studio}/amenities/": {"get": {"operationId": "studios_amenities_list", "description": "View Amenities given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/Amenities"}}}}, "tags": ["studios"]}, "parameters": [{"name": "studio", "in": "path", "required": true, "type": "string"}]}, "/studios/{studio}/images/": {"get": {"operationId": "studios_images_list", "description": "View StudioImages given a Studio ID.\nIntended for use in tandem with StudioView\nfor a comprehensive look at a studio.", "parameters": [], "responses": {"200": {"description": "", "schema": {"type": "array", "items": {"$ref": "#/definitions/StudioImage"}}}}, "tags": ["studios"]}, "parameters": [{"name": "studio", "in": "path", "required": true, "type": "string"}]}, "/subscriptions/subscribe/": {"post": {"operationId": "subscriptions_subscribe_create", "description": "Allows a user to subscribe. Prerequisites:\n- This account does not have a subscription \n(or a previously cancelled subscription - in which case the UpdateView should instead be used.)\n- This account has registered payment information\n\nThis method creates:\n- a CurrentSubscription entry for this user\n- an entry in PaymentHistory logging this transaction", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CurrentSubscription"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/CurrentSubscription"}}}, "tags": ["subscriptions"]}, "parameters": []}, "/subscriptions/update/": {"put": {"operationId": "subscriptions_update_update", "description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is used.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CurrentSubscription"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/CurrentSubscription"}}}, "tags": ["subscriptions"]}, "patch": {"operationId": "subscriptions_update_partial_update", "description": "Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).\nIf a user changes to a non-null subscription plan, the newer expiry date is used.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CurrentSubscription"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/CurrentSubscription"}}}, "tags": ["subscriptions"]}, "parameters": []}}, "definitions": {"TokenRefresh": {"required": ["refresh"], "type": "object", "properties": {"refresh": {"title": "Refresh", "type": "string", "minLength": 1}, "access": {"title": "Access", "type": "string", "readOnly": true, "minLength": 1}}}, "TokenObtainPair": {"required": ["username", "password"], "type": "object", "properties": {"username": {"title": "Username", "type": "string", "minLength": 1}, "password": {"title": "Password", "type": "string", "minLength": 1}}}, "Account": {"required": ["username"], "type": "object", "properties": {"username": {"title": "Username", "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.", "type": "string", "pattern": "^[\\w.@+-]+$", "maxLength": 150, "minLength": 1}, "first_name": {"title": "First name", "type": "string", "maxLength": 150}, "last_name": {"title": "Last name", "type": "string", "maxLength": 150}, "email": {"title": "Email address", "type": "string", "format": "email", "maxLength": 254}, "avatar": {"title": "Avatar", "type": "string", "readOnly": true, "x-nullable": true, "format": "uri"}, "phone_number": {"title": "Phone number", "type": "string", "pattern": "^\\+?1?\\d{9,15}$", "maxLength": 250, "x-nullable": true}}}, "ClassTimeTable": {"required": ["time", "spotleft"], "type": "object", "properties": {"id": {"title": "ID", "type": "integer", "readOnly": true}, "time": {"title": "Time", "type": "string", "format": "date-time"}, "spotleft": {"title": "Spotleft", "type": "integer"}, "class_detail": {"title": "Class detail", "type": "string", "readOnly": true}}}, "EnrollClass": {"required": ["account", "classtime"], "type": "object", "properties": {"account": {"$ref": "#/definitions/Account"}, "classtime": {"$ref": "#/definitions/ClassTimeTable"}, "class_detail": {"title": "Class detail", "type": "string", "readOnly": true}}}, "PaymentInfo": {"required": ["name_on_card", "card_number", "cvv", "expiry_date"], "type": "object", "properties": {"account": {"title": "Account", "type": "string", "readOnly": true}, "name_on_card": {"title": "Name on card", "type": "string", "maxLength": 250, "minLength": 1}, "card_number": {"title": "Card number", "type": "string", "maxLength": 250, "minLength": 1}, "cvv": {"title": "Cvv", "type": "integer"}, "expiry_date": {"title": "Expiry date", "type": "string", "format": "date"}}}, "PaymentHistory": {"required": ["account", "timestamp", "amount", "card_number", "card_expiry"], "type": "object", "properties": {"account": {"title": "Account", "type": "string"}, "timestamp": {"title": "Timestamp", "type": "string", "format": "date-time"}, "amount": {"title": "Amount", "type": "number"}, "card_number": {"title": "Card number", "type": "string", "maxLength": 250, "minLength": 1}, "card_expiry": {"title": "Card expiry", "type": "string", "format": "date"}}}, "Studio": {"required": ["name", "address", "latitude", "longitude", "postal_code", "phone_number"], "type": "object", "properties": {"name": {"title": "Name", "type": "string", "maxLength": 250, "minLength": 1}, "address": {"title": "Address", "type": "string", "maxLength": 250, "minLength": 1}, "latitude": {"title": "Latitude", "type": "number"}, "longitude": {"title": "Longitude", "type": "number"}, "postal_code": {"title": "Postal code", "type": "string", "maxLength": 250, "minLength": 1}, "phone_number": {"title": "Phone number", "type": "string", "maxLength": 250, "minLength": 1}}}, "Amenities": {"required": ["studio", "amenity_type", "quantity"], "type": "object", "properties": {"studio": {"title": "Studio", "type": "integer"}, "amenity_type": {"title": "Amenity type", "type": "string", "maxLength": 250, "minLength": 1}, "quantity": {"title": "Quantity", "type": "integer"}}}, "StudioImage": {"required": ["studio"], "type": "object", "properties": {"studio": {"title": "Studio", "type": "integer"}, "image": {"title": "Image", "type": "string", "readOnly": true, "format": "uri"}}}, "CurrentSubscription": {"type": "object", "properties": {"account": {"title": "Account", "type": "string", "readOnly": true}, "plan": {"title": "Plan", "type": "integer", "x-nullable": true}, "expiration": {"title": "Expiration", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true}}}}}
\ No newline at end of file

commit 0562c0aff00ea66ad95b133a39ed25d971eb13ff
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 12:11:38 2022 -0500

    re-added geodjango

diff --git a/requirements.txt b/requirements.txt
index 9d37047..94b6d06 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -3,4 +3,5 @@ djangorestframework
 djangorestframework-simplejwt
 django-filter
 drf-yasg
+geopy
 Pillow

commit f12210b677dbb432b9946204778fca720eff4162
Merge: f12b527 4d614be
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 12:10:21 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit f12b527509fed1183ac5660798a19fa7f1399d59
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 12:10:16 2022 -0500

    removed unused import

diff --git a/studios/views.py b/studios/views.py
index 8123f9b..8e9a793 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -1,5 +1,4 @@
 from django.shortcuts import get_object_or_404
-from geopy.distance import geodesic
 from rest_framework import generics
 from rest_framework import filters
 from django_filters.rest_framework import DjangoFilterBackend

commit 4d614beea0c3caa4cf8775f1edd586fd75b83f4d
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 19 10:42:50 2022 -0500

    add pagination

diff --git a/TFC/settings.py b/TFC/settings.py
index 1ca5736..0bdf984 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -53,6 +53,8 @@ REST_FRAMEWORK = {
         'rest_framework.authentication.BasicAuthentication',
     ),
     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
+    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
+    'PAGE_SIZE': 100,
 }
 
 MIDDLEWARE = [

commit 3f10271b6fbc5cf820e9da34f71dc4800b2e3be2
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 01:13:40 2022 -0500

    replaced default schema details

diff --git a/TFC/urls.py b/TFC/urls.py
index fa99172..f16e21b 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -25,12 +25,9 @@ from drf_yasg import openapi
 # template from https://drf-yasg.readthedocs.io/en/stable/readme.html#quickstart
 schema_view = get_schema_view(
    openapi.Info(
-      title="Snippets API",
+      title="CSC309 TFC Project Backend",
       default_version='v1',
-      description="Test description",
-      terms_of_service="https://www.google.com/policies/terms/",
-      contact=openapi.Contact(email="contact@snippets.local"),
-      license=openapi.License(name="BSD License"),
+      description="Built by Letian Cheng, Nathan Hansen, Edward Leung",
    ),
    public=True,
    permission_classes=[permissions.AllowAny],

commit 7198547d45ef974cea852dac6000871418e73020
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 00:50:06 2022 -0500

    added initial docstrings for yasg docs

diff --git a/accounts/views.py b/accounts/views.py
index 5a56904..37f3417 100644
--- a/accounts/views.py
+++ b/accounts/views.py
@@ -11,6 +11,9 @@ from rest_framework import status
 
 # Create your views here.
 class SignUpView(APIView):
+    """
+    Allows a user to register on the website.
+    """
     # reference: https://thinkster.io/tutorials/django-json-api/authentication
     permission_classes = (AllowAny,)
     serializer_class = SignupSerializer
@@ -24,6 +27,9 @@ class SignUpView(APIView):
 
 
 class AccountView(RetrieveAPIView):
+    """
+    View a given account.
+    """
     serializer_class = AccountSerializer
 
     def get_object(self):
@@ -31,6 +37,9 @@ class AccountView(RetrieveAPIView):
 
 
 class AccountUpdateView(UpdateAPIView):
+    """
+    Allows a user to update their account details.
+    """
     permission_classes = [IsAuthenticated]
     # make sure user is logged in
     serializer_class = AccountSerializer
diff --git a/classes/views.py b/classes/views.py
index b352fe3..4db590c 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -12,8 +12,10 @@ from classes.serializers import ClassSerializer, ClassTimeTableSerializer, Enrol
 
 from accounts.models import Account
 
-# Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):
+    """
+    List upcoming classes in a given studio.
+    """
     serializer_class = ClassTimeTableSerializer
     search_fields = ['classid__name', 'classid__coach', 'classid__duration', 'time']
     filterset_fields = search_fields
@@ -26,6 +28,9 @@ class ListUpcomingClassView(generics.ListAPIView):
 
 
 class ListMyClassView(generics.ListAPIView):
+    """
+    Allows a user to view their upcoming enrolled classes in chronological order.
+    """
     permission_classes = (IsAuthenticated,)
     serializer_class = EnrollClassSerializer
 
@@ -37,6 +42,9 @@ class ListMyClassView(generics.ListAPIView):
 
 
 class ModifyClassView(APIView):
+    """
+    Allows a user to enrol or drop a class.
+    """
     permission_classes = (IsAuthenticated,)
 
     def post(self, request):
@@ -70,4 +78,4 @@ class ModifyClassView(APIView):
                 return Response({'error': 'Not enrolled'}, status=400)
             
             enroll_class.drop()
-            return Response({'message': 'Dropped'}, status=200)
\ No newline at end of file
+            return Response({'message': 'Dropped'}, status=200)
diff --git a/payments/views.py b/payments/views.py
index d18a0e3..ba6dbe9 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -14,6 +14,9 @@ import datetime
 
 
 class CreatePaymentInfoView(CreateAPIView):
+    """
+    Allows a user to register their credit card details.
+    """
     permission_classes = [IsAuthenticated]
     serializer_class = PaymentInfoSerializer
 
@@ -34,6 +37,9 @@ class CreatePaymentInfoView(CreateAPIView):
 
 
 class PaymentInfoUpdateView(UpdateAPIView):
+    """
+    Allows a user to alter their credit card details.
+    """
     permission_classes = [IsAuthenticated]
     # make sure user is logged in
     serializer_class = PaymentInfoSerializer
@@ -43,6 +49,9 @@ class PaymentInfoUpdateView(UpdateAPIView):
 
 
 class ListPaymentHistory(ListAPIView):
+    """
+    Allows a user to view all their past payments on file.
+    """
     permission_classes = [IsAuthenticated]
     serializer_class = PaymentHistorySerializer
 
@@ -54,6 +63,9 @@ class ListPaymentHistory(ListAPIView):
 
 
 class PaymentUpcomingView(APIView):
+    """
+    Allows a user to view their next upcoming payment, the payment interval, and the end date of the recurrence.
+    """
     permission_classes = [IsAuthenticated]
 
     def get(self, request):
diff --git a/studios/views.py b/studios/views.py
index 8e9a793..b30aaaa 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -11,6 +11,10 @@ from studios.models import Studio, StudioImage, Amenities
 
 # user authenticated views
 class ListStudioByProximityView(generics.ListAPIView):
+    """
+    List Studios by proximity, with optional search and filter capability via parameters.
+    Needs latitude and longitude values passed through the URL to operate.
+    """
     serializer_class = StudioSerializer
     filter_backends = [DjangoFilterBackend, filters.SearchFilter]
     filterset_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
@@ -38,6 +42,9 @@ class ListStudioByProximityView(generics.ListAPIView):
         return queryset
 
 class StudioView(generics.RetrieveAPIView):
+    """
+    View Studio information given a Studio ID.
+    """
     serializer_class = StudioSerializer
 
     def get_object(self):
@@ -45,11 +52,21 @@ class StudioView(generics.RetrieveAPIView):
 
 # views for related models
 class ListStudioImagesView(generics.ListAPIView):
+    """
+    View StudioImages given a Studio ID.
+    Intended for use in tandem with StudioView
+    for a comprehensive look at a studio.
+    """
     serializer_class = StudioImageSerializer
     def get_queryset(self):
         return StudioImage.objects.filter(studio=self.kwargs['studio'])
 
 class ListAmenitiesView(generics.ListAPIView):
+    """
+    View Amenities given a Studio ID.
+    Intended for use in tandem with StudioView
+    for a comprehensive look at a studio.
+    """
     serializer_class = AmenitiesSerializer
     def get_queryset(self):
         return Amenities.objects.filter(studio=self.kwargs['studio'])
diff --git a/subscriptions/views.py b/subscriptions/views.py
index efdcab4..bf2a8b9 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -15,6 +15,16 @@ import datetime
 
 
 class SubscribeView(generics.CreateAPIView):
+    """
+    Allows a user to subscribe. Prerequisites:
+    - This account does not have a subscription 
+    (or a previously cancelled subscription - in which case the UpdateView should instead be used.)
+    - This account has registered payment information
+    
+    This method creates:
+    - a CurrentSubscription entry for this user
+    - an entry in PaymentHistory logging this transaction
+    """
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
 
@@ -50,6 +60,10 @@ class SubscribeView(generics.CreateAPIView):
 
 
 class UpdateSubscriptionView(generics.UpdateAPIView):
+    """
+    Allows a user to change their subscription plan to either a) another existing plan, or b) null (a cancellation).
+    If a user changes to a non-null subscription plan, the newer expiry date is used.
+    """
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
 
@@ -60,18 +74,3 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
         # use current_account because we only want logged-in user to be able to edit their subscriptions
         return get_object_or_404(CurrentSubscription, account=current_account)
         # will return "Not found" if current subscription does not belong to user
-
-# update above handles cancellations by setting to null.
-# we can optionally reintro this later as a null-only update.
-# class CancelSubscriptionView(generics.UpdateAPIView):
-#     permission_classes = [IsAuthenticated]
-#     serializer_class = CurrentSubscriptionSerializer
-# 
-#     # def get_queryset(self):
-#     #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
-#     def get_object(self, **kwargs):
-#         current_account = get_object_or_404(Account, id=self.request.user.id)
-#         # use get object or 404 because we are updating specific current subscription with an id and account
-#         # use current_account because we only want logged in user to be able to edit their subscriptions
-#         return get_object_or_404(CurrentSubscription, account=current_account)
-#         # will return "Not found" if current subscription does not belong to user

commit 032133923f22111af2659b3412fda5ec2f4613ec
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 00:08:45 2022 -0500

    added source for yasg implementation

diff --git a/TFC/urls.py b/TFC/urls.py
index d30411f..fa99172 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -22,6 +22,7 @@ from drf_yasg.views import get_schema_view
 from drf_yasg import openapi
 
 
+# template from https://drf-yasg.readthedocs.io/en/stable/readme.html#quickstart
 schema_view = get_schema_view(
    openapi.Info(
       title="Snippets API",

commit 3a6d5fbe8592de67b1c9a57f1175c8fd1e4578b6
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sat Nov 19 00:05:19 2022 -0500

    added yasg

diff --git a/TFC/settings.py b/TFC/settings.py
index 1ca5736..56527cc 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -44,6 +44,7 @@ INSTALLED_APPS = [
     "payments",
     "subscriptions",
     "rest_framework",
+    "drf_yasg",
 ]
 
 REST_FRAMEWORK = {
diff --git a/TFC/urls.py b/TFC/urls.py
index 72a841a..d30411f 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -16,7 +16,24 @@ Including another URLconf
 from django.conf import settings
 from django.conf.urls.static import static
 from django.contrib import admin
-from django.urls import path, include
+from django.urls import path, include, re_path
+from rest_framework import permissions
+from drf_yasg.views import get_schema_view
+from drf_yasg import openapi
+
+
+schema_view = get_schema_view(
+   openapi.Info(
+      title="Snippets API",
+      default_version='v1',
+      description="Test description",
+      terms_of_service="https://www.google.com/policies/terms/",
+      contact=openapi.Contact(email="contact@snippets.local"),
+      license=openapi.License(name="BSD License"),
+   ),
+   public=True,
+   permission_classes=[permissions.AllowAny],
+)
 
 urlpatterns = [
     path("api-auth/", include("rest_framework.urls")),
@@ -26,6 +43,9 @@ urlpatterns = [
     path('classes/', include('classes.urls')),
     path('payments/', include('payments.urls')),
     path('subscriptions/', include('subscriptions.urls')),
+    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
+    re_path(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
+    re_path(r'^redoc/$', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
 ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
 # add media_URL and MEDIA_ROOT from settings for image urls to work properly
 

commit 55c36c3d131605cebded37792c21e99a325df07c
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 18 23:59:35 2022 -0500

    removed geopy, added yasg

diff --git a/requirements.txt b/requirements.txt
index ef2776f..9d37047 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -2,5 +2,5 @@ Django
 djangorestframework
 djangorestframework-simplejwt
 django-filter
-geopy
+drf-yasg
 Pillow
diff --git a/studios/views.py b/studios/views.py
index 8123f9b..8e9a793 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -1,5 +1,4 @@
 from django.shortcuts import get_object_or_404
-from geopy.distance import geodesic
 from rest_framework import generics
 from rest_framework import filters
 from django_filters.rest_framework import DjangoFilterBackend

commit 104b844966a4e6eaf9f2d73de1050fb02778efd3
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Fri Nov 18 23:46:20 2022 -0500

    Changed Upcoming Payment view to include interval and subscription expiry by modifying generate payment function, changed to "is not None" in said function.

diff --git a/generate_payments.py b/generate_payments.py
index d438cfc..c7bf903 100644
--- a/generate_payments.py
+++ b/generate_payments.py
@@ -16,8 +16,8 @@ def generate_payments_today():
     user_queryset = Account.objects.all()
     for user in user_queryset:
         # input the primary key or id of the account
-        response_data = generate_upcoming_payment(user.pk)
-        if response_data.get('account'):
+        response_data = generate_upcoming_payment(user.pk)[0]
+        if response_data.get('account') is not None:
             # should have returned PaymentHistory
             pay_time_str = response_data.get('timestamp')
             # convert datetime string in serialized object to datetime object
diff --git a/payments/functions.py b/payments/functions.py
index 194c3c8..ff07bf1 100644
--- a/payments/functions.py
+++ b/payments/functions.py
@@ -17,20 +17,20 @@ def generate_upcoming_payment(account_id: int):
     # check if user has a subscription or payment info
     # check if payment info with this user exists, if not, raise error
     if not PaymentInfo.objects.filter(account=current_account).exists():
-        return {'error': 'No upcoming payments, User has no payment info'}
+        return {'error': 'No upcoming payments, User has no payment info'}, None, None
     if not CurrentSubscription.objects.filter(account=current_account).exists():
-        return {'error': 'No upcoming payments, User is not subscribed'}
+        return {'error': 'No upcoming payments, User is not subscribed'}, None, None
     # get object or 404 should never trigger here, due to checks above
     current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
     # check if current subscription is expired
     # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
     timezone_info = current_subscription.expiration.tzinfo
     if current_subscription.expiration < datetime.datetime.now(timezone_info):
-        return {'error': 'No upcoming payments, subscription expired'}
+        return {'error': 'No upcoming payments, subscription expired'}, None, None
 
     # if current subscription is null, return accordingly
     if current_subscription.plan is None:
-        return {'error': 'You are not subscribed'}
+        return {'error': 'You are not subscribed'}, None, None
     # id of the plan should be stored in plan attribute
     current_plan_id = current_subscription.plan.id
     sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
@@ -60,4 +60,4 @@ def generate_upcoming_payment(account_id: int):
     upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
                                       card_number=card_number, card_expiry=card_expiry)
     upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
-    return upcoming_payment_data
+    return upcoming_payment_data, interval, current_subscription.expiration
diff --git a/payments/views.py b/payments/views.py
index d18a0e3..6decdfb 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -57,7 +57,13 @@ class PaymentUpcomingView(APIView):
     permission_classes = [IsAuthenticated]
 
     def get(self, request):
-        return_data = generate_upcoming_payment(self.request.user.id)
-        if return_data.get('error') is not None:
-            return Response(return_data, status=400)
+        payment_history_data, interval, end_payment = generate_upcoming_payment(self.request.user.id)
+        if payment_history_data.get('error') is not None:
+            return Response(payment_history_data, status=400)
+        # else create the return data
+        return_data = {"account": payment_history_data.get('account'),
+                       "timestamp": payment_history_data.get('timestamp'), "amount": payment_history_data.get('amount'),
+                       "card_number": payment_history_data.get('card_number'),
+                       "card_expiry": payment_history_data.get('card_expiry'), "recurrence": interval,
+                       "end_payment": end_payment}
         return Response(return_data, status=200)
diff --git a/subscriptions/views.py b/subscriptions/views.py
index efdcab4..f188f47 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -20,6 +20,7 @@ class SubscribeView(generics.CreateAPIView):
 
     # add validation logic to create
     # based off this: https://stackoverflow.com/q/45981835
+
     def create(self, request, *args, **kwargs):
         # add code to check if an account with this subscription already exists
         current_account_id = self.request.user.id
@@ -45,7 +46,8 @@ class SubscribeView(generics.CreateAPIView):
         amount = sub_plan.payment
         today = datetime.datetime.combine(datetime.datetime.today(),
                                           datetime.datetime.min.time())
-        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number, card_expiry=card_expiry)
+        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number,
+                                      card_expiry=card_expiry)
         return created_subscription
 
 

commit da011ae631652918b9b33dc06911763d6a93a4c5
Merge: 85093e3 885d235
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Fri Nov 18 22:46:20 2022 -0500

    Merge pull request #25 from nathan-hansen/studio-filter
    
    studio search/filter working

commit 885d235486edac98537d0970d34eaab4a879c5ae
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 18 20:42:22 2022 -0500

    studio search/filter tentatively working

diff --git a/studios/views.py b/studios/views.py
index 16b63cc..8123f9b 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -1,6 +1,8 @@
 from django.shortcuts import get_object_or_404
 from geopy.distance import geodesic
 from rest_framework import generics
+from rest_framework import filters
+from django_filters.rest_framework import DjangoFilterBackend
 from studios.serializers import (
         StudioSerializer, 
         StudioImageSerializer, 
@@ -11,11 +13,30 @@ from studios.models import Studio, StudioImage, Amenities
 # user authenticated views
 class ListStudioByProximityView(generics.ListAPIView):
     serializer_class = StudioSerializer
+    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
+    filterset_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
+    search_fields = ['name', 'amenities__amenity_type', 'tfc_class__name', 'tfc_class__coach']
     def get_queryset(self):
         lat = float(self.kwargs['latitude'])
         lon = float(self.kwargs['longitude'])
-        print(f'lat: {lat}, lon: {lon}')
-        return Studio.get_locations_nearby_coords(lat, lon)
+
+        queryset = Studio.get_locations_nearby_coords(lat, lon)
+
+        # search queries
+        # studio_name = self.request.query_params.get('studio_name')
+        # amenity = self.request.query_params.get('amenity')
+        # class_name = self.request.query_params.get('class_name')
+        # coach = self.request.query_params.get('coach')
+        # if studio_name is not None:
+        #     queryset = queryset.filter(name=studio_name)
+        # if amenity is not None:
+        #     # get amenity if exists
+        #     amenity_queryset = Amenities.objects.filter(amenity_type=amenity)
+
+
+
+
+        return queryset
 
 class StudioView(generics.RetrieveAPIView):
     serializer_class = StudioSerializer

commit 85093e3311f04f2e0ae3cfbabe0ff162d05d6819
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 18 20:29:28 2022 -0500

    test user subscribe

diff --git a/subscriptions/tests.py b/subscriptions/tests.py
index 7ce503c..38eafb4 100644
--- a/subscriptions/tests.py
+++ b/subscriptions/tests.py
@@ -1,3 +1,85 @@
-from django.test import TestCase
+from django.test import TestCase, Client
+
+import random
+
+from subscriptions.models import SubscriptionPlan, CurrentSubscription
+from accounts.models import Account
+from payments.models import PaymentInfo, PaymentHistory
 
 # Create your tests here.
+class SubscriptionTest(TestCase):
+
+    def setUp(self):
+        # register a user
+        self.user = Account.objects.create_user(
+            username="test_user",
+            email="test@test.com",
+            phone_number="+1234567890",
+            password="test_password",
+        )
+
+        # create a subscription
+        self.subscription = [
+            SubscriptionPlan.objects.create(
+                payment=random.randint(0, 100),
+                interval=i,
+            )
+            for i in ["yearly", "monthly", "weekly", "daily"]
+        ]
+
+    def test_create_subscription(self):
+        # create a subscription
+        subscription = SubscriptionPlan.objects.create(
+            payment=10.00,
+            interval=random.choice(["monthly", "yearly", "weekly", "daily"]),
+        )
+
+        # check if subscription is created
+        self.assertTrue(subscription)
+
+    def test_subscribe(self):
+        client = Client()
+        client.login(username=self.user.username, password="test_password")
+
+        # subscribe to a subscription
+        response = client.post(
+            "/subscriptions/subscribe/",
+            {
+                "plan": self.subscription[0].id,
+            },
+        )
+
+        # should fail because no payment info
+        self.assertEqual(response.status_code, 400)
+        self.assertEqual(response.json(), {"error": "User does not have Payment Info to subscribe"})
+        self.assertFalse(CurrentSubscription.objects.filter(account=self.user).exists())
+
+        # add payment info
+        response = client.post(
+            "/payments/add/",
+            {
+                "card_number": "1234567890123456",
+                "expiry_date": "2023-12-31",
+                "cvv": "123",
+                "name_on_card": "test",
+            },
+        )
+
+        print(response.json())
+        self.assertEqual(response.status_code, 201)
+        self.assertTrue(PaymentInfo.objects.filter(account=self.user).exists())
+
+        # subscribe to a subscription
+        response = client.post(
+            "/subscriptions/subscribe/",
+            {
+                "plan": self.subscription[0].id,
+            },
+        )
+
+        # should succeed
+        self.assertEqual(response.status_code, 201)
+        self.assertTrue(CurrentSubscription.objects.filter(account=self.user).exists())
+        
+
+        
\ No newline at end of file

commit d0e29f962de586c5a3e1fa38163fb26d895fb782
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 18 19:44:47 2022 -0500

    add two test for studio

diff --git a/studios/tests.py b/studios/tests.py
index 7ce503c..ecfaef2 100644
--- a/studios/tests.py
+++ b/studios/tests.py
@@ -1,3 +1,61 @@
-from django.test import TestCase
+from django.test import TestCase, Client
+from django.contrib.auth.models import User
+import random, geopy
+
+from studios.models import Studio, StudioImage, Amenities
 
 # Create your tests here.
+class StudioTest(TestCase):
+    studios = []
+
+    def create_user(self):
+        self.username = "test_admin"
+        self.password = User.objects.make_random_password()
+        user, created = User.objects.get_or_create(username=self.username)
+        user.set_password(self.password)
+        user.is_staff = True
+        user.is_superuser = True
+        user.is_active = True
+        user.save()
+        self.user = user
+
+    def setUp(self) -> None:
+        self.create_user()
+        self.studios = [
+            Studio.objects.create(
+                name="studio{}".format(i),
+                address="address{}".format(i),
+                latitude=random.uniform(-90, 90),
+                longitude=random.uniform(-180, 180),
+                postal_code="postal_code{}".format(i),
+                phone_number="1234567890",
+            )
+            for i in range(random.randint(0, 20))
+        ]
+
+    def test_list_studio_by_proximity(self):
+        c = Client()
+        c.login(username=self.username, password=self.password)
+        
+            
+        for i in range(20):
+            cood = (random.uniform(-90, 90), random.uniform(-180, 180))
+            response = c.get(
+                "/studios/list/{},{}".format(cood[0], cood[1])
+            )
+            self.assertEqual(response.status_code, 200)
+            self.assertEqual(len(response.data), len(self.studios))
+
+            distance_list = [
+                (geopy.distance.distance(
+                    (studio.latitude, studio.longitude), cood
+                ).km, studio)
+                for studio in self.studios
+            ]
+            distance_list.sort(key=lambda x: x[0])
+
+            # print(response.content)
+            for i in range(len(self.studios)):
+                self.assertEqual(response.data[i]["name"], distance_list[i][1].name)
+        
+

commit 3e40f7c08e8b2ede0f33639da28478ceeed55996
Merge: 32bb3e1 9fab4ef
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Fri Nov 18 19:29:15 2022 -0500

    Merge pull request #24 from nathan-hansen/python-shell-script
    
    Python shell script

commit 9fab4ef7a32a4aebd4097ab0652f07005311b0d7
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Fri Nov 18 19:04:22 2022 -0500

    Seperated function that calculates upcoming payment history to functions.py, fixed issue in upcoming payment view for 12th month, made a python script to charge upcoming payments due today.

diff --git a/generate_payments.py b/generate_payments.py
new file mode 100644
index 0000000..d438cfc
--- /dev/null
+++ b/generate_payments.py
@@ -0,0 +1,40 @@
+import os, django
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
+django.setup()
+from payments.functions import generate_upcoming_payment
+from payments.serializers import PaymentHistorySerializer
+from accounts.models import Account
+import datetime
+
+
+def main():
+    generate_payments_today()
+
+
+def generate_payments_today():
+    user_queryset = Account.objects.all()
+    for user in user_queryset:
+        # input the primary key or id of the account
+        response_data = generate_upcoming_payment(user.pk)
+        if response_data.get('account'):
+            # should have returned PaymentHistory
+            pay_time_str = response_data.get('timestamp')
+            # convert datetime string in serialized object to datetime object
+            # source: https://stackoverflow.com/a/13182163
+            pay_time = datetime.datetime.fromisoformat(pay_time_str)
+            # test_time = pay_time.replace(month=pay_time.month - 1)
+            # convert to a date object, just want year, month, day
+            pay_time_date = datetime.datetime.date(pay_time)
+            # in order to compare if payment is due today
+            # test_time = datetime.datetime.date(test_time)
+            if pay_time_date == datetime.date.today():  # check if payment time is today
+                # deserialize response data and save the PaymentHistory object
+                payment_history = PaymentHistorySerializer(data=response_data)
+                # check if deserialized is valid
+                if payment_history.is_valid():
+                    payment_history.save()
+
+
+if __name__ == '__main__':
+    main()
diff --git a/generate_payments.sh b/generate_payments.sh
new file mode 100644
index 0000000..7182764
--- /dev/null
+++ b/generate_payments.sh
@@ -0,0 +1,8 @@
+#! /bin/bash
+if [ $# -ne 0 ]
+then
+    echo "Usage: ./generate_payments.sh no arguments"
+    exit 1
+fi
+
+python3 generate_payments.py
\ No newline at end of file
diff --git a/payments/functions.py b/payments/functions.py
new file mode 100644
index 0000000..194c3c8
--- /dev/null
+++ b/payments/functions.py
@@ -0,0 +1,63 @@
+from subscriptions.models import SubscriptionPlan, CurrentSubscription
+from accounts.models import Account
+from django.utils import timezone
+from django.shortcuts import get_object_or_404
+from payments.models import PaymentInfo, PaymentHistory
+from payments.serializers import PaymentHistorySerializer
+from rest_framework.response import Response
+import datetime
+
+
+def generate_upcoming_payment(account_id: int):
+    """
+    Take in an account id and generate the serialized most recent Payment History
+    of that account from the database, or return an error.
+    """
+    current_account = get_object_or_404(Account, id=account_id)
+    # check if user has a subscription or payment info
+    # check if payment info with this user exists, if not, raise error
+    if not PaymentInfo.objects.filter(account=current_account).exists():
+        return {'error': 'No upcoming payments, User has no payment info'}
+    if not CurrentSubscription.objects.filter(account=current_account).exists():
+        return {'error': 'No upcoming payments, User is not subscribed'}
+    # get object or 404 should never trigger here, due to checks above
+    current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
+    # check if current subscription is expired
+    # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
+    timezone_info = current_subscription.expiration.tzinfo
+    if current_subscription.expiration < datetime.datetime.now(timezone_info):
+        return {'error': 'No upcoming payments, subscription expired'}
+
+    # if current subscription is null, return accordingly
+    if current_subscription.plan is None:
+        return {'error': 'You are not subscribed'}
+    # id of the plan should be stored in plan attribute
+    current_plan_id = current_subscription.plan.id
+    sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
+    amount = sub_plan.payment
+
+    # get the most recent past Payment and record payment info and time it was made
+    history_queryset = PaymentHistory.objects.filter(account=current_account).filter(
+        timestamp__lte=timezone.now())
+    most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
+    # user payment credentials
+    user_payment_info = PaymentInfo.objects.filter(account=current_account)[0]
+    card_number = user_payment_info.card_number
+    card_expiry = user_payment_info.expiry_date
+    # set the time attribute of future payment
+    most_recent_payment_time = most_recent_payment.timestamp
+    # calculate the date of the upcoming payment
+    interval = sub_plan.interval
+    future_time = None
+    if interval == "monthly":
+        if most_recent_payment_time.month == 12:
+            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1, month=1)
+        else:
+            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
+    elif interval == "yearly":
+        future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
+    # create PaymentHistory object for upcoming payment
+    upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
+                                      card_number=card_number, card_expiry=card_expiry)
+    upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
+    return upcoming_payment_data
diff --git a/payments/serializers.py b/payments/serializers.py
index 1b6d549..20655c7 100644
--- a/payments/serializers.py
+++ b/payments/serializers.py
@@ -27,4 +27,4 @@ class PaymentHistorySerializer(serializers.ModelSerializer):
 
     class Meta:
         model = PaymentHistory
-        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
+        fields = ['account', 'timestamp', 'amount', 'card_number', 'card_expiry']
diff --git a/payments/views.py b/payments/views.py
index d677d9f..d18a0e3 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -9,6 +9,7 @@ from accounts.models import Account
 from django.utils import timezone
 from django.shortcuts import get_object_or_404
 from rest_framework.response import Response
+from payments.functions import generate_upcoming_payment
 import datetime
 
 
@@ -56,49 +57,7 @@ class PaymentUpcomingView(APIView):
     permission_classes = [IsAuthenticated]
 
     def get(self, request):
-        current_account = get_object_or_404(Account, id=self.request.user.id)
-        # check if user has a subscription or payment info
-        # check if payment info with this user exists, if not, raise error
-        if not PaymentInfo.objects.filter(account=current_account).exists():
-            return Response({'error': 'No upcoming payments, User has no payment info'}, status=400)
-        if not CurrentSubscription.objects.filter(account=current_account).exists():
-            return Response({'error': 'No upcoming payments, User is not subscribed'}, status=400)
-        # get object or 404 should never trigger here, due to checks above
-        current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
-        # check if current subscription is expired
-        # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
-        timezone_info = current_subscription.expiration.tzinfo
-        if current_subscription.expiration < datetime.datetime.now(timezone_info):
-            return Response({'error': 'No upcoming payments, subscription expired'}, status=400)
-
-        # if current subscription is null, return accordingly
-        if current_subscription.plan is None:
-            return Response({'error': 'You are not subscribed'}, status=400)
-        # id of the plan should be stored in plan attribute
-        current_plan_id = current_subscription.plan.id
-        sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
-        amount = sub_plan.payment
-
-        # get the most recent past Payment and record payment info and time it was made
-        history_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(
-            timestamp__lte=timezone.now())
-        most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
-        # user payment credentials
-        user_payment_info = PaymentInfo.objects.filter(account=self.request.user)[0]
-        card_number = user_payment_info.card_number
-        card_expiry = user_payment_info.expiry_date
-        # set the time attribute of future payment
-        most_recent_payment_time = most_recent_payment.timestamp
-        # calculate the date of the upcoming payment
-        interval = sub_plan.interval
-        future_time = None
-        if interval == "monthly":
-            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
-        elif interval == "yearly":
-            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
-        # create PaymentHistory object for upcoming payment
-        upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
-                                          card_number=card_number, card_expiry=card_expiry)
-
-        upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
-        return Response(upcoming_payment_data, status=200)
+        return_data = generate_upcoming_payment(self.request.user.id)
+        if return_data.get('error') is not None:
+            return Response(return_data, status=400)
+        return Response(return_data, status=200)

commit ea9f62367eb71fca7e77b9cb344bd8df28daad58
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Fri Nov 18 15:22:29 2022 -0500

    delete migration files from repo

diff --git a/accounts/migrations/0002_alter_account_avatar.py b/accounts/migrations/0002_alter_account_avatar.py
deleted file mode 100644
index d5ba06a..0000000
--- a/accounts/migrations/0002_alter_account_avatar.py
+++ /dev/null
@@ -1,20 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-17 18:08
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("accounts", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="account",
-            name="avatar",
-            field=models.ImageField(
-                blank=True, null=True, upload_to="account_avatars/"
-            ),
-        ),
-    ]
diff --git a/subscriptions/migrations/0002_alter_subscriptionplan_interval.py b/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
deleted file mode 100644
index 39e7a70..0000000
--- a/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
+++ /dev/null
@@ -1,18 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-16 22:27
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("subscriptions", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="subscriptionplan",
-            name="interval",
-            field=models.CharField(max_length=16),
-        ),
-    ]
diff --git a/subscriptions/migrations/0003_remove_currentsubscription_studio.py b/subscriptions/migrations/0003_remove_currentsubscription_studio.py
deleted file mode 100644
index 27c83d8..0000000
--- a/subscriptions/migrations/0003_remove_currentsubscription_studio.py
+++ /dev/null
@@ -1,17 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-17 18:15
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("subscriptions", "0002_alter_subscriptionplan_interval"),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name="currentsubscription",
-            name="studio",
-        ),
-    ]
diff --git a/subscriptions/migrations/0004_alter_currentsubscription_account.py b/subscriptions/migrations/0004_alter_currentsubscription_account.py
deleted file mode 100644
index 9092a8f..0000000
--- a/subscriptions/migrations/0004_alter_currentsubscription_account.py
+++ /dev/null
@@ -1,25 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-17 18:31
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("accounts", "0002_alter_account_avatar"),
-        ("subscriptions", "0003_remove_currentsubscription_studio"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="currentsubscription",
-            name="account",
-            field=models.ForeignKey(
-                on_delete=django.db.models.deletion.CASCADE,
-                related_name="account_subscription",
-                to="accounts.account",
-                unique=True,
-            ),
-        ),
-    ]
diff --git a/subscriptions/migrations/0005_alter_currentsubscription_account.py b/subscriptions/migrations/0005_alter_currentsubscription_account.py
deleted file mode 100644
index d33aa4a..0000000
--- a/subscriptions/migrations/0005_alter_currentsubscription_account.py
+++ /dev/null
@@ -1,24 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-17 18:31
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("accounts", "0002_alter_account_avatar"),
-        ("subscriptions", "0004_alter_currentsubscription_account"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="currentsubscription",
-            name="account",
-            field=models.OneToOneField(
-                on_delete=django.db.models.deletion.CASCADE,
-                related_name="account_subscription",
-                to="accounts.account",
-            ),
-        ),
-    ]

commit 32bb3e1bc4d36833aba3e9613a552b7028dbbcb4
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 18 15:05:47 2022 -0500

    filter

diff --git a/TFC/settings.py b/TFC/settings.py
index 21354cf..1ca5736 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -37,6 +37,7 @@ INSTALLED_APPS = [
     "django.contrib.sessions",
     "django.contrib.messages",
     "django.contrib.staticfiles",
+    "django_filters",
     "accounts",
     "classes",
     "studios",
@@ -51,6 +52,7 @@ REST_FRAMEWORK = {
         'rest_framework.authentication.SessionAuthentication',
         'rest_framework.authentication.BasicAuthentication',
     ),
+    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
 }
 
 MIDDLEWARE = [
diff --git a/classes/tests.py b/classes/tests.py
index 375fba5..70ef6fe 100644
--- a/classes/tests.py
+++ b/classes/tests.py
@@ -33,7 +33,7 @@ class TestClasses(TestCase):
             studio=self.studio,
             name='fake class future {}'.format(i),
             description='fake description',
-            coach='fake coach',
+            coach='fake coach {}'.format(i),
             class_start=class_start,
             class_end=class_start + datetime.timedelta(days=random.randint(1, 60)),
             class_time=datetime.datetime.now().time(),
@@ -45,7 +45,7 @@ class TestClasses(TestCase):
             studio=self.studio,
             name='fake class middle {}'.format(i),
             description='fake description',
-            coach='fake coach',
+            coach='fake coach {}'.format(i),
             class_start=datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 50)),
             class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(7, 50)),
             class_time=datetime.datetime.now().time(),
@@ -59,7 +59,7 @@ class TestClasses(TestCase):
             studio=self.studio,
             name='fake class past {}'.format(i),
             description='fake description',
-            coach='fake coach',
+            coach='fake coach {}'.format(i),
             class_start=class_end - datetime.timedelta(days=random.randint(1, 100)),
             class_end=class_end,
             class_time=datetime.datetime.now().time(),
@@ -72,7 +72,7 @@ class TestClasses(TestCase):
             studio=self.studio,
             name='class enroll test',
             description='fake description',
-            coach='fake coach',
+            coach='fake coach {}'.format(1),
             class_start=datetime.datetime.now() + datetime.timedelta(days=random.randint(1, 30)),
             class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(40, 60)),
             class_time=datetime.datetime.now().time(),
@@ -99,6 +99,21 @@ class TestClasses(TestCase):
             filter(classid__in=Class.objects.filter(studio=self.studio)))
         )
 
+        # test if the response is sorted by time
+        for i in range(len(response_list) - 1):
+            self.assertTrue(response_list[i]['time'] <= response_list[i+1]['time'])
+        
+        # test filters
+        response = client.get(f'/classes/{self.studio.id}/upcoming/?classid__coach=fake%20coach%201')
+        self.assertEqual(response.status_code, 200)
+        response_list = json.loads(response.content.decode('utf-8'))
+        self.assertEqual(len(response_list), len(
+            ClassTimeTable.objects.filter(time__gte=timezone.now()).\
+            filter(spotleft__gt=0).\
+            filter(classid__in=Class.objects.filter(studio=self.studio).\
+            filter(coach='fake coach 1')))
+        )
+
 
     def test_enroll(self):
         self.SetUp()
diff --git a/classes/urls.py b/classes/urls.py
index beb9fcc..07179ba 100644
--- a/classes/urls.py
+++ b/classes/urls.py
@@ -9,8 +9,8 @@ from classes.views import (
 app_name = 'classes'
 
 urlpatterns = [
-    path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='upcoming'),
-    path('<int:studio_id>/schedule/', ListMyClassView.as_view(), name='schedule'),
-    path('modify/', ModifyClassView.as_view(), name='modify'),
+    path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='class-upcoming'),
+    path('<int:studio_id>/schedule/', ListMyClassView.as_view(), name='class-schedule'),
+    path('modify/', ModifyClassView.as_view(), name='class-modify'),
 ]
 
diff --git a/classes/views.py b/classes/views.py
index 2d293d6..b352fe3 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -4,6 +4,7 @@ from rest_framework import generics
 from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 from rest_framework.views import APIView
+import django_filters.rest_framework
 from django.db.models import Prefetch
 
 from classes.models import Class, ClassTimeTable, EnrollClass
@@ -14,6 +15,8 @@ from accounts.models import Account
 # Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):
     serializer_class = ClassTimeTableSerializer
+    search_fields = ['classid__name', 'classid__coach', 'classid__duration', 'time']
+    filterset_fields = search_fields
 
     def get_queryset(self):
         return ClassTimeTable.objects.filter(time__gte=timezone.now()).\
diff --git a/requirements.txt b/requirements.txt
index 77c9896..ef2776f 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,5 +1,6 @@
 Django
 djangorestframework
 djangorestframework-simplejwt
+django-filter
 geopy
 Pillow

commit b927ccfa9e5f619d5ea658b4c07b3f803a9df64e
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 18 14:04:23 2022 -0500

    fixed upcoming payment info

diff --git a/payments/views.py b/payments/views.py
index 23f508e..d677d9f 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -83,8 +83,10 @@ class PaymentUpcomingView(APIView):
         history_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(
             timestamp__lte=timezone.now())
         most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
-        card_number = most_recent_payment.card_number
-        card_expiry = most_recent_payment.card_expiry
+        # user payment credentials
+        user_payment_info = PaymentInfo.objects.filter(account=self.request.user)[0]
+        card_number = user_payment_info.card_number
+        card_expiry = user_payment_info.expiry_date
         # set the time attribute of future payment
         most_recent_payment_time = most_recent_payment.timestamp
         # calculate the date of the upcoming payment

commit 7ce037e0a36fbf355a9f962a38e0b3d6314e5605
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 18 13:56:53 2022 -0500

    added null subscription check

diff --git a/payments/views.py b/payments/views.py
index 58cae76..23f508e 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -71,6 +71,9 @@ class PaymentUpcomingView(APIView):
         if current_subscription.expiration < datetime.datetime.now(timezone_info):
             return Response({'error': 'No upcoming payments, subscription expired'}, status=400)
 
+        # if current subscription is null, return accordingly
+        if current_subscription.plan is None:
+            return Response({'error': 'You are not subscribed'}, status=400)
         # id of the plan should be stored in plan attribute
         current_plan_id = current_subscription.plan.id
         sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)

commit 69ea1f82d273f9e205b8205e2afdb2dabb3e0026
Merge: 48b36e9 b617847
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 18 13:35:45 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 48b36e939de93320398af9ef4bb70ba088fc64a5
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 18 13:35:34 2022 -0500

    folded subscriptions cancel into update

diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
index 29efbe2..c119fbd 100644
--- a/subscriptions/serializers.py
+++ b/subscriptions/serializers.py
@@ -58,7 +58,6 @@ class CurrentSubscriptionSerializer(ModelSerializer):
 
 
             except AttributeError:
-                data['expiration'] = None
                 return data
 
     # reference to override create method to pre-set attribute to logged-in user:
diff --git a/subscriptions/urls.py b/subscriptions/urls.py
index 048064a..ec70026 100644
--- a/subscriptions/urls.py
+++ b/subscriptions/urls.py
@@ -2,7 +2,7 @@ from django.urls import path
 from subscriptions.views import (
         SubscribeView,
         UpdateSubscriptionView,
-        CancelSubscriptionView,
+        # CancelSubscriptionView,
         )
 
 app_name = 'subscriptions'
@@ -10,6 +10,6 @@ app_name = 'subscriptions'
 urlpatterns = [
         path('subscribe/', SubscribeView.as_view()),
         path('update/', UpdateSubscriptionView.as_view()),
-        path('cancel/', CancelSubscriptionView.as_view()),
+        # path('cancel/', CancelSubscriptionView.as_view()),
 ]
 
diff --git a/subscriptions/views.py b/subscriptions/views.py
index 8318e80..efdcab4 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -61,16 +61,17 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
         return get_object_or_404(CurrentSubscription, account=current_account)
         # will return "Not found" if current subscription does not belong to user
 
-
-class CancelSubscriptionView(generics.DestroyAPIView):
-    permission_classes = [IsAuthenticated]
-    serializer_class = CurrentSubscriptionSerializer
-
-    # def get_queryset(self):
-    #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
-    def get_object(self, **kwargs):
-        current_account = get_object_or_404(Account, id=self.request.user.id)
-        # use get object or 404 because we are updating specific current subscription with an id and account
-        # use current_account because we only want logged in user to be able to edit their subscriptions
-        return get_object_or_404(CurrentSubscription, account=current_account)
-        # will return "Not found" if current subscription does not belong to user
+# update above handles cancellations by setting to null.
+# we can optionally reintro this later as a null-only update.
+# class CancelSubscriptionView(generics.UpdateAPIView):
+#     permission_classes = [IsAuthenticated]
+#     serializer_class = CurrentSubscriptionSerializer
+# 
+#     # def get_queryset(self):
+#     #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+#     def get_object(self, **kwargs):
+#         current_account = get_object_or_404(Account, id=self.request.user.id)
+#         # use get object or 404 because we are updating specific current subscription with an id and account
+#         # use current_account because we only want logged in user to be able to edit their subscriptions
+#         return get_object_or_404(CurrentSubscription, account=current_account)
+#         # will return "Not found" if current subscription does not belong to user

commit b617847bfb14fdb88f82cce53687c9f87dc4462b
Merge: 09b33ff 886932f
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 18 13:13:33 2022 -0500

    Merge pull request #22 from nathan-hansen/fix-class-filter
    
    Class functions with test

commit 09b33ffca034625d78b9140d248f8ab5573954b8
Merge: f428438 692d199
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Fri Nov 18 12:56:36 2022 -0500

    Merge pull request #23 from nathan-hansen/build-subscriptions
    
    Build subscriptions

commit 692d199d18515eb25e4ae1fdb37cd13721642ec9
Merge: bbd3d74 186b5ab
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Fri Nov 18 12:48:15 2022 -0500

    Merge pull request #21 from nathan-hansen/build-subscriptions-1
    
    fixed subscription expire date not being added, used duplicate code

commit 886932fe4f9a79b14d8a1f0e996c2663635d5a28
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 18 12:37:55 2022 -0500

    class history and schedule

diff --git a/classes/serializers.py b/classes/serializers.py
index 36489af..a6cdebe 100644
--- a/classes/serializers.py
+++ b/classes/serializers.py
@@ -14,7 +14,7 @@ class ClassSerializer(serializers.ModelSerializer):
     '''As the website admin, I can create/edit a class in a specific studio. 
     A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
     capacity, and times. '''
-    keywords = KeywordsSerializer(many=True, read_only=True)
+    keywords = KeywordsSerializer(many=True)
     # timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
 
     class Meta:
@@ -40,7 +40,12 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
 class EnrollClassSerializer(serializers.ModelSerializer):
     account = AccountSerializer()
     classtime = ClassTimeTableSerializer()
+    class_detail = serializers.SerializerMethodField()
 
     class Meta:
         model = EnrollClass
-        fields = ['account', 'classtime']
+        fields = ['account', 'classtime', 'class_detail']
+
+    def get_class_detail(self, obj):
+        class_id = obj.classtime.classid
+        return ClassSerializer(class_id).data
\ No newline at end of file
diff --git a/classes/tests.py b/classes/tests.py
index 505ca73..375fba5 100644
--- a/classes/tests.py
+++ b/classes/tests.py
@@ -99,6 +99,7 @@ class TestClasses(TestCase):
             filter(classid__in=Class.objects.filter(studio=self.studio)))
         )
 
+
     def test_enroll(self):
         self.SetUp()
 
@@ -179,3 +180,52 @@ class TestClasses(TestCase):
             self.assertEqual(response.status_code, 400)
             response = json.loads(response.content.decode('utf-8'))
             self.assertEqual(response['error'], 'Not enrolled')
+
+        # drop again as another user, should fail
+        Account.objects.create_user(username='test2', password='test')
+        client.login(username='test2', password='test')
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'drop'})
+            self.assertEqual(response.status_code, 400)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertEqual(response['error'], 'Not enrolled')
+
+    def test_class_history(self):
+        self.SetUp()
+
+        client = Client()
+        user1 = Account.objects.create_user(username='test1', password='test')
+        client.login(username='test1', password='test')
+
+        
+        total_list = []
+        # enroll past class
+        for class_ in self.class_past:
+            classtime_list = ClassTimeTable.objects.filter(classid=class_)
+            total_list += classtime_list
+            self.assertTrue(len(classtime_list) != 0)
+
+            for i in classtime_list:
+                response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
+                self.assertEqual(response.status_code, 200)
+                response = json.loads(response.content.decode('utf-8'))
+                self.assertTrue(response['message'] == 'Enrolled')
+
+        # enroll future class
+        for class_ in self.class_future:
+            classtime_list = ClassTimeTable.objects.filter(classid=class_)
+            total_list += classtime_list
+            self.assertTrue(len(classtime_list) != 0)
+
+            for i in classtime_list:
+                response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
+                self.assertEqual(response.status_code, 200)
+                response = json.loads(response.content.decode('utf-8'))
+                self.assertTrue(response['message'] == 'Enrolled')
+
+        # get history and schedule
+        response = client.get(f'/classes/{self.studio.id}/schedule/')
+        self.assertEqual(response.status_code, 200)
+        response = json.loads(response.content.decode('utf-8'))
+        
+        self.assertEqual(len(response), len(total_list))
\ No newline at end of file
diff --git a/classes/urls.py b/classes/urls.py
index 88e3db1..beb9fcc 100644
--- a/classes/urls.py
+++ b/classes/urls.py
@@ -10,7 +10,7 @@ app_name = 'classes'
 
 urlpatterns = [
     path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='upcoming'),
-    path('history/', ListMyClassView.as_view(), name='history'),
+    path('<int:studio_id>/schedule/', ListMyClassView.as_view(), name='schedule'),
     path('modify/', ModifyClassView.as_view(), name='modify'),
 ]
 
diff --git a/classes/views.py b/classes/views.py
index cbc1868..2d293d6 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -24,13 +24,13 @@ class ListUpcomingClassView(generics.ListAPIView):
 
 class ListMyClassView(generics.ListAPIView):
     permission_classes = (IsAuthenticated,)
-    serializer_class = ClassTimeTableSerializer
+    serializer_class = EnrollClassSerializer
 
     def get_queryset(self):
-        return ClassTimeTable.objects.filter(time__lt=timezone.now()).\
-            filter(classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
-            filter(enrollclass__in=EnrollClass.objects.filter(account=self.request.user)).\
-            order_by('-time')
+        # As a user, I want to see my class schedule and history in chronological order
+        return EnrollClass.objects.filter(account=self.request.user).\
+            filter(classtime__classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
+            order_by('classtime__time')
 
 
 class ModifyClassView(APIView):

commit afd51bbba7fea4884f8312960a8555792e9920fd
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 18 11:55:58 2022 -0500

    pass enroll test

diff --git a/classes/models.py b/classes/models.py
index 146b7e7..2c0510f 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -71,7 +71,18 @@ class ClassTimeTable(m.Model):
         return f'{self.classid.name} at {self.time}'
 
     def check_full(self):
-        return self.spotleft != 0
+        return self.spotleft == 0
+
+    def decrease_spot(self):
+        self.spotleft -= 1
+        self.save()
+        return self.spotleft
+
+    def increase_spot(self):
+        self.spotleft += 1
+        self.save()
+        return self.spotleft
+
 
 
 class EnrollClass(m.Model):
@@ -81,10 +92,23 @@ class EnrollClass(m.Model):
     def enroll(self, account: Account, classtime: ClassTimeTable):
         self.account = account
         self.classtime = classtime
+        if self.classtime.check_full():
+            return False
+
+        classtime.decrease_spot()
         self.save()
+        return True
+
+    def drop(self):
+        self.classtime.increase_spot()
+        self.delete()
+        return True
+
+    def check_enroll(account: Account, classtime: ClassTimeTable):
+        return EnrollClass.objects.filter(account=account, classtime=classtime).exists()
 
-    def check_enroll(self, account: Account, classtime: ClassTimeTable):
-        return self.objects.filter(account=account, classtime=classtime).exists()
+    def get_user_enroll(account: Account):
+        return EnrollClass.objects.filter(account=account)
 
-    def get_user_enroll(self, account: Account):
-        return self.objects.filter(account=account)
\ No newline at end of file
+    def get_class_enroll(classtime: ClassTimeTable):
+        return EnrollClass.objects.filter(classtime=classtime)
\ No newline at end of file
diff --git a/classes/serializers.py b/classes/serializers.py
index 5d8ea95..36489af 100644
--- a/classes/serializers.py
+++ b/classes/serializers.py
@@ -29,7 +29,7 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
 
     class Meta:
         model = ClassTimeTable
-        fields = ['time', 'spotleft', 'class_detail']
+        fields = ['id', 'time', 'spotleft', 'class_detail']
         # fields = ['class', 'time', 'spotleft']
 
     def get_class_detail(self, obj):
diff --git a/classes/tests.py b/classes/tests.py
index 25c0d34..505ca73 100644
--- a/classes/tests.py
+++ b/classes/tests.py
@@ -4,7 +4,9 @@ from django.utils import timezone
 from django.contrib.auth.models import User
 from django.test.client import Client
 from studios.models import Studio
-from classes.models import Class, ClassTimeTable, Keywords
+from classes.models import Class, ClassTimeTable, Keywords, EnrollClass
+
+from accounts.models import Account
 
 import random, datetime, json
 
@@ -14,6 +16,7 @@ class TestClasses(TestCase):
     studio = None
     class_past = [] # list of tuples of (Class, Keywords)
     class_future = []
+    class_enrolltest = Class
 
     def SetUp(self):
         self.studio = Studio.objects.create(
@@ -65,6 +68,19 @@ class TestClasses(TestCase):
             spots=random.randint(1, 20),
         ) for i in range(random.randint(1, 10))]
 
+        self.class_enrolltest = Class.objects.create(
+            studio=self.studio,
+            name='class enroll test',
+            description='fake description',
+            coach='fake coach',
+            class_start=datetime.datetime.now() + datetime.timedelta(days=random.randint(1, 30)),
+            class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(40, 60)),
+            class_time=datetime.datetime.now().time(),
+            duration=datetime.timedelta(minutes=random.randint(30, 120)),
+            days_inbetween=random.randint(1, 7),
+            spots=1,
+        )
+
 
     def test_classes_upcoming(self):
         self.SetUp()
@@ -87,12 +103,79 @@ class TestClasses(TestCase):
         self.SetUp()
 
         client = Client()
-        user = User.objects.create_user(username='test', password='test')
-        client.login(username='test', password='test')
-
-        # for i in self.class_future:
-
-
-
+        user1 = Account.objects.create_user(username='test1', password='test')
+        client.login(username='test1', password='test')
+
+        classtime_list = ClassTimeTable.objects.filter(classid=self.class_enrolltest)
+        self.assertTrue(len(classtime_list) != 0)
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
+            self.assertEqual(response.status_code, 200)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertTrue(response['message'] == 'Enrolled')
+
+        # check if the spotleft is 0
+        for i in classtime_list:
+            self.assertTrue(ClassTimeTable.objects.get(id=i.id).spotleft == 0)
+
+        # check if the user is enrolled
+        for i in classtime_list:
+            self.assertTrue(i in [j.classtime for j in EnrollClass.get_user_enroll(account=user1)])
+
+        # enroll again as the same user
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
+            self.assertEqual(response.status_code, 400)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertEqual(response['error'], 'Already enrolled')
+
+        # enroll again as another user, should fail
+        Account.objects.create_user(username='test2', password='test')
+        client.login(username='test2', password='test')
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
+            self.assertEqual(response.status_code, 400)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertEqual(response['error'], 'Class is full')
+
+
+    def test_drop(self):
+        self.SetUp()
 
-            
+        client = Client()
+        user1 = Account.objects.create_user(username='test1', password='test')
+        client.login(username='test1', password='test')
+
+        classtime_list = ClassTimeTable.objects.filter(classid=self.class_enrolltest)
+        self.assertTrue(len(classtime_list) != 0)
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'enroll'})
+            self.assertEqual(response.status_code, 200)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertTrue(response['message'] == 'Enrolled')
+
+        # check if the spotleft is 0
+        for i in classtime_list:
+            self.assertTrue(ClassTimeTable.objects.get(id=i.id).spotleft == 0)
+
+        # drop the class
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'drop'})
+            self.assertEqual(response.status_code, 200)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertTrue(response['message'] == 'Dropped')
+
+        # check if the spotleft is 1
+        for i in classtime_list:
+            self.assertTrue(ClassTimeTable.objects.get(id=i.id).spotleft == 1)
+
+        # check if the user is enrolled
+        for i in classtime_list:
+            self.assertTrue(i not in [j.classtime for j in EnrollClass.get_user_enroll(account=user1)])
+        
+        # drop again
+        for i in classtime_list:
+            response = client.post(f'/classes/modify/', {'timeid': i.id, 'op': 'drop'})
+            self.assertEqual(response.status_code, 400)
+            response = json.loads(response.content.decode('utf-8'))
+            self.assertEqual(response['error'], 'Not enrolled')
diff --git a/classes/views.py b/classes/views.py
index 102b7ba..cbc1868 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -9,6 +9,7 @@ from django.db.models import Prefetch
 from classes.models import Class, ClassTimeTable, EnrollClass
 from classes.serializers import ClassSerializer, ClassTimeTableSerializer, EnrollClassSerializer
 
+from accounts.models import Account
 
 # Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):
@@ -36,7 +37,7 @@ class ModifyClassView(APIView):
     permission_classes = (IsAuthenticated,)
 
     def post(self, request):
-        user = request.user
+        user = Account.objects.get(id=request.user.id)
         classtime = request.data.get('timeid')
         op = request.data.get('op')
 
@@ -46,10 +47,10 @@ class ModifyClassView(APIView):
         if op not in ['enroll', 'drop']:
             return Response({'error': 'Invalid op'}, status=400)
 
-        enroll_class = EnrollClass()
-        if enroll_class.check_enroll(user, classtime) and op == 'enroll':
+
+        if EnrollClass.check_enroll(user, classtime) and op == 'enroll':
             return Response({'error': 'Already enrolled'}, status=400)
-        elif not enroll_class.check_enroll(user, classtime) and op == 'drop':
+        elif not EnrollClass.check_enroll(user, classtime) and op == 'drop':
             return Response({'error': 'Not enrolled'}, status=400)
 
         classtime_ = get_object_or_404(ClassTimeTable, id=classtime)
@@ -57,8 +58,13 @@ class ModifyClassView(APIView):
             return Response({'error': 'Class is full'}, status=400)
 
         if op == 'enroll':
+            enroll_class = EnrollClass()
             enroll_class.enroll(user, classtime_)
             return Response({'message': 'Enrolled'}, status=200)
         elif op == 'drop':
-            enroll_class.drop(user, classtime_)
+            enroll_class = EnrollClass.objects.get(account=user, classtime=classtime_)
+            if not enroll_class:
+                return Response({'error': 'Not enrolled'}, status=400)
+            
+            enroll_class.drop()
             return Response({'message': 'Dropped'}, status=200)
\ No newline at end of file

commit 186b5abbecc38ba07d4a890f6fba3f668882dd52
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Fri Nov 18 01:10:24 2022 -0500

    fixed subscription expire date not being added, used duplicate code

diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
index 0d5c0ff..29efbe2 100644
--- a/subscriptions/serializers.py
+++ b/subscriptions/serializers.py
@@ -25,8 +25,9 @@ class CurrentSubscriptionSerializer(ModelSerializer):
         fields = [
             'account',
             'plan',
+            'expiration',
         ]
-        read_only_fields = ['account']
+        read_only_fields = ['account', 'expiration']
 
     def validate(self, data):
         super().validate(data)
@@ -65,5 +66,21 @@ class CurrentSubscriptionSerializer(ModelSerializer):
     def create(self, validated_data):
         current_account_id = self.context['request'].user.id
         current_account = get_object_or_404(Account, pk=current_account_id)
+        interval = SubscriptionPlan.objects.get(id=validated_data['plan'].pk).interval
+        today = datetime.datetime.combine(datetime.datetime.today(),
+                                          datetime.datetime.min.time())
+        if interval == 'yearly':
+            expiry = today.replace(year=today.year + 1, month=1, day=1)
+        elif interval == 'monthly':
+            if today.month == 12:
+                expiry = today.replace(year=today.year + 1, month=1, day=1)
+            else:
+                expiry = today.replace(month=today.month + 1, day=1)
+
+        elif interval == 'weekly':
+            pass
+
+        elif interval == 'daily':
+            pass
         return CurrentSubscription.objects.create(account=current_account, 
-                                                  plan=validated_data['plan'])
+                                                  plan=validated_data['plan'], expiration=expiry)

commit bbd3d743fe8d1b291f336c1c188836e26cea7a20
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Fri Nov 18 01:03:06 2022 -0500

    Added Upcoming payment view

diff --git a/payments/urls.py b/payments/urls.py
index dc29403..050f4ef 100644
--- a/payments/urls.py
+++ b/payments/urls.py
@@ -3,7 +3,7 @@ from payments.views import (
         CreatePaymentInfoView,
         PaymentInfoUpdateView,
         ListPaymentHistory,
-        ListPaymentUpcoming,
+        PaymentUpcomingView,
         )
 
 app_name = 'payments'
@@ -12,6 +12,6 @@ urlpatterns = [
         path('add/', CreatePaymentInfoView.as_view()),
         path('update/', PaymentInfoUpdateView.as_view()),
         path('history/', ListPaymentHistory.as_view()),
-        path('upcoming/', ListPaymentUpcoming.as_view()),
+        path('upcoming/', PaymentUpcomingView.as_view()),
 ]
 
diff --git a/payments/views.py b/payments/views.py
index c5b453b..58cae76 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -1,12 +1,15 @@
 from django.shortcuts import render
 from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
+from rest_framework.views import APIView
 from rest_framework.permissions import IsAuthenticated, AllowAny
 from payments.serializers import PaymentInfoSerializer, PaymentHistorySerializer
 from payments.models import PaymentInfo, PaymentHistory
+from subscriptions.models import SubscriptionPlan, CurrentSubscription
 from accounts.models import Account
 from django.utils import timezone
 from django.shortcuts import get_object_or_404
 from rest_framework.response import Response
+import datetime
 
 
 class CreatePaymentInfoView(CreateAPIView):
@@ -46,15 +49,51 @@ class ListPaymentHistory(ListAPIView):
         # first filter by payments of logged-in user, then filter for past payments
         user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__lte=timezone.now())
         # then order by most recent and return
-        return user_queryset.order_by('timestamp')
+        return user_queryset.order_by('-timestamp')
 
 
-class ListPaymentUpcoming(ListAPIView):
+class PaymentUpcomingView(APIView):
     permission_classes = [IsAuthenticated]
-    serializer_class = PaymentHistorySerializer
 
-    def get_queryset(self):
-        # first filter by payments of logged-in user, then filter for future payments
-        user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__gte=timezone.now())
-        # then order by most recent and return
-        return user_queryset.order_by('timestamp')
+    def get(self, request):
+        current_account = get_object_or_404(Account, id=self.request.user.id)
+        # check if user has a subscription or payment info
+        # check if payment info with this user exists, if not, raise error
+        if not PaymentInfo.objects.filter(account=current_account).exists():
+            return Response({'error': 'No upcoming payments, User has no payment info'}, status=400)
+        if not CurrentSubscription.objects.filter(account=current_account).exists():
+            return Response({'error': 'No upcoming payments, User is not subscribed'}, status=400)
+        # get object or 404 should never trigger here, due to checks above
+        current_subscription = get_object_or_404(CurrentSubscription, account=current_account)
+        # check if current subscription is expired
+        # current_subscription.expiration is timezone aware, so to compare it to datetime.now(), add timezone
+        timezone_info = current_subscription.expiration.tzinfo
+        if current_subscription.expiration < datetime.datetime.now(timezone_info):
+            return Response({'error': 'No upcoming payments, subscription expired'}, status=400)
+
+        # id of the plan should be stored in plan attribute
+        current_plan_id = current_subscription.plan.id
+        sub_plan = get_object_or_404(SubscriptionPlan, id=current_plan_id)
+        amount = sub_plan.payment
+
+        # get the most recent past Payment and record payment info and time it was made
+        history_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(
+            timestamp__lte=timezone.now())
+        most_recent_payment = history_queryset.distinct().order_by('-timestamp')[0]
+        card_number = most_recent_payment.card_number
+        card_expiry = most_recent_payment.card_expiry
+        # set the time attribute of future payment
+        most_recent_payment_time = most_recent_payment.timestamp
+        # calculate the date of the upcoming payment
+        interval = sub_plan.interval
+        future_time = None
+        if interval == "monthly":
+            future_time = most_recent_payment_time.replace(month=most_recent_payment_time.month + 1)
+        elif interval == "yearly":
+            future_time = most_recent_payment_time.replace(year=most_recent_payment_time.year + 1)
+        # create PaymentHistory object for upcoming payment
+        upcoming_payment = PaymentHistory(account=current_account, timestamp=future_time, amount=amount,
+                                          card_number=card_number, card_expiry=card_expiry)
+
+        upcoming_payment_data = PaymentHistorySerializer(upcoming_payment).data
+        return Response(upcoming_payment_data, status=200)

commit f428438d8cd059b90a4369cd49364be02ae5aee1
Merge: 75915b0 e9c7666
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Thu Nov 17 22:41:10 2022 -0500

    Merge pull request #20 from nathan-hansen/fix-class-filter
    
    Fix class filter

commit 1a33e21d58d05a826493c5121bf34f5c59c53228
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Thu Nov 17 20:33:36 2022 -0500

    Added enforcement in CreateAPiViews for subscription to only make subscription if user has payment info and create a paymentHistory object upon subscribing.

diff --git a/payments/admin.py b/payments/admin.py
index 8c38f3f..f3fa1fb 100644
--- a/payments/admin.py
+++ b/payments/admin.py
@@ -1,3 +1,5 @@
 from django.contrib import admin
+from payments.models import PaymentHistory
 
 # Register your models here.
+admin.site.register(PaymentHistory)
diff --git a/subscriptions/views.py b/subscriptions/views.py
index 7fd2db8..8318e80 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -2,14 +2,16 @@ from django.shortcuts import render
 from rest_framework import generics
 from rest_framework.permissions import IsAuthenticated
 from rest_framework import mixins
-from subscriptions.models import CurrentSubscription
+from subscriptions.models import CurrentSubscription, SubscriptionPlan
 from subscriptions.serializers import (
     SubscriptionPlanSerializer,
     CurrentSubscriptionSerializer,
 )
 from django.shortcuts import get_object_or_404
+from payments.models import PaymentInfo, PaymentHistory
 from accounts.models import Account
 from rest_framework.response import Response
+import datetime
 
 
 class SubscribeView(generics.CreateAPIView):
@@ -28,8 +30,23 @@ class SubscribeView(generics.CreateAPIView):
         # check if subscription with this account exists
         if CurrentSubscription.objects.filter(account=current_account).exists():
             return Response({'error': 'Subscription already exists for this user'}, status=400)
+        # check if payment info with this user exists, if not, raise error
+        if not PaymentInfo.objects.filter(account=current_account).exists():
+            return Response({'error': 'User does not have Payment Info to subscribe'}, status=400)
         # otherwise keep the existing create view api logic
-        return super(SubscribeView, self).create(request, *args, **kwargs)
+        created_subscription = super(SubscribeView, self).create(request, *args, **kwargs)
+
+        # Create Payment History
+        current_payment_info = get_object_or_404(PaymentInfo, account=current_account)
+        card_number = current_payment_info.card_number
+        card_expiry = current_payment_info.expiry_date
+        new_current_sub_plan_id = created_subscription.data.get('plan')
+        sub_plan = get_object_or_404(SubscriptionPlan, id=new_current_sub_plan_id)
+        amount = sub_plan.payment
+        today = datetime.datetime.combine(datetime.datetime.today(),
+                                          datetime.datetime.min.time())
+        PaymentHistory.objects.create(account=current_account, timestamp=today, amount=amount, card_number=card_number, card_expiry=card_expiry)
+        return created_subscription
 
 
 class UpdateSubscriptionView(generics.UpdateAPIView):

commit e9c7666cc73b507cad3f6a00dfab86fb5419ac63
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Thu Nov 17 17:14:00 2022 -0500

    list upcoming class!!

diff --git a/classes/serializers.py b/classes/serializers.py
index f286f6d..5d8ea95 100644
--- a/classes/serializers.py
+++ b/classes/serializers.py
@@ -10,26 +10,31 @@ class KeywordsSerializer(serializers.ModelSerializer):
         fields = ('id', 'keyword')
 
 
+class ClassSerializer(serializers.ModelSerializer):
+    '''As the website admin, I can create/edit a class in a specific studio. 
+    A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
+    capacity, and times. '''
+    keywords = KeywordsSerializer(many=True, read_only=True)
+    # timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
+
+    class Meta:
+        model = Class
+        fields = ['name', 'description', 'coach', 'keywords']
+
 class ClassTimeTableSerializer(serializers.ModelSerializer):
     ''' As a user, I want to see the class schedule of a specific studio on its page. 
     Classes must appear in the order of their start time (from now), and the class information must be shown. 
     Past or cancelled classes should not be listed.'''
+    class_detail = serializers.SerializerMethodField()
+
     class Meta:
         model = ClassTimeTable
-        fields = ['time', 'spotleft']
+        fields = ['time', 'spotleft', 'class_detail']
         # fields = ['class', 'time', 'spotleft']
 
+    def get_class_detail(self, obj):
+        return ClassSerializer(obj.classid).data
 
-class ClassSerializer(serializers.ModelSerializer):
-    '''As the website admin, I can create/edit a class in a specific studio. 
-    A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
-    capacity, and times. '''
-    keywords = KeywordsSerializer(many=True, read_only=True)
-    timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
-
-    class Meta:
-        model = Class
-        fields = ['name', 'description', 'coach', 'keywords', 'timetable']
 
 
 class EnrollClassSerializer(serializers.ModelSerializer):
diff --git a/classes/tests.py b/classes/tests.py
index 0830e80..25c0d34 100644
--- a/classes/tests.py
+++ b/classes/tests.py
@@ -1,4 +1,6 @@
 from django.test import TestCase
+from django.utils import timezone
+
 from django.contrib.auth.models import User
 from django.test.client import Client
 from studios.models import Studio
@@ -64,18 +66,33 @@ class TestClasses(TestCase):
         ) for i in range(random.randint(1, 10))]
 
 
-    def test_classes_list(self):
+    def test_classes_upcoming(self):
         self.SetUp()
 
         client = Client()
-        response = client.get('/classes/list/')
+        response = client.get(f'/classes/{self.studio.id}/upcoming/')
         self.assertEqual(response.status_code, 200)
         response_list = json.loads(response.content.decode('utf-8'))
-        print(response_list)
 
         for i in response_list:
-            print(i['name'])
-        print(self.class_future)
-        self.assertEqual(len(response_list), len(self.class_future))
+            self.assertTrue(i['time'] > datetime.datetime.now().strftime('%Y-%m-%d'))
+        
+        self.assertTrue(len(response_list) == len(
+            ClassTimeTable.objects.filter(time__gte=timezone.now()).\
+            filter(spotleft__gt=0).\
+            filter(classid__in=Class.objects.filter(studio=self.studio)))
+        )
+
+    def test_enroll(self):
+        self.SetUp()
+
+        client = Client()
+        user = User.objects.create_user(username='test', password='test')
+        client.login(username='test', password='test')
+
+        # for i in self.class_future:
+
+
+
 
             
diff --git a/classes/urls.py b/classes/urls.py
index ee719d6..88e3db1 100644
--- a/classes/urls.py
+++ b/classes/urls.py
@@ -9,7 +9,7 @@ from classes.views import (
 app_name = 'classes'
 
 urlpatterns = [
-    path('list/', ListUpcomingClassView.as_view(), name='list'),
+    path('<int:studio_id>/upcoming/', ListUpcomingClassView.as_view(), name='upcoming'),
     path('history/', ListMyClassView.as_view(), name='history'),
     path('modify/', ModifyClassView.as_view(), name='modify'),
 ]
diff --git a/classes/views.py b/classes/views.py
index d98fb17..102b7ba 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -12,27 +12,24 @@ from classes.serializers import ClassSerializer, ClassTimeTableSerializer, Enrol
 
 # Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):
-    serializer_class = ClassSerializer
+    serializer_class = ClassTimeTableSerializer
 
     def get_queryset(self):
-        # https://stackoverflow.com/questions/19223953/django-filtering-from-other-model
-        return Class.objects.prefetch_related(
-            Prefetch('timetable',
-            queryset=ClassTimeTable.objects.\
-                filter(time__gte=timezone.now()).\
-                filter(spotleft__gt=0).\
-                order_by('time'),
-            to_attr='timetable_upcoming')
-        )
+        return ClassTimeTable.objects.filter(time__gte=timezone.now()).\
+            filter(spotleft__gt=0).\
+            filter(classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
+            order_by('time')
 
 
 class ListMyClassView(generics.ListAPIView):
     permission_classes = (IsAuthenticated,)
-    serializer_class = ClassSerializer
+    serializer_class = ClassTimeTableSerializer
 
     def get_queryset(self):
-        return Class.objects. \
-            filter(timetable__enrollclass__account=self.request.user)
+        return ClassTimeTable.objects.filter(time__lt=timezone.now()).\
+            filter(classid__in=Class.objects.filter(studio=self.kwargs['studio_id'])).\
+            filter(enrollclass__in=EnrollClass.objects.filter(account=self.request.user)).\
+            order_by('-time')
 
 
 class ModifyClassView(APIView):

commit b5bebb8c314d609a459d92406a75177e6a0240a3
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Thu Nov 17 16:50:20 2022 -0500

    Added enforcement in CreateAPiViews to have one PaymentInfo and one CurrentSubscription per Account.

diff --git a/payments/views.py b/payments/views.py
index 8e0e4f3..c5b453b 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -3,14 +3,31 @@ from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView,
 from rest_framework.permissions import IsAuthenticated, AllowAny
 from payments.serializers import PaymentInfoSerializer, PaymentHistorySerializer
 from payments.models import PaymentInfo, PaymentHistory
+from accounts.models import Account
 from django.utils import timezone
 from django.shortcuts import get_object_or_404
+from rest_framework.response import Response
 
 
 class CreatePaymentInfoView(CreateAPIView):
     permission_classes = [IsAuthenticated]
     serializer_class = PaymentInfoSerializer
 
+    # add validation logic to create
+    # based off this: https://stackoverflow.com/q/45981835
+    def create(self, request, *args, **kwargs):
+        # add code to check if an account with this subscription already exists
+        current_account_id = self.request.user.id
+        current_account = get_object_or_404(Account, pk=current_account_id)
+        # it shouldn't ever 404 here because this is an authenticated view
+        # maybe we should add a check here?
+
+        # check if subscription with this account exists
+        if PaymentInfo.objects.filter(account=current_account).exists():
+            return Response({'error': 'Payment Info already exists for this user'}, status=400)
+        # otherwise keep the existing create view api logic
+        return super(CreatePaymentInfoView, self).create(request, *args, **kwargs)
+
 
 class PaymentInfoUpdateView(UpdateAPIView):
     permission_classes = [IsAuthenticated]
diff --git a/subscriptions/views.py b/subscriptions/views.py
index e198e94..7fd2db8 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -9,12 +9,28 @@ from subscriptions.serializers import (
 )
 from django.shortcuts import get_object_or_404
 from accounts.models import Account
+from rest_framework.response import Response
 
 
 class SubscribeView(generics.CreateAPIView):
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
 
+    # add validation logic to create
+    # based off this: https://stackoverflow.com/q/45981835
+    def create(self, request, *args, **kwargs):
+        # add code to check if an account with this subscription already exists
+        current_account_id = self.request.user.id
+        current_account = get_object_or_404(Account, pk=current_account_id)
+        # it shouldn't ever 404 here because this is an authenticated view
+        # maybe we should add a check here?
+
+        # check if subscription with this account exists
+        if CurrentSubscription.objects.filter(account=current_account).exists():
+            return Response({'error': 'Subscription already exists for this user'}, status=400)
+        # otherwise keep the existing create view api logic
+        return super(SubscribeView, self).create(request, *args, **kwargs)
+
 
 class UpdateSubscriptionView(generics.UpdateAPIView):
     permission_classes = [IsAuthenticated]

commit 0154269e662a8d354adf9859ac9eaca18797bbe6
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Thu Nov 17 16:32:20 2022 -0500

    somewhat working; class with valid timetable

diff --git a/accounts/tests.py b/accounts/tests.py
index 10b82a2..0a808d6 100644
--- a/accounts/tests.py
+++ b/accounts/tests.py
@@ -1,6 +1,8 @@
-from django.test import TestCase
 import random
 
+from django.test import TestCase
+
+
 # Create your tests here.
 class AccountTestCase(TestCase):
     username = 'test' + str(random.randint(1, 100000))
@@ -75,21 +77,6 @@ class AccountTestCase(TestCase):
         self.assertTrue('access' in response.data)
         self.assertTrue(response.data['access'] != refresh_token)
 
-    def test_logout(self):
-        self.register_and_sign_in()
-        # without refresh token
-        response = self.client.post('/accounts/logout/')
-        self.assertEqual(response.status_code, 401)
-
-        # successful logout
-        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
-        self.assertEqual(response.status_code, 200)
-        refresh_token = response.data['refresh']
-        response = self.client.post('/accounts/logout/', {'refresh': refresh_token})
-        self.assertEqual(response.status_code, 205)
-        # refresh token is no longer valid
-        response = self.client.post('/accounts/api/token/refresh/', {'refresh': refresh_token})
-        self.assertEqual(response.status_code, 401)
 
     def test_update(self):
         self.register_and_sign_in()
diff --git a/classes/models.py b/classes/models.py
index 5c143ff..146b7e7 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -1,8 +1,10 @@
+from django.core.exceptions import ValidationError
 import datetime
 
 from django.db import models as m
 
 from accounts.models import Account
+from django.utils.timezone import make_aware
 
 
 class Class(m.Model):
@@ -17,6 +19,15 @@ class Class(m.Model):
     days_inbetween = m.IntegerField()
     spots = m.IntegerField()
 
+    def __str__(self) -> str:
+        return self.name
+
+    def clean(self):
+        if self.class_start > self.class_end:
+            raise ValidationError('Class start date cannot be later than class end date')
+
+        return super().clean()
+
     def save(self, *args, **kwargs):
         super().save(*args, **kwargs)
         self.set_time()
@@ -29,11 +40,10 @@ class Class(m.Model):
         while time_i <= datetime.datetime.combine(self.class_end, self.class_time):
             ClassTimeTable.objects.create(
                 classid=self,
-                time=time_i,
+                time=make_aware(time_i),
                 spotleft=self.spots,
             )
             time_i += datetime.timedelta(days=self.days_inbetween)
-            print("time_i: {}".format(time_i))
 
         return
 
@@ -57,6 +67,9 @@ class ClassTimeTable(m.Model):
     time = m.DateTimeField()
     spotleft = m.IntegerField()
 
+    def __str__(self) -> str:
+        return f'{self.classid.name} at {self.time}'
+
     def check_full(self):
         return self.spotleft != 0
 
diff --git a/classes/serializers.py b/classes/serializers.py
index bd28ea5..f286f6d 100644
--- a/classes/serializers.py
+++ b/classes/serializers.py
@@ -17,6 +17,7 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
     class Meta:
         model = ClassTimeTable
         fields = ['time', 'spotleft']
+        # fields = ['class', 'time', 'spotleft']
 
 
 class ClassSerializer(serializers.ModelSerializer):
@@ -24,7 +25,7 @@ class ClassSerializer(serializers.ModelSerializer):
     A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
     capacity, and times. '''
     keywords = KeywordsSerializer(many=True, read_only=True)
-    timetable = ClassTimeTableSerializer(many=True, read_only=True)
+    timetable = ClassTimeTableSerializer(source='timetable_upcoming',many=True, read_only=True)
 
     class Meta:
         model = Class
diff --git a/classes/tests.py b/classes/tests.py
index 7ce503c..0830e80 100644
--- a/classes/tests.py
+++ b/classes/tests.py
@@ -1,3 +1,81 @@
 from django.test import TestCase
+from django.contrib.auth.models import User
+from django.test.client import Client
+from studios.models import Studio
+from classes.models import Class, ClassTimeTable, Keywords
+
+import random, datetime, json
+
 
 # Create your tests here.
+class TestClasses(TestCase):
+    studio = None
+    class_past = [] # list of tuples of (Class, Keywords)
+    class_future = []
+
+    def SetUp(self):
+        self.studio = Studio.objects.create(
+            name='fake studio',
+            address='fake address',
+            latitude=43.6532,
+            longitude=-79.3832,
+            postal_code='M5V 2T6',
+            phone_number='1234567890',
+        )
+
+        class_start = datetime.datetime.now() + datetime.timedelta(days=random.randint(1, 50))
+        self.class_future = [Class.objects.create(
+            studio=self.studio,
+            name='fake class future {}'.format(i),
+            description='fake description',
+            coach='fake coach',
+            class_start=class_start,
+            class_end=class_start + datetime.timedelta(days=random.randint(1, 60)),
+            class_time=datetime.datetime.now().time(),
+            duration=datetime.timedelta(minutes=random.randint(30, 120)),
+            days_inbetween=random.randint(1, 7),
+            spots=random.randint(1, 20),
+        ) for i in range(random.randint(1, 10))]  + \
+        [Class.objects.create(
+            studio=self.studio,
+            name='fake class middle {}'.format(i),
+            description='fake description',
+            coach='fake coach',
+            class_start=datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 50)),
+            class_end=datetime.datetime.now() + datetime.timedelta(days=random.randint(7, 50)),
+            class_time=datetime.datetime.now().time(),
+            duration=datetime.timedelta(minutes=random.randint(30, 120)),
+            days_inbetween=random.randint(1, 7),
+            spots=random.randint(1, 20),
+        ) for i in range(random.randint(1, 10))]
+
+        class_end = datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 30))
+        self.class_past = [Class.objects.create(
+            studio=self.studio,
+            name='fake class past {}'.format(i),
+            description='fake description',
+            coach='fake coach',
+            class_start=class_end - datetime.timedelta(days=random.randint(1, 100)),
+            class_end=class_end,
+            class_time=datetime.datetime.now().time(),
+            duration=datetime.timedelta(minutes=random.randint(30, 120)),
+            days_inbetween=random.randint(1, 7),
+            spots=random.randint(1, 20),
+        ) for i in range(random.randint(1, 10))]
+
+
+    def test_classes_list(self):
+        self.SetUp()
+
+        client = Client()
+        response = client.get('/classes/list/')
+        self.assertEqual(response.status_code, 200)
+        response_list = json.loads(response.content.decode('utf-8'))
+        print(response_list)
+
+        for i in response_list:
+            print(i['name'])
+        print(self.class_future)
+        self.assertEqual(len(response_list), len(self.class_future))
+
+            
diff --git a/classes/views.py b/classes/views.py
index eb93e24..d98fb17 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -4,9 +4,10 @@ from rest_framework import generics
 from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 from rest_framework.views import APIView
+from django.db.models import Prefetch
 
 from classes.models import Class, ClassTimeTable, EnrollClass
-from classes.serializers import ClassSerializer
+from classes.serializers import ClassSerializer, ClassTimeTableSerializer, EnrollClassSerializer
 
 
 # Create your views here.
@@ -15,10 +16,15 @@ class ListUpcomingClassView(generics.ListAPIView):
 
     def get_queryset(self):
         # https://stackoverflow.com/questions/19223953/django-filtering-from-other-model
-        return Class.objects. \
-            filter(timetable__spotleft__gte=1). \
-            filter(timetable__time__gte=timezone.now()). \
-                distinct().order_by('timetable__time')
+        return Class.objects.prefetch_related(
+            Prefetch('timetable',
+            queryset=ClassTimeTable.objects.\
+                filter(time__gte=timezone.now()).\
+                filter(spotleft__gt=0).\
+                order_by('time'),
+            to_attr='timetable_upcoming')
+        )
+
 
 class ListMyClassView(generics.ListAPIView):
     permission_classes = (IsAuthenticated,)

commit 2e9312375291ea2e45fc4449b0fb4d0f4740546a
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Thu Nov 17 14:36:45 2022 -0500

    one to one subscriptions

diff --git a/.gitignore b/.gitignore
index dd0b9c0..18117f7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,4 +2,4 @@ __pycache__/
 db.sqlite3
 env/
 images/studios/*
-images/avatars/*
+images/account_avatars/*
diff --git a/accounts/migrations/0002_alter_account_avatar.py b/accounts/migrations/0002_alter_account_avatar.py
new file mode 100644
index 0000000..d5ba06a
--- /dev/null
+++ b/accounts/migrations/0002_alter_account_avatar.py
@@ -0,0 +1,20 @@
+# Generated by Django 4.1.3 on 2022-11-17 18:08
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("accounts", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="account",
+            name="avatar",
+            field=models.ImageField(
+                blank=True, null=True, upload_to="account_avatars/"
+            ),
+        ),
+    ]
diff --git a/subscriptions/migrations/0003_remove_currentsubscription_studio.py b/subscriptions/migrations/0003_remove_currentsubscription_studio.py
new file mode 100644
index 0000000..27c83d8
--- /dev/null
+++ b/subscriptions/migrations/0003_remove_currentsubscription_studio.py
@@ -0,0 +1,17 @@
+# Generated by Django 4.1.3 on 2022-11-17 18:15
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("subscriptions", "0002_alter_subscriptionplan_interval"),
+    ]
+
+    operations = [
+        migrations.RemoveField(
+            model_name="currentsubscription",
+            name="studio",
+        ),
+    ]
diff --git a/subscriptions/migrations/0004_alter_currentsubscription_account.py b/subscriptions/migrations/0004_alter_currentsubscription_account.py
new file mode 100644
index 0000000..9092a8f
--- /dev/null
+++ b/subscriptions/migrations/0004_alter_currentsubscription_account.py
@@ -0,0 +1,25 @@
+# Generated by Django 4.1.3 on 2022-11-17 18:31
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("accounts", "0002_alter_account_avatar"),
+        ("subscriptions", "0003_remove_currentsubscription_studio"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="currentsubscription",
+            name="account",
+            field=models.ForeignKey(
+                on_delete=django.db.models.deletion.CASCADE,
+                related_name="account_subscription",
+                to="accounts.account",
+                unique=True,
+            ),
+        ),
+    ]
diff --git a/subscriptions/migrations/0005_alter_currentsubscription_account.py b/subscriptions/migrations/0005_alter_currentsubscription_account.py
new file mode 100644
index 0000000..d33aa4a
--- /dev/null
+++ b/subscriptions/migrations/0005_alter_currentsubscription_account.py
@@ -0,0 +1,24 @@
+# Generated by Django 4.1.3 on 2022-11-17 18:31
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("accounts", "0002_alter_account_avatar"),
+        ("subscriptions", "0004_alter_currentsubscription_account"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="currentsubscription",
+            name="account",
+            field=models.OneToOneField(
+                on_delete=django.db.models.deletion.CASCADE,
+                related_name="account_subscription",
+                to="accounts.account",
+            ),
+        ),
+    ]
diff --git a/subscriptions/models.py b/subscriptions/models.py
index 0489162..1d77be6 100644
--- a/subscriptions/models.py
+++ b/subscriptions/models.py
@@ -1,13 +1,12 @@
 from django.db import models as m
-
+from rest_framework.validators import UniqueValidator
 
 class SubscriptionPlan(m.Model):
     payment = m.DecimalField(decimal_places=2, max_digits=12)
     interval = m.CharField(max_length=16)
 
 class CurrentSubscription(m.Model):
-    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
-    studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='studio_subscription')
+    account = m.OneToOneField('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription') 
     plan = m.ForeignKey('SubscriptionPlan', on_delete=m.CASCADE, null=True, blank=True, related_name='current_plan')
     expiration = m.DateTimeField(null=True, blank=True)
 
diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
index 9cb57ad..0d5c0ff 100644
--- a/subscriptions/serializers.py
+++ b/subscriptions/serializers.py
@@ -1,4 +1,5 @@
 from rest_framework.serializers import ModelSerializer, ValidationError
+from rest_framework.validators import UniqueValidator
 from subscriptions.models import SubscriptionPlan, CurrentSubscription
 from payments.serializers import PaymentInfoSerializer
 from accounts.serializers import AccountSerializer
@@ -23,7 +24,6 @@ class CurrentSubscriptionSerializer(ModelSerializer):
         model = CurrentSubscription
         fields = [
             'account',
-            'studio',
             'plan',
         ]
         read_only_fields = ['account']
@@ -65,10 +65,5 @@ class CurrentSubscriptionSerializer(ModelSerializer):
     def create(self, validated_data):
         current_account_id = self.context['request'].user.id
         current_account = get_object_or_404(Account, pk=current_account_id)
-        return CurrentSubscription.objects.create(account=current_account, studio=validated_data['studio'],
+        return CurrentSubscription.objects.create(account=current_account, 
                                                   plan=validated_data['plan'])
-
-
-class CreateUserSubscriptionSerializer(ModelSerializer):
-    payment_info = PaymentInfoSerializer
-    fields = []
diff --git a/subscriptions/urls.py b/subscriptions/urls.py
index 437af5b..048064a 100644
--- a/subscriptions/urls.py
+++ b/subscriptions/urls.py
@@ -9,7 +9,7 @@ app_name = 'subscriptions'
 
 urlpatterns = [
         path('subscribe/', SubscribeView.as_view()),
-        path('<int:pk>/update/<int:subscription>/', UpdateSubscriptionView.as_view()),
-        path('<int:pk>/cancel/<int:subscription>/', CancelSubscriptionView.as_view()),
+        path('update/', UpdateSubscriptionView.as_view()),
+        path('cancel/', CancelSubscriptionView.as_view()),
 ]
 
diff --git a/subscriptions/views.py b/subscriptions/views.py
index 3bd5960..e198e94 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -25,7 +25,7 @@ class UpdateSubscriptionView(generics.UpdateAPIView):
         current_account = get_object_or_404(Account, id=self.request.user.id)
         # use get object or 404 because we are updating specific current subscription with an id and account
         # use current_account because we only want logged-in user to be able to edit their subscriptions
-        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
+        return get_object_or_404(CurrentSubscription, account=current_account)
         # will return "Not found" if current subscription does not belong to user
 
 
@@ -39,5 +39,5 @@ class CancelSubscriptionView(generics.DestroyAPIView):
         current_account = get_object_or_404(Account, id=self.request.user.id)
         # use get object or 404 because we are updating specific current subscription with an id and account
         # use current_account because we only want logged in user to be able to edit their subscriptions
-        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
+        return get_object_or_404(CurrentSubscription, account=current_account)
         # will return "Not found" if current subscription does not belong to user

commit 75915b0cafe00901fa2a0338f4ef6a1f4430be5f
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Thu Nov 17 13:11:00 2022 -0500

    add account test

diff --git a/accounts/tests.py b/accounts/tests.py
index 7ce503c..10b82a2 100644
--- a/accounts/tests.py
+++ b/accounts/tests.py
@@ -1,3 +1,123 @@
 from django.test import TestCase
+import random
 
 # Create your tests here.
+class AccountTestCase(TestCase):
+    username = 'test' + str(random.randint(1, 100000))
+    password = '123'
+
+    def register_and_sign_in(self):
+        response = self.client.post('/accounts/signup/', {'username': self.username, 'password': self.password, 'password2': self.password})
+        self.assertEqual(response.status_code, 201)
+        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
+        self.assertEqual(response.status_code, 200)
+
+    def test_signup(self):
+        # without any data
+        response = self.client.post('/accounts/signup/')
+        self.assertEqual(response.status_code, 400)
+        # without username
+        response = self.client.post('/accounts/signup/', {'password': '123', 'password2': '123'})
+        self.assertEqual(response.status_code, 400)
+        # without password
+        response = self.client.post('/accounts/signup/', {'username': 'test', 'password2': '123'})
+        self.assertEqual(response.status_code, 400)
+        # without password2
+        response = self.client.post('/accounts/signup/', {'username': 'test', 'password': '123'})
+        self.assertEqual(response.status_code, 400)
+        # password and password2 do not match
+        response = self.client.post('/accounts/signup/', {'username': 'test', 'password': '123', 'password2': '1234'})
+        self.assertEqual(response.status_code, 400)
+        
+        # successful signup
+        response = self.client.post('/accounts/signup/', {'username': self.username, 'password': self.password, 'password2': self.password})
+        self.assertEqual(response.status_code, 201)
+        # username already exists
+        response = self.client.post('/accounts/signup/', {'test': self.username, 'password': self.password, 'password2': self.password})
+        self.assertEqual(response.status_code, 400)
+
+
+    def test_login(self):
+        # successful signup
+        response = self.client.post('/accounts/signup/', {'username': self.username, 'password': self.password, 'password2': self.password})
+        self.assertEqual(response.status_code, 201)
+        # without username
+        response = self.client.post('/accounts/login/', {'password': '123'})
+        self.assertEqual(response.status_code, 400)
+        # without password
+        response = self.client.post('/accounts/login/', {'username': 'test'})
+        self.assertEqual(response.status_code, 400)
+        # user does not exist
+        response = self.client.post('/accounts/login/', {'username': 'test' + str(random.randint(1, 100000)), 'password': '123'})
+        self.assertEqual(response.status_code, 401)
+        # wrong password
+        response = self.client.post('/accounts/login/', {'username': self.username, 'password': '1234'})
+        self.assertEqual(response.status_code, 401)
+
+        # successful login
+        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
+        self.assertEqual(response.status_code, 200)
+        self.assertTrue('access' in response.data)
+        self.assertTrue('refresh' in response.data)
+
+    def test_refresh(self):
+        self.register_and_sign_in()
+        # without refresh token
+        response = self.client.post('/accounts/api/token/refresh/')
+        self.assertEqual(response.status_code, 400)
+
+        # successful refresh
+        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
+        self.assertEqual(response.status_code, 200)
+        refresh_token = response.data['refresh']
+        response = self.client.post('/accounts/api/token/refresh/', {'refresh': refresh_token})
+        self.assertEqual(response.status_code, 200)
+        self.assertTrue('access' in response.data)
+        self.assertTrue(response.data['access'] != refresh_token)
+
+    def test_logout(self):
+        self.register_and_sign_in()
+        # without refresh token
+        response = self.client.post('/accounts/logout/')
+        self.assertEqual(response.status_code, 401)
+
+        # successful logout
+        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
+        self.assertEqual(response.status_code, 200)
+        refresh_token = response.data['refresh']
+        response = self.client.post('/accounts/logout/', {'refresh': refresh_token})
+        self.assertEqual(response.status_code, 205)
+        # refresh token is no longer valid
+        response = self.client.post('/accounts/api/token/refresh/', {'refresh': refresh_token})
+        self.assertEqual(response.status_code, 401)
+
+    def test_update(self):
+        self.register_and_sign_in()
+        # without access token
+        response = self.client.post('/accounts/update/', {'username': self.username, 'password': self.password})
+        self.assertEqual(response.status_code, 401)
+
+        # successful update
+        response = self.client.post('/accounts/login/', {'username': self.username, 'password': self.password})
+        self.assertEqual(response.status_code, 200)
+        access_token = response.data['access']
+
+        avatar = open('./tests/wojak.jpg', 'rb')
+        response = self.client.post('/accounts/update/', {
+            'username': self.username,
+            'password': self.password,
+            'first_name': 'test',
+            'last_name': 'test',
+            'email': 'test@test.com',
+            'phone': '1234567890',
+            'avatar': avatar
+            }, HTTP_AUTHORIZATION='Bearer ' + access_token)
+        self.assertEqual(response.status_code, 200)
+        self.assertEqual(response.data['username'], self.username)
+        self.assertEqual(response.data['first_name'], 'test')
+        self.assertEqual(response.data['last_name'], 'test')
+        self.assertEqual(response.data['email'], 'test@test.com')
+        self.assertEqual(response.data['phone'], '1234567890')
+        self.assertTrue('avatar' in response.data)
+        avatar.close()
+
diff --git a/remigrate.sh b/remigrate.sh
old mode 100644
new mode 100755
diff --git a/tests/wojak.jpg b/tests/wojak.jpg
new file mode 100644
index 0000000..c5ef0f2
Binary files /dev/null and b/tests/wojak.jpg differ

commit b3020889ff43ae1eeaed30cb9c3dd66cce919f72
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Thu Nov 17 10:04:38 2022 -0500

    remove unused dependency

diff --git a/classes/admin.py b/classes/admin.py
index b3e429e..6a0539a 100644
--- a/classes/admin.py
+++ b/classes/admin.py
@@ -5,7 +5,6 @@ from django.http import HttpResponseRedirect
 from django.template.response import TemplateResponse
 
 from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
-from classes.forms import ClassCreateTimeForm
 
 # Register your models here.
 admin.site.register(Keywords)

commit a05cf98309bf241e2cf91f12f04173fd3d1f5d9a
Merge: 3b307f3 659a269
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Thu Nov 17 09:51:05 2022 -0500

    Merge pull request #11 from nathan-hansen/class-admin-panel
    
    Admin Panel change for implementing add class time

commit 1d51f301907c091f2050a078b4b859e3da2b7a35
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Thu Nov 17 01:53:24 2022 -0500

    added fixes PaymentInfo and CurrentSubscription views, changed urls file to add logout in browsable API, changed serializers and views so logged in users can only access their subscriptions and payments.

diff --git a/TFC/urls.py b/TFC/urls.py
index c01d095..72a841a 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -19,6 +19,7 @@ from django.contrib import admin
 from django.urls import path, include
 
 urlpatterns = [
+    path("api-auth/", include("rest_framework.urls")),
     path('admin/', admin.site.urls),
     path('accounts/', include('accounts.urls')),
     path('studios/', include('studios.urls')),
diff --git a/payments/serializers.py b/payments/serializers.py
index 4ca7603..1b6d549 100644
--- a/payments/serializers.py
+++ b/payments/serializers.py
@@ -1,6 +1,8 @@
 from rest_framework import serializers
 from payments.models import PaymentInfo, PaymentHistory
 from accounts.serializers import AccountSerializer
+from django.shortcuts import get_object_or_404
+from accounts.models import Account
 
 
 class PaymentInfoSerializer(serializers.ModelSerializer):
@@ -9,6 +11,15 @@ class PaymentInfoSerializer(serializers.ModelSerializer):
     class Meta:
         model = PaymentInfo
         fields = ['account', 'name_on_card', 'card_number', 'cvv', 'expiry_date']
+        read_only_fields = ['account']
+
+    # override create method to pre-set the account attribute
+    def create(self, validated_data):
+        current_account_id = self.context['request'].user.id
+        current_account = get_object_or_404(Account, pk=current_account_id)
+        return PaymentInfo.objects.create(account=current_account, name_on_card=validated_data['name_on_card'],
+                                          card_number=validated_data['card_number'], cvv=validated_data['cvv'],
+                                          expiry_date=validated_data['expiry_date'])
 
 
 class PaymentHistorySerializer(serializers.ModelSerializer):
diff --git a/payments/views.py b/payments/views.py
index cef08fa..8e0e4f3 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -37,7 +37,7 @@ class ListPaymentUpcoming(ListAPIView):
     serializer_class = PaymentHistorySerializer
 
     def get_queryset(self):
-        # first filter by payments of logged-in user, then filter for past payments
+        # first filter by payments of logged-in user, then filter for future payments
         user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__gte=timezone.now())
         # then order by most recent and return
         return user_queryset.order_by('timestamp')
diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
index ee309bd..9cb57ad 100644
--- a/subscriptions/serializers.py
+++ b/subscriptions/serializers.py
@@ -1,26 +1,33 @@
 from rest_framework.serializers import ModelSerializer, ValidationError
 from subscriptions.models import SubscriptionPlan, CurrentSubscription
 from payments.serializers import PaymentInfoSerializer
+from accounts.serializers import AccountSerializer
+from accounts.models import Account
+from django.shortcuts import get_object_or_404
 import datetime
 
+
 class SubscriptionPlanSerializer(ModelSerializer):
     class Meta:
         model = SubscriptionPlan
         fields = [
-                'price',
-                'interval',
-                ]
+            'price',
+            'interval',
+        ]
 
 
 class CurrentSubscriptionSerializer(ModelSerializer):
+    account = AccountSerializer
 
     class Meta:
         model = CurrentSubscription
         fields = [
-                'account',
-                'studio',
-                'plan',
-                ]
+            'account',
+            'studio',
+            'plan',
+        ]
+        read_only_fields = ['account']
+
     def validate(self, data):
         super().validate(data)
         if 'expiration' in data:
@@ -28,8 +35,8 @@ class CurrentSubscriptionSerializer(ModelSerializer):
         else:
             try:
                 interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
-                today = datetime.datetime.combine(datetime.datetime.today(), 
-                        datetime.datetime.min.time())
+                today = datetime.datetime.combine(datetime.datetime.today(),
+                                                  datetime.datetime.min.time())
                 if interval == 'yearly':
                     expiry = today.replace(year=today.year + 1, month=1, day=1)
                 elif interval == 'monthly':
@@ -53,7 +60,15 @@ class CurrentSubscriptionSerializer(ModelSerializer):
                 data['expiration'] = None
                 return data
 
-class CreateUserSubscriptionSerializer(ModelSerializer):
+    # reference to override create method to pre-set attribute to logged-in user:
+    # https://stackoverflow.com/a/58430009
+    def create(self, validated_data):
+        current_account_id = self.context['request'].user.id
+        current_account = get_object_or_404(Account, pk=current_account_id)
+        return CurrentSubscription.objects.create(account=current_account, studio=validated_data['studio'],
+                                                  plan=validated_data['plan'])
 
+
+class CreateUserSubscriptionSerializer(ModelSerializer):
     payment_info = PaymentInfoSerializer
     fields = []
diff --git a/subscriptions/views.py b/subscriptions/views.py
index 156a97c..3bd5960 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -4,24 +4,40 @@ from rest_framework.permissions import IsAuthenticated
 from rest_framework import mixins
 from subscriptions.models import CurrentSubscription
 from subscriptions.serializers import (
-        SubscriptionPlanSerializer,
-        CurrentSubscriptionSerializer,
-        )
+    SubscriptionPlanSerializer,
+    CurrentSubscriptionSerializer,
+)
+from django.shortcuts import get_object_or_404
+from accounts.models import Account
 
 
 class SubscribeView(generics.CreateAPIView):
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
 
+
 class UpdateSubscriptionView(generics.UpdateAPIView):
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
-    def get_queryset(self):
-        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+
+    def get_object(self, **kwargs):
+        # return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+        current_account = get_object_or_404(Account, id=self.request.user.id)
+        # use get object or 404 because we are updating specific current subscription with an id and account
+        # use current_account because we only want logged-in user to be able to edit their subscriptions
+        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
+        # will return "Not found" if current subscription does not belong to user
+
 
 class CancelSubscriptionView(generics.DestroyAPIView):
     permission_classes = [IsAuthenticated]
     serializer_class = CurrentSubscriptionSerializer
-    def get_queryset(self):
-        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
 
+    # def get_queryset(self):
+    #     return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+    def get_object(self, **kwargs):
+        current_account = get_object_or_404(Account, id=self.request.user.id)
+        # use get object or 404 because we are updating specific current subscription with an id and account
+        # use current_account because we only want logged in user to be able to edit their subscriptions
+        return get_object_or_404(CurrentSubscription, id=self.kwargs['subscription'], account=current_account)
+        # will return "Not found" if current subscription does not belong to user

commit 659a26960faae2a663bacb62ea7cfb4191a18b0f
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Thu Nov 17 00:58:14 2022 -0500

    finish class creation

diff --git a/classes/admin.py b/classes/admin.py
index 663c6f1..b3e429e 100644
--- a/classes/admin.py
+++ b/classes/admin.py
@@ -1,53 +1,73 @@
 from django.contrib import admin
 from django.urls import path, reverse
 from django.utils.html import format_html
+from django.http import HttpResponseRedirect
+from django.template.response import TemplateResponse
 
 from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
-from classes.forms import ClassCreateTimeForm, ClassEditTimeForm, ClassDeleteTimeForm
+from classes.forms import ClassCreateTimeForm
 
 # Register your models here.
-admin.site.register(Class)
 admin.site.register(Keywords)
 admin.site.register(ClassTimeTable)
 admin.site.register(EnrollClass)
+admin.site.register(Class)
+# @admin.register(Class)
+# class ClassAdmin(admin.ModelAdmin):
+#     def class_actions(self, obj):
+#         return format_html(
+#             '<a class="button" href="{}">Create Time</a>&nbsp;',
+#             '<a class="button" href="{}">Edit Time</a>&nbsp;',
+#             reverse('admin:classes_class_create_time', args=[obj.pk]),
+#             reverse('admin:classes_class_edit_time', args=[obj.pk]),
+#         )
+#     class_actions.short_description = 'Actions'
+#     class_actions.allow_tags = True
 
-@admin.register(Class)
-class ClassAdmin(admin.ModelAdmin):
-    def class_actions(self, obj):
-        return format_html(
-            '<a class="button" href="{}">Create Time</a>&nbsp;',
-            '<a class="button" href="{}">Edit Time</a>&nbsp;',
-            reverse('admin:classes_class_create_time', args=[obj.pk]),
-            reverse('admin:classes_class_edit_time', args=[obj.pk]),
-        )
-    class_actions.short_description = 'Actions'
-    class_actions.allow_tags = True
+#     def get_urls(self):
+#         urls = super().get_urls()
+#         my_urls = [
+#             path('class_settime/', self.set_class_time, name='class_settime'),
+#             path('class_edittime/', self.edit_class_time, name='class_edittime'),
+#         ]
+#         return my_urls + urls
 
-    def get_urls(self):
-        urls = super().get_urls()
-        my_urls = [
-            path('class_settime/', self.set_class_time, name='class_settime'),
-            path('class_edittime/', self.edit_class_time, name='class_edittime'),
-        ]
-        return my_urls + urls
+#     def set_class_time(self, request, class_id, *args, **kwargs):
+#         return self.process_action(
+#             request = request,
+#             class_id = class_id,
+#             action = 'set_time',
+#             action_form = ClassCreateTimeForm,
+#             action_title = 'Create Time',
+#         )
 
-    def set_class_time(self, request, class_id, *args, **kwargs):
-        return self.process_action(
-            request = request,
-            class_id = class_id,
-            action = 'set_time',
-            action_form = ClassCreateTimeForm,
-            action_title = 'Create Time',
-        )
+#     def edit_class_time(self, request, class_id, *args, **kwargs):
+#         return self.process_action(
+#             request = request,
+#             class_id = class_id,
+#             action = 'edit_time',
+#             action_form = ClassEditTimeForm,
+#             action_title = 'Edit Time',
+#         )
 
-    def edit_class_time(self, request, class_id, *args, **kwargs):
-        return self.process_action(
-            request = request,
-            class_id = class_id,
-            action = 'edit_time',
-            action_form = ClassEditTimeForm,
-            action_title = 'Edit Time',
-        )
+#     def process_action(self, request, class_id, action, action_form, action_title):
+#         class_obj = Class.objects.get(id=class_id)
+#         if request.method == 'POST':
+#             form = action_form(request.POST)
+#             if form.is_valid():
+#                 form.save(class_obj, request.user)
+#                 self.message_user(request, 'Action completed.')
+#                 return HttpResponseRedirect(reverse('admin:classes_class_changelist'))
+#         else:
+#             form = action_form()
 
-    def process_action(self, request, class_id, action, action_form, action_title):
-        class_obj = Class.objects.get(id=class_id)
\ No newline at end of file
+#         context = self.admin_site.each_context(request)
+#         context['opts'] = self.model._meta
+#         context['form'] = form
+#         context['title'] = action_title
+#         context['class_obj'] = class_obj
+#         return TemplateResponse(
+#             request,
+#             'admin/classes/class_action.html',
+#             context
+#         )
\ No newline at end of file
diff --git a/classes/forms.py b/classes/forms.py
deleted file mode 100644
index 4d0415c..0000000
--- a/classes/forms.py
+++ /dev/null
@@ -1,33 +0,0 @@
-from django import forms
-
-from classes.models import Class, ClassTimeTable, EnrollClass
-
-
-class ClassActionForm(forms.Form):
-
-    def form_action(self, class_obj: Class, user):
-        raise NotImplementedError()
-
-    def save(self, class_obj: Class, user):
-        class_obj, user = self.form_action(class_obj, user)
-        return class_obj, user
-
-class ClassCreateTimeForm(ClassActionForm):
-    class_time = forms.DateTimeField()
-    class_end = forms.DateTimeField()
-    duration = forms.DurationField()
-    spot_left = forms.IntegerField()
-
-    def form_action(self, class_obj: Class, user):
-        return Class.set_time(
-            class_time=self.cleaned_data['class_time'],
-            class_end=self.cleaned_data['class_end'],
-            duration=self.cleaned_data['duration'],
-            spot_left=self.cleaned_data['spot_left'],
-        )
-
-class ClassEditTimeForm(ClassActionForm):
-    ...
-
-class ClassDeleteTimeForm(ClassActionForm):
-    ...
\ No newline at end of file
diff --git a/classes/models.py b/classes/models.py
index a3bac6d..5c143ff 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -10,25 +10,36 @@ class Class(m.Model):
     name = m.CharField(max_length=250)
     description = m.TextField()
     coach = m.CharField(max_length=250)
+    class_start = m.DateField()
+    class_end = m.DateField()
+    class_time = m.TimeField()
     duration = m.DurationField()
+    days_inbetween = m.IntegerField()
+    spots = m.IntegerField()
 
-    def set_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
-        self.duration = duration
+    def save(self, *args, **kwargs):
+        super().save(*args, **kwargs)
+        self.set_time()
+        return self
 
-        time_i = class_time
-        while time_i < class_end:
+    def set_time(self):
+        self.duration = self.duration
+
+        time_i = datetime.datetime.combine(self.class_start, self.class_time)
+        while time_i <= datetime.datetime.combine(self.class_end, self.class_time):
             ClassTimeTable.objects.create(
-                class_id=self,
+                classid=self,
                 time=time_i,
-                spot_left=spot_left,
+                spotleft=self.spots,
             )
-            time_i += duration
+            time_i += datetime.timedelta(days=self.days_inbetween)
+            print("time_i: {}".format(time_i))
 
         return
 
-    def edit_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
+    def edit_time(self):
         ClassTimeTable.objects.filter(class_id=self).delete()
-        self.set_time(class_time, class_end, duration, spot_left)
+        self.set_time()
     
     def delete_one_time(self, time: datetime.datetime):
         if not ClassTimeTable.objects.filter(class_id=self, time=time).exists():

commit e60f2dda27856f12bbe3e2ec51b809c7cfb22e50
Merge: abfb0cc 00ffba7
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 19:51:11 2022 -0500

    Merge branch 'build-subscriptions' of https://github.com/nathan-hansen/csc309-tfc into build-subscriptions

commit abfb0ccc272fa60bec3c4c821268601268e6253f
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 19:50:54 2022 -0500

    subscriptions almost done

diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
new file mode 100644
index 0000000..1b8d389
--- /dev/null
+++ b/accounts/migrations/0001_initial.py
@@ -0,0 +1,59 @@
+# Generated by Django 4.1.3 on 2022-11-16 19:48
+
+from django.conf import settings
+import django.contrib.auth.models
+import django.core.validators
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("auth", "0012_alter_user_first_name_max_length"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Account",
+            fields=[
+                (
+                    "user_ptr",
+                    models.OneToOneField(
+                        auto_created=True,
+                        on_delete=django.db.models.deletion.CASCADE,
+                        parent_link=True,
+                        primary_key=True,
+                        serialize=False,
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+                ("avatar", models.ImageField(upload_to="account_avatars/")),
+                (
+                    "phone_number",
+                    models.CharField(
+                        blank=True,
+                        max_length=250,
+                        null=True,
+                        validators=[
+                            django.core.validators.RegexValidator(
+                                message="Phone number must be in the format: '+999999999', with a maximum of 15 digits",
+                                regex="^\\+?1?\\d{9,15}$",
+                            )
+                        ],
+                    ),
+                ),
+            ],
+            options={
+                "verbose_name": "user",
+                "verbose_name_plural": "users",
+                "abstract": False,
+            },
+            bases=("auth.user",),
+            managers=[
+                ("objects", django.contrib.auth.models.UserManager()),
+            ],
+        ),
+    ]
diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
new file mode 100644
index 0000000..c623526
--- /dev/null
+++ b/classes/migrations/0001_initial.py
@@ -0,0 +1,120 @@
+# Generated by Django 4.1.3 on 2022-11-16 19:48
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("studios", "0001_initial"),
+        ("accounts", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Class",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=250)),
+                ("description", models.TextField()),
+                ("coach", models.CharField(max_length=250)),
+                ("duration", models.DurationField()),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="tfc_class",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="ClassTimeTable",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("time", models.DateTimeField()),
+                ("spotleft", models.IntegerField()),
+                (
+                    "classid",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="timetable",
+                        to="classes.class",
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Keywords",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("keyword", models.CharField(max_length=250)),
+                (
+                    "classid",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="keywords",
+                        to="classes.class",
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="EnrollClass",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "account",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="enrollclass",
+                        to="accounts.account",
+                    ),
+                ),
+                (
+                    "classtime",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="enrollclass",
+                        to="classes.classtimetable",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/payments/migrations/0001_initial.py b/payments/migrations/0001_initial.py
new file mode 100644
index 0000000..dfbc5ea
--- /dev/null
+++ b/payments/migrations/0001_initial.py
@@ -0,0 +1,68 @@
+# Generated by Django 4.1.3 on 2022-11-16 21:56
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("accounts", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="PaymentInfo",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("card_number", models.CharField(max_length=250)),
+                ("expiry_date", models.DateField()),
+                ("cvv", models.IntegerField()),
+                ("name_on_card", models.CharField(max_length=250)),
+                (
+                    "account",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="payment_info",
+                        to="accounts.account",
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="PaymentHistory",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("timestamp", models.DateTimeField()),
+                ("amount", models.FloatField()),
+                ("card_number", models.CharField(max_length=250)),
+                ("card_expiry", models.DateField()),
+                (
+                    "account",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="payment_history",
+                        to="accounts.account",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/payments/migrations/__init__.py b/payments/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
new file mode 100644
index 0000000..f29133e
--- /dev/null
+++ b/studios/migrations/0001_initial.py
@@ -0,0 +1,84 @@
+# Generated by Django 4.1.3 on 2022-11-16 19:48
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Studio",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=250)),
+                ("address", models.CharField(max_length=250)),
+                ("latitude", models.FloatField()),
+                ("longitude", models.FloatField()),
+                ("postal_code", models.CharField(max_length=250)),
+                ("phone_number", models.CharField(max_length=250)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="StudioImage",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("image", models.ImageField(upload_to="studios/")),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="image",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Amenities",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("amenity_type", models.CharField(max_length=250)),
+                ("quantity", models.IntegerField()),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="amenities",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+            options={
+                "verbose_name_plural": "Amenities",
+            },
+        ),
+    ]
diff --git a/studios/migrations/0002_amenities.py b/studios/migrations/0002_amenities.py
deleted file mode 100644
index c41114f..0000000
--- a/studios/migrations/0002_amenities.py
+++ /dev/null
@@ -1,38 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-14 21:15
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("studios", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="Amenities",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("amenity_type", models.CharField(max_length=250)),
-                ("quantity", models.IntegerField()),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="amenities",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-        ),
-    ]
diff --git a/studios/migrations/0003_alter_studioimage_image.py b/studios/migrations/0003_alter_studioimage_image.py
deleted file mode 100644
index dbf671d..0000000
--- a/studios/migrations/0003_alter_studioimage_image.py
+++ /dev/null
@@ -1,20 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-14 21:36
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("studios", "0002_amenities"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="studioimage",
-            name="image",
-            field=models.ImageField(
-                upload_to="studios/<django.db.models.fields.related.ForeignKey>/"
-            ),
-        ),
-    ]
diff --git a/studios/migrations/0004_alter_studioimage_image.py b/studios/migrations/0004_alter_studioimage_image.py
deleted file mode 100644
index f9cee56..0000000
--- a/studios/migrations/0004_alter_studioimage_image.py
+++ /dev/null
@@ -1,18 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-14 22:53
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("studios", "0003_alter_studioimage_image"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="studioimage",
-            name="image",
-            field=models.ImageField(upload_to="studios/"),
-        ),
-    ]
diff --git a/studios/migrations/0005_alter_studio_phone_number.py b/studios/migrations/0005_alter_studio_phone_number.py
deleted file mode 100644
index 7b4abdb..0000000
--- a/studios/migrations/0005_alter_studio_phone_number.py
+++ /dev/null
@@ -1,18 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-14 23:18
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("studios", "0004_alter_studioimage_image"),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name="studio",
-            name="phone_number",
-            field=models.CharField(max_length=250),
-        ),
-    ]
diff --git a/studios/migrations/0006_alter_amenities_options.py b/studios/migrations/0006_alter_amenities_options.py
deleted file mode 100644
index 068409a..0000000
--- a/studios/migrations/0006_alter_amenities_options.py
+++ /dev/null
@@ -1,17 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-15 00:24
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ("studios", "0005_alter_studio_phone_number"),
-    ]
-
-    operations = [
-        migrations.AlterModelOptions(
-            name="amenities",
-            options={"verbose_name_plural": "Amenities"},
-        ),
-    ]
diff --git a/subscriptions/admin.py b/subscriptions/admin.py
index 8c38f3f..26008ed 100644
--- a/subscriptions/admin.py
+++ b/subscriptions/admin.py
@@ -1,3 +1,5 @@
 from django.contrib import admin
+from subscriptions.models import SubscriptionPlan, CurrentSubscription
 
-# Register your models here.
+admin.site.register(SubscriptionPlan)
+admin.site.register(CurrentSubscription)
diff --git a/subscriptions/migrations/0001_initial.py b/subscriptions/migrations/0001_initial.py
new file mode 100644
index 0000000..16d2ac5
--- /dev/null
+++ b/subscriptions/migrations/0001_initial.py
@@ -0,0 +1,74 @@
+# Generated by Django 4.1.3 on 2022-11-16 22:14
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("studios", "0001_initial"),
+        ("accounts", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="SubscriptionPlan",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("payment", models.DecimalField(decimal_places=2, max_digits=12)),
+                ("interval", models.DurationField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name="CurrentSubscription",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("expiration", models.DateTimeField(blank=True, null=True)),
+                (
+                    "account",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="account_subscription",
+                        to="accounts.account",
+                    ),
+                ),
+                (
+                    "plan",
+                    models.ForeignKey(
+                        blank=True,
+                        null=True,
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="current_plan",
+                        to="subscriptions.subscriptionplan",
+                    ),
+                ),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="studio_subscription",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/subscriptions/migrations/0002_alter_subscriptionplan_interval.py b/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
new file mode 100644
index 0000000..39e7a70
--- /dev/null
+++ b/subscriptions/migrations/0002_alter_subscriptionplan_interval.py
@@ -0,0 +1,18 @@
+# Generated by Django 4.1.3 on 2022-11-16 22:27
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("subscriptions", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="subscriptionplan",
+            name="interval",
+            field=models.CharField(max_length=16),
+        ),
+    ]
diff --git a/subscriptions/migrations/__init__.py b/subscriptions/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/subscriptions/models.py b/subscriptions/models.py
index 3a40a75..0489162 100644
--- a/subscriptions/models.py
+++ b/subscriptions/models.py
@@ -3,10 +3,11 @@ from django.db import models as m
 
 class SubscriptionPlan(m.Model):
     payment = m.DecimalField(decimal_places=2, max_digits=12)
-    interval = m.DurationField()
+    interval = m.CharField(max_length=16)
 
 class CurrentSubscription(m.Model):
     account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
-    plan = m.ForeignKey('SubscriptionPlan', on_delete=m.SET_NULL, null=True, blank=True, related_name='current_plan')
+    studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='studio_subscription')
+    plan = m.ForeignKey('SubscriptionPlan', on_delete=m.CASCADE, null=True, blank=True, related_name='current_plan')
     expiration = m.DateTimeField(null=True, blank=True)
 
diff --git a/subscriptions/serializers.py b/subscriptions/serializers.py
new file mode 100644
index 0000000..ee309bd
--- /dev/null
+++ b/subscriptions/serializers.py
@@ -0,0 +1,59 @@
+from rest_framework.serializers import ModelSerializer, ValidationError
+from subscriptions.models import SubscriptionPlan, CurrentSubscription
+from payments.serializers import PaymentInfoSerializer
+import datetime
+
+class SubscriptionPlanSerializer(ModelSerializer):
+    class Meta:
+        model = SubscriptionPlan
+        fields = [
+                'price',
+                'interval',
+                ]
+
+
+class CurrentSubscriptionSerializer(ModelSerializer):
+
+    class Meta:
+        model = CurrentSubscription
+        fields = [
+                'account',
+                'studio',
+                'plan',
+                ]
+    def validate(self, data):
+        super().validate(data)
+        if 'expiration' in data:
+            raise ValidationError('cannot send expiration value')
+        else:
+            try:
+                interval = SubscriptionPlan.objects.get(id=data['plan'].pk).interval
+                today = datetime.datetime.combine(datetime.datetime.today(), 
+                        datetime.datetime.min.time())
+                if interval == 'yearly':
+                    expiry = today.replace(year=today.year + 1, month=1, day=1)
+                elif interval == 'monthly':
+                    if today.month == 12:
+                        expiry = today.replace(year=today.year + 1, month=1, day=1)
+                    else:
+                        expiry = today.replace(month=today.month + 1, day=1)
+
+                elif interval == 'weekly':
+                    pass
+
+                elif interval == 'daily':
+                    pass
+
+                data['expiration'] = expiry
+
+                return data
+
+
+            except AttributeError:
+                data['expiration'] = None
+                return data
+
+class CreateUserSubscriptionSerializer(ModelSerializer):
+
+    payment_info = PaymentInfoSerializer
+    fields = []
diff --git a/subscriptions/urls.py b/subscriptions/urls.py
index 048064a..437af5b 100644
--- a/subscriptions/urls.py
+++ b/subscriptions/urls.py
@@ -9,7 +9,7 @@ app_name = 'subscriptions'
 
 urlpatterns = [
         path('subscribe/', SubscribeView.as_view()),
-        path('update/', UpdateSubscriptionView.as_view()),
-        path('cancel/', CancelSubscriptionView.as_view()),
+        path('<int:pk>/update/<int:subscription>/', UpdateSubscriptionView.as_view()),
+        path('<int:pk>/cancel/<int:subscription>/', CancelSubscriptionView.as_view()),
 ]
 
diff --git a/subscriptions/views.py b/subscriptions/views.py
index 91ea44a..156a97c 100644
--- a/subscriptions/views.py
+++ b/subscriptions/views.py
@@ -1,3 +1,27 @@
 from django.shortcuts import render
+from rest_framework import generics
+from rest_framework.permissions import IsAuthenticated
+from rest_framework import mixins
+from subscriptions.models import CurrentSubscription
+from subscriptions.serializers import (
+        SubscriptionPlanSerializer,
+        CurrentSubscriptionSerializer,
+        )
+
+
+class SubscribeView(generics.CreateAPIView):
+    permission_classes = [IsAuthenticated]
+    serializer_class = CurrentSubscriptionSerializer
+
+class UpdateSubscriptionView(generics.UpdateAPIView):
+    permission_classes = [IsAuthenticated]
+    serializer_class = CurrentSubscriptionSerializer
+    def get_queryset(self):
+        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
+
+class CancelSubscriptionView(generics.DestroyAPIView):
+    permission_classes = [IsAuthenticated]
+    serializer_class = CurrentSubscriptionSerializer
+    def get_queryset(self):
+        return CurrentSubscription.objects.filter(account=self.kwargs['pk'], id=self.kwargs['subscription'])
 
-# Create your views here.

commit 00ffba76b899a7ff7ce560264cce6cd6698a54aa
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Wed Nov 16 18:17:52 2022 -0500

    Fixed Accounts avatar

diff --git a/accounts/models.py b/accounts/models.py
index 589cdc3..6fca33c 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -5,7 +5,7 @@ from django.db import models as m
 
 class Account(User):
     # first/last name and email are inherited from User
-    avatar = m.ImageField(upload_to='account_avatars/')
+    avatar = m.ImageField(upload_to='account_avatars/', null=True, blank=True)
     # phone number regex from: https://stackoverflow.com/a/19131360
     phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$',
                                  message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
diff --git a/accounts/serializers.py b/accounts/serializers.py
index c567089..3119f76 100644
--- a/accounts/serializers.py
+++ b/accounts/serializers.py
@@ -10,7 +10,7 @@ class AccountSerializer(serializers.ModelSerializer):
     # editing it)
     class Meta:
         model = Account
-        fields = ["username", "first_name", "last_name", "email", "phone_number"]
+        fields = ["username", "first_name", "last_name", "email", "avatar", "phone_number"]
         read_only_fields = ["password"]
         # not allowed to edit this attribute, so read only, from tutorial code
 
@@ -23,7 +23,7 @@ class SignupSerializer(serializers.ModelSerializer):
 
     class Meta:
         model = Account  # returns the User model that is active in this project
-        fields = ("username", "password", "password2", "first_name", "last_name", "email", "phone_number")
+        fields = ("username", "password", "password2", "first_name", "last_name", "email", "avatar", "phone_number")
 
         # Specify the input type for password in the sign up, already did for password 2
         # we can also specify the write_only attribute to specify that a field should only be used for writing data
diff --git a/accounts/views.py b/accounts/views.py
index 86da5b3..5a56904 100644
--- a/accounts/views.py
+++ b/accounts/views.py
@@ -11,6 +11,7 @@ from rest_framework import status
 
 # Create your views here.
 class SignUpView(APIView):
+    # reference: https://thinkster.io/tutorials/django-json-api/authentication
     permission_classes = (AllowAny,)
     serializer_class = SignupSerializer
 

commit 3b307f37d65cc2a23ee96e2ef59006269dea138a
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Wed Nov 16 18:16:40 2022 -0500

    add bash for remigrate

diff --git a/remigrate.sh b/remigrate.sh
new file mode 100644
index 0000000..8e70b2f
--- /dev/null
+++ b/remigrate.sh
@@ -0,0 +1,12 @@
+find . -path "*/migrations/*.py" -not -name "__init__.py" -delete 
+find . -path "*/migrations/*.pyc"  -delete
+
+./manage.py makemigrations
+./manage.py migrate
+
+# create admin:admin
+DJANGO_SUPERUSER_PASSWORD=admin \
+DJANGO_SUPERUSER_USERNAME=admin \
+DJANGO_SUPERUSER_EMAIL=admin@nonexist.com \
+./manage.py createsuperuser \
+--no-input
\ No newline at end of file

commit 6d444d1e547f04d487bf8c14805a9cbe7afd1db9
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 17:32:34 2022 -0500

    payment subscription urls

diff --git a/payments/urls.py b/payments/urls.py
new file mode 100644
index 0000000..dc29403
--- /dev/null
+++ b/payments/urls.py
@@ -0,0 +1,17 @@
+from django.urls import path
+from payments.views import (
+        CreatePaymentInfoView,
+        PaymentInfoUpdateView,
+        ListPaymentHistory,
+        ListPaymentUpcoming,
+        )
+
+app_name = 'payments'
+
+urlpatterns = [
+        path('add/', CreatePaymentInfoView.as_view()),
+        path('update/', PaymentInfoUpdateView.as_view()),
+        path('history/', ListPaymentHistory.as_view()),
+        path('upcoming/', ListPaymentUpcoming.as_view()),
+]
+
diff --git a/subscriptions/urls.py b/subscriptions/urls.py
new file mode 100644
index 0000000..048064a
--- /dev/null
+++ b/subscriptions/urls.py
@@ -0,0 +1,15 @@
+from django.urls import path
+from subscriptions.views import (
+        SubscribeView,
+        UpdateSubscriptionView,
+        CancelSubscriptionView,
+        )
+
+app_name = 'subscriptions'
+
+urlpatterns = [
+        path('subscribe/', SubscribeView.as_view()),
+        path('update/', UpdateSubscriptionView.as_view()),
+        path('cancel/', CancelSubscriptionView.as_view()),
+]
+

commit 13eaa0f45c07a760caf6c69d7cc0e48547006ec4
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 17:07:26 2022 -0500

    payments fixes

diff --git a/payments/serializers.py b/payments/serializers.py
index ce84618..4ca7603 100644
--- a/payments/serializers.py
+++ b/payments/serializers.py
@@ -7,8 +7,8 @@ class PaymentInfoSerializer(serializers.ModelSerializer):
     account = AccountSerializer
 
     class Meta:
-        model = PaymentHistory
-        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
+        model = PaymentInfo
+        fields = ['account', 'name_on_card', 'card_number', 'cvv', 'expiry_date']
 
 
 class PaymentHistorySerializer(serializers.ModelSerializer):
diff --git a/payments/views.py b/payments/views.py
index 2935a3a..cef08fa 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -7,11 +7,9 @@ from django.utils import timezone
 from django.shortcuts import get_object_or_404
 
 
-# Create your views here.
-
 class CreatePaymentInfoView(CreateAPIView):
     permission_classes = [IsAuthenticated]
-    serializer_class = PaymentInfo
+    serializer_class = PaymentInfoSerializer
 
 
 class PaymentInfoUpdateView(UpdateAPIView):

commit 168f3a89fdeb138128f866eb9fcdab8eb8ed0e72
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 17:05:36 2022 -0500

    added payments, subscriptions urls

diff --git a/TFC/urls.py b/TFC/urls.py
index d674dd1..c01d095 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -23,6 +23,8 @@ urlpatterns = [
     path('accounts/', include('accounts.urls')),
     path('studios/', include('studios.urls')),
     path('classes/', include('classes.urls')),
+    path('payments/', include('payments.urls')),
+    path('subscriptions/', include('subscriptions.urls')),
 ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
 # add media_URL and MEDIA_ROOT from settings for image urls to work properly
 

commit 66478b5e6d3cc6c911edf7df899d2b655acaceaf
Merge: bb22fbc e8a639d
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Wed Nov 16 15:27:45 2022 -0500

    Merge pull request #14 from nathan-hansen/payment_subscription_draft
    
    Added initial draft of views and serializers for payment

commit e8a639d9d48ec4501f9c66a9b8f3fb52f3a67fc5
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Wed Nov 16 15:26:54 2022 -0500

    Added initial draft of views and serializers for payment

diff --git a/accounts/models.py b/accounts/models.py
index f6cbcf6..df11bb2 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -6,6 +6,7 @@ from django.db import models as m
 class Account(User):
     # first/last name and email are inherited from User
     avatar = m.ImageField(upload_to='account_avatars/')
+    # phone number regex from: https://stackoverflow.com/a/19131360
     phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$',
                                  message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
     phone_number = m.CharField(validators=[phone_regex], max_length=250, null=True, blank=True)
diff --git a/payments/serializers.py b/payments/serializers.py
new file mode 100644
index 0000000..ce84618
--- /dev/null
+++ b/payments/serializers.py
@@ -0,0 +1,19 @@
+from rest_framework import serializers
+from payments.models import PaymentInfo, PaymentHistory
+from accounts.serializers import AccountSerializer
+
+
+class PaymentInfoSerializer(serializers.ModelSerializer):
+    account = AccountSerializer
+
+    class Meta:
+        model = PaymentHistory
+        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
+
+
+class PaymentHistorySerializer(serializers.ModelSerializer):
+    account = AccountSerializer
+
+    class Meta:
+        model = PaymentHistory
+        fields = ['account', 'timestamp', 'card_number', 'card_expiry']
diff --git a/payments/views.py b/payments/views.py
index 91ea44a..2935a3a 100644
--- a/payments/views.py
+++ b/payments/views.py
@@ -1,3 +1,45 @@
 from django.shortcuts import render
+from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
+from rest_framework.permissions import IsAuthenticated, AllowAny
+from payments.serializers import PaymentInfoSerializer, PaymentHistorySerializer
+from payments.models import PaymentInfo, PaymentHistory
+from django.utils import timezone
+from django.shortcuts import get_object_or_404
+
 
 # Create your views here.
+
+class CreatePaymentInfoView(CreateAPIView):
+    permission_classes = [IsAuthenticated]
+    serializer_class = PaymentInfo
+
+
+class PaymentInfoUpdateView(UpdateAPIView):
+    permission_classes = [IsAuthenticated]
+    # make sure user is logged in
+    serializer_class = PaymentInfoSerializer
+
+    def get_object(self):
+        return get_object_or_404(PaymentInfo, account=self.request.user)
+
+
+class ListPaymentHistory(ListAPIView):
+    permission_classes = [IsAuthenticated]
+    serializer_class = PaymentHistorySerializer
+
+    def get_queryset(self):
+        # first filter by payments of logged-in user, then filter for past payments
+        user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__lte=timezone.now())
+        # then order by most recent and return
+        return user_queryset.order_by('timestamp')
+
+
+class ListPaymentUpcoming(ListAPIView):
+    permission_classes = [IsAuthenticated]
+    serializer_class = PaymentHistorySerializer
+
+    def get_queryset(self):
+        # first filter by payments of logged-in user, then filter for past payments
+        user_queryset = PaymentHistory.objects.filter(account=self.request.user).filter(timestamp__gte=timezone.now())
+        # then order by most recent and return
+        return user_queryset.order_by('timestamp')

commit bb22fbc461a830122fefb72944ed00bce29169ce
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 15:02:54 2022 -0500

    removed debug info

diff --git a/studios/models.py b/studios/models.py
index 4182dd8..8e77caf 100644
--- a/studios/models.py
+++ b/studios/models.py
@@ -18,7 +18,6 @@ def extend_sqlite(connection=None, **kwargs):
         cf('sin', 1, math.sin)
         cf('least', 2, min)
         cf('greatest', 2, max)
-        print('SQLite extended successfully.')
 
 
 class Studio(m.Model):

commit 192ac75d11738d831690b89cdde7289cc57a7200
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Wed Nov 16 14:43:39 2022 -0500

    moved CurrentSubscription model

diff --git a/accounts/models.py b/accounts/models.py
index f6cbcf6..c19bdc8 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -10,7 +10,3 @@ class Account(User):
                                  message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
     phone_number = m.CharField(validators=[phone_regex], max_length=250, null=True, blank=True)
 
-class CurrentSubscription(m.Model):
-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
-    plan = m.ForeignKey('subscriptions.SubscriptionPlan', on_delete=m.CASCADE, related_name='current_subscription')
-    expiration = m.DateTimeField()
diff --git a/subscriptions/models.py b/subscriptions/models.py
index 416ad24..3a40a75 100644
--- a/subscriptions/models.py
+++ b/subscriptions/models.py
@@ -5,3 +5,8 @@ class SubscriptionPlan(m.Model):
     payment = m.DecimalField(decimal_places=2, max_digits=12)
     interval = m.DurationField()
 
+class CurrentSubscription(m.Model):
+    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='account_subscription')
+    plan = m.ForeignKey('SubscriptionPlan', on_delete=m.SET_NULL, null=True, blank=True, related_name='current_plan')
+    expiration = m.DateTimeField(null=True, blank=True)
+

commit ad55b4e189f25e1adbb12a2f33dcfc6b6b195ff1
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Wed Nov 16 13:22:44 2022 -0500

    models for addtime

diff --git a/classes/admin.py b/classes/admin.py
index 107af92..663c6f1 100644
--- a/classes/admin.py
+++ b/classes/admin.py
@@ -1,9 +1,53 @@
 from django.contrib import admin
+from django.urls import path, reverse
+from django.utils.html import format_html
 
 from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
+from classes.forms import ClassCreateTimeForm, ClassEditTimeForm, ClassDeleteTimeForm
 
 # Register your models here.
 admin.site.register(Class)
 admin.site.register(Keywords)
 admin.site.register(ClassTimeTable)
-admin.site.register(EnrollClass)
\ No newline at end of file
+admin.site.register(EnrollClass)
+
+@admin.register(Class)
+class ClassAdmin(admin.ModelAdmin):
+    def class_actions(self, obj):
+        return format_html(
+            '<a class="button" href="{}">Create Time</a>&nbsp;',
+            '<a class="button" href="{}">Edit Time</a>&nbsp;',
+            reverse('admin:classes_class_create_time', args=[obj.pk]),
+            reverse('admin:classes_class_edit_time', args=[obj.pk]),
+        )
+    class_actions.short_description = 'Actions'
+    class_actions.allow_tags = True
+
+    def get_urls(self):
+        urls = super().get_urls()
+        my_urls = [
+            path('class_settime/', self.set_class_time, name='class_settime'),
+            path('class_edittime/', self.edit_class_time, name='class_edittime'),
+        ]
+        return my_urls + urls
+
+    def set_class_time(self, request, class_id, *args, **kwargs):
+        return self.process_action(
+            request = request,
+            class_id = class_id,
+            action = 'set_time',
+            action_form = ClassCreateTimeForm,
+            action_title = 'Create Time',
+        )
+
+    def edit_class_time(self, request, class_id, *args, **kwargs):
+        return self.process_action(
+            request = request,
+            class_id = class_id,
+            action = 'edit_time',
+            action_form = ClassEditTimeForm,
+            action_title = 'Edit Time',
+        )
+
+    def process_action(self, request, class_id, action, action_form, action_title):
+        class_obj = Class.objects.get(id=class_id)
\ No newline at end of file
diff --git a/classes/forms.py b/classes/forms.py
new file mode 100644
index 0000000..4d0415c
--- /dev/null
+++ b/classes/forms.py
@@ -0,0 +1,33 @@
+from django import forms
+
+from classes.models import Class, ClassTimeTable, EnrollClass
+
+
+class ClassActionForm(forms.Form):
+
+    def form_action(self, class_obj: Class, user):
+        raise NotImplementedError()
+
+    def save(self, class_obj: Class, user):
+        class_obj, user = self.form_action(class_obj, user)
+        return class_obj, user
+
+class ClassCreateTimeForm(ClassActionForm):
+    class_time = forms.DateTimeField()
+    class_end = forms.DateTimeField()
+    duration = forms.DurationField()
+    spot_left = forms.IntegerField()
+
+    def form_action(self, class_obj: Class, user):
+        return Class.set_time(
+            class_time=self.cleaned_data['class_time'],
+            class_end=self.cleaned_data['class_end'],
+            duration=self.cleaned_data['duration'],
+            spot_left=self.cleaned_data['spot_left'],
+        )
+
+class ClassEditTimeForm(ClassActionForm):
+    ...
+
+class ClassDeleteTimeForm(ClassActionForm):
+    ...
\ No newline at end of file
diff --git a/classes/models.py b/classes/models.py
index 4d55c17..a3bac6d 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -1,3 +1,5 @@
+import datetime
+
 from django.db import models as m
 
 from accounts.models import Account
@@ -10,6 +12,31 @@ class Class(m.Model):
     coach = m.CharField(max_length=250)
     duration = m.DurationField()
 
+    def set_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
+        self.duration = duration
+
+        time_i = class_time
+        while time_i < class_end:
+            ClassTimeTable.objects.create(
+                class_id=self,
+                time=time_i,
+                spot_left=spot_left,
+            )
+            time_i += duration
+
+        return
+
+    def edit_time(self, class_time: datetime.datetime, class_end: datetime.datetime, duration: datetime.timedelta, spot_left: int):
+        ClassTimeTable.objects.filter(class_id=self).delete()
+        self.set_time(class_time, class_end, duration, spot_left)
+    
+    def delete_one_time(self, time: datetime.datetime):
+        if not ClassTimeTable.objects.filter(class_id=self, time=time).exists():
+            return False
+
+        ClassTimeTable.objects.filter(class_id=self, time=time).delete()
+        return True
+
 class Keywords(m.Model):
     classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='keywords')
     keyword = m.CharField(max_length=250)

commit 302895c53eb36e09aa2288c676b3060ff3f9a55b
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Tue Nov 15 23:05:06 2022 -0500

    moved EnrollClass serializer from accounts app to classes app

diff --git a/accounts/serializers.py b/accounts/serializers.py
index 12381de..c567089 100644
--- a/accounts/serializers.py
+++ b/accounts/serializers.py
@@ -1,7 +1,6 @@
 from rest_framework import serializers
 from django.utils.translation import gettext_lazy as _
 from django.contrib.auth import get_user_model
-from accounts.models import EnrollClass
 from classes.models import ClassTimeTable
 from accounts.models import Account
 
@@ -16,16 +15,6 @@ class AccountSerializer(serializers.ModelSerializer):
         # not allowed to edit this attribute, so read only, from tutorial code
 
 
-class EnrollClassSerializer(serializers.ModelSerializer):
-    account = AccountSerializer()
-
-    # classtime = ClassTimeTableSerializer()
-
-    class Meta:
-        model = EnrollClass
-        fields = ['account', 'classtime']
-
-
 # based on the tutorial code
 class SignupSerializer(serializers.ModelSerializer):
     # Want a signup form that asks for the user's username, firstname, lastname, email, phone_number
diff --git a/classes/serializers.py b/classes/serializers.py
index e3e39a2..bd28ea5 100644
--- a/classes/serializers.py
+++ b/classes/serializers.py
@@ -1,6 +1,7 @@
 from rest_framework import serializers
 
-from classes.models import Class, ClassTimeTable, Keywords
+from accounts.serializers import AccountSerializer
+from classes.models import Class, ClassTimeTable, Keywords, EnrollClass
 
 
 class KeywordsSerializer(serializers.ModelSerializer):
@@ -29,3 +30,11 @@ class ClassSerializer(serializers.ModelSerializer):
         model = Class
         fields = ['name', 'description', 'coach', 'keywords', 'timetable']
 
+
+class EnrollClassSerializer(serializers.ModelSerializer):
+    account = AccountSerializer()
+    classtime = ClassTimeTableSerializer()
+
+    class Meta:
+        model = EnrollClass
+        fields = ['account', 'classtime']

commit cae9966b9a15dd6da9fcb8270c0663e65f4426fc
Merge: 9b57a89 9e86e75
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Tue Nov 15 22:03:28 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc

commit 9b57a8975a164680a9aad7d20c8842365f2f2eb0
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Tue Nov 15 22:01:50 2022 -0500

    add url; fix small bug

diff --git a/TFC/settings.py b/TFC/settings.py
index 60d8999..599386d 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -119,7 +119,7 @@ AUTH_PASSWORD_VALIDATORS = [
 
 LANGUAGE_CODE = "en-us"
 
-TIME_ZONE = "UTC"
+TIME_ZONE = "America/Toronto"
 
 USE_I18N = True
 
diff --git a/TFC/urls.py b/TFC/urls.py
index 1df3f49..3d47e62 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -20,5 +20,5 @@ urlpatterns = [
     path('admin/', admin.site.urls),
     path('accounts/', include('accounts.urls')),
     path('studios/', include('studios.urls')),
-
+    path('classes/', include('classes.urls')),
 ]
diff --git a/classes/serializers.py b/classes/serializers.py
index 47b1622..e3e39a2 100644
--- a/classes/serializers.py
+++ b/classes/serializers.py
@@ -1,6 +1,6 @@
 from rest_framework import serializers
 
-from classes.models import Class, ClassTimeTables, Keywords
+from classes.models import Class, ClassTimeTable, Keywords
 
 
 class KeywordsSerializer(serializers.ModelSerializer):
@@ -14,7 +14,7 @@ class ClassTimeTableSerializer(serializers.ModelSerializer):
     Classes must appear in the order of their start time (from now), and the class information must be shown. 
     Past or cancelled classes should not be listed.'''
     class Meta:
-        model = ClassTimeTables
+        model = ClassTimeTable
         fields = ['time', 'spotleft']
 
 
diff --git a/classes/views.py b/classes/views.py
index b7d229c..eb93e24 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -1,13 +1,13 @@
-from rest_framework import generics, get_object_or_404
+from django.shortcuts import get_object_or_404
+from django.utils import timezone
+from rest_framework import generics
 from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 from rest_framework.views import APIView
 
-from accounts.models import EnrollClass
-from classes.models import Class, ClassTimeTable
+from classes.models import Class, ClassTimeTable, EnrollClass
 from classes.serializers import ClassSerializer
 
-from django.utils import timezone
 
 # Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):

commit 9e86e752666ded760774c8c740a2a26847fb45d5
Merge: 62773e3 217bda3
Author: Edward <81656509+ed29leung@users.noreply.github.com>
Date:   Tue Nov 15 21:14:32 2022 -0500

    Merge pull request #9 from nathan-hansen/account-draft
    
    Account draft

commit 62773e34832527a624a11c8dbdec99ac9f453166
Merge: b104047 3f2257d
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Tue Nov 15 19:23:33 2022 -0500

    Merge pull request #10 from nathan-hansen/model_class
    
    model draft

commit 3f2257dd0cab739b0fd94b112682c17e38edf529
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Tue Nov 15 12:22:33 2022 -0500

    done with view; admin panel left

diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
deleted file mode 100644
index a072b37..0000000
--- a/accounts/migrations/0001_initial.py
+++ /dev/null
@@ -1,54 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-12 22:31
-
-from django.conf import settings
-import django.contrib.auth.models
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ('auth', '0012_alter_user_first_name_max_length'),
-        ('classes', '0001_initial'),
-        ('subscriptions', '__first__'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Account',
-            fields=[
-                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
-                ('avatar', models.ImageField(upload_to='')),
-                ('phone_number', models.CharField(max_length=250)),
-            ],
-            options={
-                'verbose_name': 'user',
-                'verbose_name_plural': 'users',
-                'abstract': False,
-            },
-            bases=('auth.user',),
-            managers=[
-                ('objects', django.contrib.auth.models.UserManager()),
-            ],
-        ),
-        migrations.CreateModel(
-            name='EnrollClass',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='accounts.account')),
-                ('classtime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='classes.classtimetable')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='CurrentSubscription',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('expiration', models.DateTimeField()),
-                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='accounts.account')),
-                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='subscriptions.subscriptionplan')),
-            ],
-        ),
-    ]
diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
deleted file mode 100644
index 88e945f..0000000
--- a/classes/migrations/0001_initial.py
+++ /dev/null
@@ -1,44 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-12 22:31
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ('studios', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Class',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('name', models.CharField(max_length=250)),
-                ('description', models.TextField()),
-                ('coach', models.CharField(max_length=250)),
-                ('duration', models.DurationField()),
-                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tfc_class', to='studios.studio')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Keywords',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('keyword', models.CharField(max_length=250)),
-                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='classes.class')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='ClassTimeTable',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('time', models.DateTimeField()),
-                ('spotleft', models.IntegerField()),
-                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable', to='classes.class')),
-            ],
-        ),
-    ]
diff --git a/classes/models.py b/classes/models.py
index b5be145..4d55c17 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -22,9 +22,10 @@ class ClassTimeTable(m.Model):
     def check_full(self):
         return self.spotleft != 0
 
+
 class EnrollClass(m.Model):
-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
-    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
+    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='enrollclass')
+    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enrollclass')
 
     def enroll(self, account: Account, classtime: ClassTimeTable):
         self.account = account
@@ -33,3 +34,6 @@ class EnrollClass(m.Model):
 
     def check_enroll(self, account: Account, classtime: ClassTimeTable):
         return self.objects.filter(account=account, classtime=classtime).exists()
+
+    def get_user_enroll(self, account: Account):
+        return self.objects.filter(account=account)
\ No newline at end of file
diff --git a/classes/utils.py b/classes/utils.py
deleted file mode 100644
index 181b78b..0000000
--- a/classes/utils.py
+++ /dev/null
@@ -1,9 +0,0 @@
-from accounts.models import User
-
-
-def get_classes_with_spots():
-    ...
-
-def get_user_classes(user: User):
-    ...
-
diff --git a/classes/views.py b/classes/views.py
index 7cc651b..b7d229c 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -6,22 +6,28 @@ from rest_framework.views import APIView
 from accounts.models import EnrollClass
 from classes.models import Class, ClassTimeTable
 from classes.serializers import ClassSerializer
-from classes.utils import get_classes_with_spots, get_user_classes
 
+from django.utils import timezone
 
 # Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):
     serializer_class = ClassSerializer
 
     def get_queryset(self):
-        return get_classes_with_spots()
+        # https://stackoverflow.com/questions/19223953/django-filtering-from-other-model
+        return Class.objects. \
+            filter(timetable__spotleft__gte=1). \
+            filter(timetable__time__gte=timezone.now()). \
+                distinct().order_by('timetable__time')
 
 class ListMyClassView(generics.ListAPIView):
     permission_classes = (IsAuthenticated,)
     serializer_class = ClassSerializer
 
     def get_queryset(self):
-        return get_user_classes(self.request.user)
+        return Class.objects. \
+            filter(timetable__enrollclass__account=self.request.user)
+
 
 class ModifyClassView(APIView):
     permission_classes = (IsAuthenticated,)
diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
deleted file mode 100644
index 904fd06..0000000
--- a/studios/migrations/0001_initial.py
+++ /dev/null
@@ -1,44 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-12 22:31
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Studio',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('name', models.CharField(max_length=250)),
-                ('address', models.CharField(max_length=250)),
-                ('latitude', models.FloatField()),
-                ('longitude', models.FloatField()),
-                ('postal_code', models.CharField(max_length=250)),
-                ('phone_number', models.CharField(max_length=250)),
-            ],
-        ),
-        migrations.CreateModel(
-            name='StudioImage',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('image', models.ImageField(upload_to='')),
-                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='studios.studio')),
-            ],
-        ),
-        migrations.CreateModel(
-            name='Amenities',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('type', models.CharField(max_length=250)),
-                ('quantity', models.IntegerField()),
-                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='studios.studio')),
-            ],
-        ),
-    ]

commit 146ae718d643c147646252f6bd34bd05c8e87b89
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Tue Nov 15 11:48:38 2022 -0500

    modify operations

diff --git a/accounts/models.py b/accounts/models.py
index d128e9b..db0318a 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -11,7 +11,3 @@ class CurrentSubscription(m.Model):
     account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
     plan = m.ForeignKey('subscriptions.SubscriptionPlan', on_delete=m.CASCADE, related_name='current_subscription')
     expiration = m.DateTimeField()
-
-class EnrollClass(m.Model):
-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
-    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
\ No newline at end of file
diff --git a/classes/admin.py b/classes/admin.py
index 4e10981..107af92 100644
--- a/classes/admin.py
+++ b/classes/admin.py
@@ -1,8 +1,9 @@
 from django.contrib import admin
 
-from classes.models import Class, ClassTimeTable, Keywords
+from classes.models import Class, ClassTimeTable, EnrollClass, Keywords
 
 # Register your models here.
 admin.site.register(Class)
 admin.site.register(Keywords)
 admin.site.register(ClassTimeTable)
+admin.site.register(EnrollClass)
\ No newline at end of file
diff --git a/classes/models.py b/classes/models.py
index b9ffe69..b5be145 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -1,5 +1,7 @@
 from django.db import models as m
 
+from accounts.models import Account
+
 
 class Class(m.Model):
     studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='tfc_class')
@@ -15,4 +17,19 @@ class Keywords(m.Model):
 class ClassTimeTable(m.Model):
     classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='timetable')
     time = m.DateTimeField()
-    spotleft = m.IntegerField()
\ No newline at end of file
+    spotleft = m.IntegerField()
+
+    def check_full(self):
+        return self.spotleft != 0
+
+class EnrollClass(m.Model):
+    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
+    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
+
+    def enroll(self, account: Account, classtime: ClassTimeTable):
+        self.account = account
+        self.classtime = classtime
+        self.save()
+
+    def check_enroll(self, account: Account, classtime: ClassTimeTable):
+        return self.objects.filter(account=account, classtime=classtime).exists()
diff --git a/classes/urls.py b/classes/urls.py
index 3aafaaf..ee719d6 100644
--- a/classes/urls.py
+++ b/classes/urls.py
@@ -1,7 +1,16 @@
 from django.urls import path
 
+from classes.views import (
+    ListUpcomingClassView,
+    ListMyClassView,
+    ModifyClassView,
+)
+
 app_name = 'classes'
 
 urlpatterns = [
+    path('list/', ListUpcomingClassView.as_view(), name='list'),
+    path('history/', ListMyClassView.as_view(), name='history'),
+    path('modify/', ModifyClassView.as_view(), name='modify'),
 ]
 
diff --git a/classes/views.py b/classes/views.py
index 8869053..7cc651b 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -1,19 +1,15 @@
-from django.shortcuts import get_object_or_404
-from rest_framework import generics
+from rest_framework import generics, get_object_or_404
 from rest_framework.permissions import IsAuthenticated
+from rest_framework.response import Response
+from rest_framework.views import APIView
 
-from classes.models import Class
+from accounts.models import EnrollClass
+from classes.models import Class, ClassTimeTable
 from classes.serializers import ClassSerializer
-
 from classes.utils import get_classes_with_spots, get_user_classes
-# Create your views here.
-
-class ClassView(generics.RetrieveAPIView):
-    serializer_class = ClassSerializer
 
-    def get_object(self):
-        return get_object_or_404(Class, id=self.kwargs['class'])
 
+# Create your views here.
 class ListUpcomingClassView(generics.ListAPIView):
     serializer_class = ClassSerializer
 
@@ -27,12 +23,33 @@ class ListMyClassView(generics.ListAPIView):
     def get_queryset(self):
         return get_user_classes(self.request.user)
 
-class EnrollClassView(generics.UpdateAPIView):
+class ModifyClassView(APIView):
     permission_classes = (IsAuthenticated,)
-    serializer_class = ClassSerializer
-
-    def get_object(self):
-        return get_object_or_404(Class, id=self.kwargs['class'])
 
-    def perform_update(self, serializer):
-        serializer.save()
\ No newline at end of file
+    def post(self, request):
+        user = request.user
+        classtime = request.data.get('timeid')
+        op = request.data.get('op')
+
+        if not classtime or not op:
+            return Response({'error': 'Missing class or time'}, status=400)
+
+        if op not in ['enroll', 'drop']:
+            return Response({'error': 'Invalid op'}, status=400)
+
+        enroll_class = EnrollClass()
+        if enroll_class.check_enroll(user, classtime) and op == 'enroll':
+            return Response({'error': 'Already enrolled'}, status=400)
+        elif not enroll_class.check_enroll(user, classtime) and op == 'drop':
+            return Response({'error': 'Not enrolled'}, status=400)
+
+        classtime_ = get_object_or_404(ClassTimeTable, id=classtime)
+        if classtime_.check_full() and op == 'enroll':
+            return Response({'error': 'Class is full'}, status=400)
+
+        if op == 'enroll':
+            enroll_class.enroll(user, classtime_)
+            return Response({'message': 'Enrolled'}, status=200)
+        elif op == 'drop':
+            enroll_class.drop(user, classtime_)
+            return Response({'message': 'Dropped'}, status=200)
\ No newline at end of file

commit 8cd4c83fb064dbdfa18f52e74b4d7e4fa5cbce2e
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Mon Nov 14 23:09:34 2022 -0500

    add serializers

diff --git a/classes/admin.py b/classes/admin.py
index 8c38f3f..4e10981 100644
--- a/classes/admin.py
+++ b/classes/admin.py
@@ -1,3 +1,8 @@
 from django.contrib import admin
 
+from classes.models import Class, ClassTimeTable, Keywords
+
 # Register your models here.
+admin.site.register(Class)
+admin.site.register(Keywords)
+admin.site.register(ClassTimeTable)
diff --git a/classes/serializers.py b/classes/serializers.py
new file mode 100644
index 0000000..47b1622
--- /dev/null
+++ b/classes/serializers.py
@@ -0,0 +1,31 @@
+from rest_framework import serializers
+
+from classes.models import Class, ClassTimeTables, Keywords
+
+
+class KeywordsSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Keywords
+        fields = ('id', 'keyword')
+
+
+class ClassTimeTableSerializer(serializers.ModelSerializer):
+    ''' As a user, I want to see the class schedule of a specific studio on its page. 
+    Classes must appear in the order of their start time (from now), and the class information must be shown. 
+    Past or cancelled classes should not be listed.'''
+    class Meta:
+        model = ClassTimeTables
+        fields = ['time', 'spotleft']
+
+
+class ClassSerializer(serializers.ModelSerializer):
+    '''As the website admin, I can create/edit a class in a specific studio. 
+    A class has a name, description, coach, a list of keywords (e.g., upper-body, core, etc.), 
+    capacity, and times. '''
+    keywords = KeywordsSerializer(many=True, read_only=True)
+    timetable = ClassTimeTableSerializer(many=True, read_only=True)
+
+    class Meta:
+        model = Class
+        fields = ['name', 'description', 'coach', 'keywords', 'timetable']
+
diff --git a/classes/urls.py b/classes/urls.py
new file mode 100644
index 0000000..3aafaaf
--- /dev/null
+++ b/classes/urls.py
@@ -0,0 +1,7 @@
+from django.urls import path
+
+app_name = 'classes'
+
+urlpatterns = [
+]
+
diff --git a/classes/utils.py b/classes/utils.py
new file mode 100644
index 0000000..181b78b
--- /dev/null
+++ b/classes/utils.py
@@ -0,0 +1,9 @@
+from accounts.models import User
+
+
+def get_classes_with_spots():
+    ...
+
+def get_user_classes(user: User):
+    ...
+
diff --git a/classes/views.py b/classes/views.py
index 91ea44a..8869053 100644
--- a/classes/views.py
+++ b/classes/views.py
@@ -1,3 +1,38 @@
-from django.shortcuts import render
+from django.shortcuts import get_object_or_404
+from rest_framework import generics
+from rest_framework.permissions import IsAuthenticated
 
+from classes.models import Class
+from classes.serializers import ClassSerializer
+
+from classes.utils import get_classes_with_spots, get_user_classes
 # Create your views here.
+
+class ClassView(generics.RetrieveAPIView):
+    serializer_class = ClassSerializer
+
+    def get_object(self):
+        return get_object_or_404(Class, id=self.kwargs['class'])
+
+class ListUpcomingClassView(generics.ListAPIView):
+    serializer_class = ClassSerializer
+
+    def get_queryset(self):
+        return get_classes_with_spots()
+
+class ListMyClassView(generics.ListAPIView):
+    permission_classes = (IsAuthenticated,)
+    serializer_class = ClassSerializer
+
+    def get_queryset(self):
+        return get_user_classes(self.request.user)
+
+class EnrollClassView(generics.UpdateAPIView):
+    permission_classes = (IsAuthenticated,)
+    serializer_class = ClassSerializer
+
+    def get_object(self):
+        return get_object_or_404(Class, id=self.kwargs['class'])
+
+    def perform_update(self, serializer):
+        serializer.save()
\ No newline at end of file

commit 217bda353c4ee574971944419d95e7fdcdb96116
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Mon Nov 14 22:39:50 2022 -0500

    Added code for Account avatar imagefield, added some code in settings and urls to support image media urls, and added basic validation for phone number and confirm password fields.

diff --git a/TFC/settings.py b/TFC/settings.py
index 60d8999..9c62a78 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -136,6 +136,9 @@ STATIC_URL = "static/"
 
 DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
 
-# media root folder for any images
+# media root folder for any images, gathering uploads
 
 MEDIA_ROOT = BASE_DIR / "images/"
+
+# group all media url
+MEDIA_URL = 'images/'
diff --git a/TFC/urls.py b/TFC/urls.py
index 1df3f49..a4aa970 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -13,6 +13,8 @@ Including another URLconf
     1. Import the include() function: from django.urls import include, path
     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
 """
+from django.conf import settings
+from django.conf.urls.static import static
 from django.contrib import admin
 from django.urls import path, include
 
@@ -20,5 +22,6 @@ urlpatterns = [
     path('admin/', admin.site.urls),
     path('accounts/', include('accounts.urls')),
     path('studios/', include('studios.urls')),
+] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+# add media_URL and MEDIA_ROOT from settings for image urls to work properly
 
-]
diff --git a/accounts/models.py b/accounts/models.py
index d128e9b..e7d92e5 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -1,11 +1,14 @@
 from django.contrib.auth.models import User
+from django.core.validators import RegexValidator
 from django.db import models as m
 
 
 class Account(User):
     # first/last name and email are inherited from User
-    avatar = m.ImageField()
-    phone_number = m.CharField(max_length=250)
+    avatar = m.ImageField(upload_to='account_avatars/')
+    phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$',
+                                 message="Phone number must be in the format: '+999999999', with a maximum of 15 digits" )
+    phone_number = m.CharField(validators=[phone_regex], max_length=250, null=True, blank=True)
 
 class CurrentSubscription(m.Model):
     account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
diff --git a/accounts/serializers.py b/accounts/serializers.py
index 482155f..12381de 100644
--- a/accounts/serializers.py
+++ b/accounts/serializers.py
@@ -43,6 +43,11 @@ class SignupSerializer(serializers.ModelSerializer):
             "password": {"write_only": True, "style": {"input_type": "password"}},
         }
 
+    def validate(self, data):  # override validate function to add custom validation
+        if data['password'] != data['password2']:  # check if pass matches confirm pass
+            raise serializers.ValidationError({"password": "Password fields didn't match."})
+        return data
+
     def create(self, validated_data: dict) -> Account:
         # pop password 2
         validated_data.pop('password2')

commit be5c3bcbb0d34857118c96251b406bc7cbf40344
Merge: 8cccadb b104047
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Mon Nov 14 21:41:13 2022 -0500

    Merge branch 'master' of https://github.com/nathan-hansen/csc309-tfc into account-draft

commit b104047a74f529d9357d0737551fe6494f3c5e29
Merge: d0a7957 3e079cf
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Mon Nov 14 19:48:24 2022 -0500

    Merge pull request #6 from nathan-hansen/initial-studio-rest
    
    Initial studio rest

commit 3e079cfdbee837a913bb75e0bf369e098930665e
Merge: 859fc56 d0a7957
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Mon Nov 14 19:47:31 2022 -0500

    Merge branch 'master' into initial-studio-rest

commit 859fc562a7e8359823b3513b14f887af71fa0106
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Mon Nov 14 19:44:10 2022 -0500

    admin studio views; proximity list

diff --git a/requirements.txt b/requirements.txt
index 09690ed..77c9896 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,4 +1,5 @@
 Django
 djangorestframework
 djangorestframework-simplejwt
+geopy
 Pillow
diff --git a/studios/admin.py b/studios/admin.py
index 8c38f3f..fd903ff 100644
--- a/studios/admin.py
+++ b/studios/admin.py
@@ -1,3 +1,6 @@
 from django.contrib import admin
+from studios.models import Studio, StudioImage, Amenities
 
-# Register your models here.
+admin.site.register(Studio)
+admin.site.register(StudioImage)
+admin.site.register(Amenities)
diff --git a/studios/migrations/0006_alter_amenities_options.py b/studios/migrations/0006_alter_amenities_options.py
new file mode 100644
index 0000000..068409a
--- /dev/null
+++ b/studios/migrations/0006_alter_amenities_options.py
@@ -0,0 +1,17 @@
+# Generated by Django 4.1.3 on 2022-11-15 00:24
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("studios", "0005_alter_studio_phone_number"),
+    ]
+
+    operations = [
+        migrations.AlterModelOptions(
+            name="amenities",
+            options={"verbose_name_plural": "Amenities"},
+        ),
+    ]
diff --git a/studios/models.py b/studios/models.py
index 8271018..54c764f 100644
--- a/studios/models.py
+++ b/studios/models.py
@@ -1,4 +1,24 @@
 from django.db import models as m
+from django.db.models.expressions import RawSQL
+from django.db.backends.signals import connection_created
+from django.dispatch import receiver
+import math
+
+
+# Following method sourced from user @rphlo at
+# https://stackoverflow.com/questions/19703975/django-sort-by-distance
+@receiver(connection_created)
+def extend_sqlite(connection=None, **kwargs):
+    if connection.vendor == "sqlite":
+        # sqlite doesn't natively support math functions, so add them
+        cf = connection.connection.create_function
+        cf('acos', 1, math.acos)
+        cf('cos', 1, math.cos)
+        cf('radians', 1, math.radians)
+        cf('sin', 1, math.sin)
+        cf('least', 2, min)
+        cf('greatest', 2, max)
+        print('SQLite extended successfully.')
 
 class Studio(m.Model):
     name = m.CharField(max_length=250)
@@ -8,6 +28,29 @@ class Studio(m.Model):
     postal_code = m.CharField(max_length=250)
     phone_number = m.CharField(max_length=250)
 
+    # Following method sourced from user @rphlo at
+    # https://stackoverflow.com/questions/19703975/django-sort-by-distance
+    def get_locations_nearby_coords(latitude, longitude, max_distance=None):
+        """
+        Return objects sorted by distance to specified coordinates
+        which distance is less than max_distance given in kilometers
+        """
+        # Great circle distance formula
+        gcd_formula = "6371 * acos(least(greatest(\
+        cos(radians(%s)) * cos(radians(latitude)) \
+        * cos(radians(longitude) - radians(%s)) + \
+        sin(radians(%s)) * sin(radians(latitude)) \
+        , -1), 1))"
+        distance_raw_sql = RawSQL(
+            gcd_formula,
+            (latitude, longitude, latitude)
+        )
+        qs = Studio.objects.all() \
+        .annotate(distance=distance_raw_sql) \
+        .order_by('distance')
+        if max_distance is not None:
+            qs = qs.filter(distance__lt=max_distance)
+        return qs
 
 class StudioImage(m.Model):
     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
@@ -18,4 +61,6 @@ class Amenities(m.Model):
     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='amenities')
     amenity_type = m.CharField(max_length=250)
     quantity = m.IntegerField()
+    class Meta:
+        verbose_name_plural = "Amenities"
 
diff --git a/studios/serializers.py b/studios/serializers.py
index 72a4aaf..115f6bb 100644
--- a/studios/serializers.py
+++ b/studios/serializers.py
@@ -35,6 +35,6 @@ class AmenitiesSerializer(ModelSerializer):
         model = Amenities
         fields = [
                 'studio',
-                'type',
+                'amenity_type',
                 'quantity',
                 ]
diff --git a/studios/urls.py b/studios/urls.py
index c08f2ec..fbaeaff 100644
--- a/studios/urls.py
+++ b/studios/urls.py
@@ -1,19 +1,17 @@
 from django.urls import path
 from studios.views import (
-        CreateStudioView,
-        UpdateStudioView,
-        DeleteStudioView,
         ListStudioByProximityView,
         StudioView,
+        ListStudioImagesView,
+        ListAmenitiesView,
         )
 
 app_name = 'studios'
 
 urlpatterns = [
-        path('create/', CreateStudioView.as_view()),
-        path('<int:pk>/update/', UpdateStudioView.as_view()),
-        path('<int:pk>/delete/', DeleteStudioView.as_view()),
-        path('list/', ListStudioByProximityView.as_view()),
-        path('<int:pk>/', StudioView.as_view()),
+        path('list/<latitude>,<longitude>', ListStudioByProximityView.as_view()),
+        path('<int:studio>/', StudioView.as_view()),
+        path('<int:studio>/images/', ListStudioImagesView.as_view()),
+        path('<int:studio>/amenities/', ListAmenitiesView.as_view()),
 ]
 
diff --git a/studios/views.py b/studios/views.py
index bfe8655..16b63cc 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -1,36 +1,36 @@
 from django.shortcuts import get_object_or_404
+from geopy.distance import geodesic
 from rest_framework import generics
-from rest_framework.permissions import IsAdminUser
-from studios.serializers import StudioSerializer
-from studios.models import Studio
-
-# admin authenticated views
-class CreateStudioView(generics.CreateAPIView):
-    permission_classes = [IsAdminUser]
-    serializer_class = StudioSerializer
-
-
-class UpdateStudioView(generics.UpdateAPIView):
-    serializer_class = StudioSerializer
-    queryset = Studio.objects.all()
-    permission_classes = [IsAdminUser]
-    def partial_update(self, request, *args, **kwargs):
-        kwargs['partial'] = True
-        return self.update(request, *args, **kwargs)
-
-class DeleteStudioView(generics.DestroyAPIView):
-    permission_classes = [IsAdminUser]
-    queryset = Studio.objects.all()
-    serializer_class = StudioSerializer
+from studios.serializers import (
+        StudioSerializer, 
+        StudioImageSerializer, 
+        AmenitiesSerializer
+        )
+from studios.models import Studio, StudioImage, Amenities
 
 # user authenticated views
 class ListStudioByProximityView(generics.ListAPIView):
     serializer_class = StudioSerializer
-    queryset = Studio.objects.all()
-    pass
+    def get_queryset(self):
+        lat = float(self.kwargs['latitude'])
+        lon = float(self.kwargs['longitude'])
+        print(f'lat: {lat}, lon: {lon}')
+        return Studio.get_locations_nearby_coords(lat, lon)
 
 class StudioView(generics.RetrieveAPIView):
     serializer_class = StudioSerializer
 
     def get_object(self):
-        return get_object_or_404(Studio, id=self.kwargs['pk'])
+        return get_object_or_404(Studio, id=self.kwargs['studio'])
+
+# views for related models
+class ListStudioImagesView(generics.ListAPIView):
+    serializer_class = StudioImageSerializer
+    def get_queryset(self):
+        return StudioImage.objects.filter(studio=self.kwargs['studio'])
+
+class ListAmenitiesView(generics.ListAPIView):
+    serializer_class = AmenitiesSerializer
+    def get_queryset(self):
+        return Amenities.objects.filter(studio=self.kwargs['studio'])
+

commit d22283825870bdf6752bb1d964f3813844c85ee5
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Mon Nov 14 18:20:58 2022 -0500

    added upload support to StudioImage model; changed studio phone number to string

diff --git a/.gitignore b/.gitignore
index 4ad4e6a..dd0b9c0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,5 @@
 __pycache__/
 db.sqlite3
 env/
+images/studios/*
+images/avatars/*
diff --git a/TFC/settings.py b/TFC/settings.py
index eadd068..60d8999 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -135,3 +135,7 @@ STATIC_URL = "static/"
 # https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
 
 DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
+
+# media root folder for any images
+
+MEDIA_ROOT = BASE_DIR / "images/"
diff --git a/studios/migrations/0002_amenities.py b/studios/migrations/0002_amenities.py
new file mode 100644
index 0000000..c41114f
--- /dev/null
+++ b/studios/migrations/0002_amenities.py
@@ -0,0 +1,38 @@
+# Generated by Django 4.1.3 on 2022-11-14 21:15
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("studios", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Amenities",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("amenity_type", models.CharField(max_length=250)),
+                ("quantity", models.IntegerField()),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="amenities",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/studios/migrations/0003_alter_studioimage_image.py b/studios/migrations/0003_alter_studioimage_image.py
new file mode 100644
index 0000000..dbf671d
--- /dev/null
+++ b/studios/migrations/0003_alter_studioimage_image.py
@@ -0,0 +1,20 @@
+# Generated by Django 4.1.3 on 2022-11-14 21:36
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("studios", "0002_amenities"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="studioimage",
+            name="image",
+            field=models.ImageField(
+                upload_to="studios/<django.db.models.fields.related.ForeignKey>/"
+            ),
+        ),
+    ]
diff --git a/studios/migrations/0004_alter_studioimage_image.py b/studios/migrations/0004_alter_studioimage_image.py
new file mode 100644
index 0000000..f9cee56
--- /dev/null
+++ b/studios/migrations/0004_alter_studioimage_image.py
@@ -0,0 +1,18 @@
+# Generated by Django 4.1.3 on 2022-11-14 22:53
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("studios", "0003_alter_studioimage_image"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="studioimage",
+            name="image",
+            field=models.ImageField(upload_to="studios/"),
+        ),
+    ]
diff --git a/studios/migrations/0005_alter_studio_phone_number.py b/studios/migrations/0005_alter_studio_phone_number.py
new file mode 100644
index 0000000..7b4abdb
--- /dev/null
+++ b/studios/migrations/0005_alter_studio_phone_number.py
@@ -0,0 +1,18 @@
+# Generated by Django 4.1.3 on 2022-11-14 23:18
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("studios", "0004_alter_studioimage_image"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="studio",
+            name="phone_number",
+            field=models.CharField(max_length=250),
+        ),
+    ]
diff --git a/studios/models.py b/studios/models.py
index de9629e..8271018 100644
--- a/studios/models.py
+++ b/studios/models.py
@@ -6,9 +6,16 @@ class Studio(m.Model):
     latitude = m.FloatField()
     longitude = m.FloatField()
     postal_code = m.CharField(max_length=250)
-    phone_number = m.IntegerField()
+    phone_number = m.CharField(max_length=250)
 
 
 class StudioImage(m.Model):
     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
-    image = m.ImageField()
+    image = m.ImageField(upload_to="studios/")
+
+
+class Amenities(m.Model):
+    studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='amenities')
+    amenity_type = m.CharField(max_length=250)
+    quantity = m.IntegerField()
+
diff --git a/studios/serializers.py b/studios/serializers.py
index c0ae0dc..72a4aaf 100644
--- a/studios/serializers.py
+++ b/studios/serializers.py
@@ -1,5 +1,5 @@
-from rest_framework.serializers import ModelSerializer
-from studios.models import Studio
+from rest_framework.serializers import ModelSerializer, SlugRelatedField
+from studios.models import Studio, StudioImage, Amenities
 
 class StudioSerializer(ModelSerializer):
     class Meta:
@@ -12,3 +12,29 @@ class StudioSerializer(ModelSerializer):
                 'postal_code',
                 'phone_number',
                 ]
+
+
+class StudioImageSerializer(ModelSerializer):
+    studio = SlugRelatedField(
+            queryset = Studio.objects.all(), slug_field = 'pk'
+            )
+    def __init__(self, *args, **kwargs):
+        many = kwargs.pop('many', True)
+        super(StudioImageSerializer, self).__init__(many=many, *args, **kwargs)
+
+    class Meta:
+        model = StudioImage
+        fields = [
+                'studio',
+                'image',
+                ]
+
+
+class AmenitiesSerializer(ModelSerializer):
+    class Meta:
+        model = Amenities
+        fields = [
+                'studio',
+                'type',
+                'quantity',
+                ]

commit 8cccadb5acfd1237ede9c057f35b6edf18ec69f3
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Sun Nov 13 23:01:56 2022 -0500

    Added basic registration, login, view and edit profile functionality

diff --git a/accounts/serializers.py b/accounts/serializers.py
new file mode 100644
index 0000000..482155f
--- /dev/null
+++ b/accounts/serializers.py
@@ -0,0 +1,50 @@
+from rest_framework import serializers
+from django.utils.translation import gettext_lazy as _
+from django.contrib.auth import get_user_model
+from accounts.models import EnrollClass
+from classes.models import ClassTimeTable
+from accounts.models import Account
+
+
+class AccountSerializer(serializers.ModelSerializer):
+    # we use this serializer to serialize the user model in the browsable api (get its data and display it/allow
+    # editing it)
+    class Meta:
+        model = Account
+        fields = ["username", "first_name", "last_name", "email", "phone_number"]
+        read_only_fields = ["password"]
+        # not allowed to edit this attribute, so read only, from tutorial code
+
+
+class EnrollClassSerializer(serializers.ModelSerializer):
+    account = AccountSerializer()
+
+    # classtime = ClassTimeTableSerializer()
+
+    class Meta:
+        model = EnrollClass
+        fields = ['account', 'classtime']
+
+
+# based on the tutorial code
+class SignupSerializer(serializers.ModelSerializer):
+    # Want a signup form that asks for the user's username, firstname, lastname, email, phone_number
+    # and password, we would also like to have an additional field to confirm the password (password2)
+    password2 = serializers.CharField(label=_("Confirm password"), write_only=True, style={"input_type": "password"})
+
+    class Meta:
+        model = Account  # returns the User model that is active in this project
+        fields = ("username", "password", "password2", "first_name", "last_name", "email", "phone_number")
+
+        # Specify the input type for password in the sign up, already did for password 2
+        # we can also specify the write_only attribute to specify that a field should only be used for writing data
+        # and not for reading data
+        extra_kwargs = {
+            "password": {"write_only": True, "style": {"input_type": "password"}},
+        }
+
+    def create(self, validated_data: dict) -> Account:
+        # pop password 2
+        validated_data.pop('password2')
+        # return the created user, use the User create_user method to make the user
+        return Account.objects.create_user(**validated_data)
diff --git a/accounts/urls.py b/accounts/urls.py
index a7380b3..de6863b 100644
--- a/accounts/urls.py
+++ b/accounts/urls.py
@@ -1,6 +1,14 @@
 from django.urls import path
+from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
+from accounts.views import SignUpView, AccountView, AccountUpdateView
 
 app_name = 'accounts'
 
 urlpatterns = [
+    path('login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
+    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
+    path('signup/', SignUpView.as_view(), name='sign_up'),
+    path('<int:account_id>/', AccountView.as_view()),
+    path('update/', AccountUpdateView.as_view())
+
 ]
diff --git a/accounts/views.py b/accounts/views.py
index 91ea44a..86da5b3 100644
--- a/accounts/views.py
+++ b/accounts/views.py
@@ -1,3 +1,39 @@
 from django.shortcuts import render
+from rest_framework.generics import RetrieveAPIView, ListAPIView, CreateAPIView, UpdateAPIView
+from rest_framework.permissions import IsAuthenticated, AllowAny
+from accounts.models import Account
+from accounts.serializers import AccountSerializer, SignupSerializer
+from django.shortcuts import get_object_or_404
+from rest_framework.views import APIView
+from rest_framework.response import Response
+from rest_framework import status
+
 
 # Create your views here.
+class SignUpView(APIView):
+    permission_classes = (AllowAny,)
+    serializer_class = SignupSerializer
+
+    def post(self, request):
+        sign_up_serializer = self.serializer_class(data=request.data)
+        sign_up_serializer.is_valid(raise_exception=True)
+        sign_up_serializer.save()
+
+        return Response(sign_up_serializer.data, status=status.HTTP_201_CREATED)
+
+
+class AccountView(RetrieveAPIView):
+    serializer_class = AccountSerializer
+
+    def get_object(self):
+        return get_object_or_404(Account, id=self.kwargs['account_id'])
+
+
+class AccountUpdateView(UpdateAPIView):
+    permission_classes = [IsAuthenticated]
+    # make sure user is logged in
+    serializer_class = AccountSerializer
+
+    def get_object(self):
+        return get_object_or_404(Account, id=self.request.user.pk)
+        # use request.user.pk so that the logged in user can only edit their own profile

commit ea73f1ab64d3235dfb8e294f14f8496b6a7442ee
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Sun Nov 13 20:52:43 2022 -0500

    studio CRUD working

diff --git a/TFC/urls.py b/TFC/urls.py
index 3db96a3..1df3f49 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -17,6 +17,8 @@ from django.contrib import admin
 from django.urls import path, include
 
 urlpatterns = [
-    path("admin/", admin.site.urls),
-    path('accounts/', include('accounts.urls'))
+    path('admin/', admin.site.urls),
+    path('accounts/', include('accounts.urls')),
+    path('studios/', include('studios.urls')),
+
 ]
diff --git a/studios/serializers.py b/studios/serializers.py
new file mode 100644
index 0000000..c0ae0dc
--- /dev/null
+++ b/studios/serializers.py
@@ -0,0 +1,14 @@
+from rest_framework.serializers import ModelSerializer
+from studios.models import Studio
+
+class StudioSerializer(ModelSerializer):
+    class Meta:
+        model = Studio
+        fields = [
+                'name',
+                'address',
+                'latitude',
+                'longitude',
+                'postal_code',
+                'phone_number',
+                ]
diff --git a/studios/urls.py b/studios/urls.py
new file mode 100644
index 0000000..c08f2ec
--- /dev/null
+++ b/studios/urls.py
@@ -0,0 +1,19 @@
+from django.urls import path
+from studios.views import (
+        CreateStudioView,
+        UpdateStudioView,
+        DeleteStudioView,
+        ListStudioByProximityView,
+        StudioView,
+        )
+
+app_name = 'studios'
+
+urlpatterns = [
+        path('create/', CreateStudioView.as_view()),
+        path('<int:pk>/update/', UpdateStudioView.as_view()),
+        path('<int:pk>/delete/', DeleteStudioView.as_view()),
+        path('list/', ListStudioByProximityView.as_view()),
+        path('<int:pk>/', StudioView.as_view()),
+]
+
diff --git a/studios/views.py b/studios/views.py
index 91ea44a..bfe8655 100644
--- a/studios/views.py
+++ b/studios/views.py
@@ -1,3 +1,36 @@
-from django.shortcuts import render
+from django.shortcuts import get_object_or_404
+from rest_framework import generics
+from rest_framework.permissions import IsAdminUser
+from studios.serializers import StudioSerializer
+from studios.models import Studio
 
-# Create your views here.
+# admin authenticated views
+class CreateStudioView(generics.CreateAPIView):
+    permission_classes = [IsAdminUser]
+    serializer_class = StudioSerializer
+
+
+class UpdateStudioView(generics.UpdateAPIView):
+    serializer_class = StudioSerializer
+    queryset = Studio.objects.all()
+    permission_classes = [IsAdminUser]
+    def partial_update(self, request, *args, **kwargs):
+        kwargs['partial'] = True
+        return self.update(request, *args, **kwargs)
+
+class DeleteStudioView(generics.DestroyAPIView):
+    permission_classes = [IsAdminUser]
+    queryset = Studio.objects.all()
+    serializer_class = StudioSerializer
+
+# user authenticated views
+class ListStudioByProximityView(generics.ListAPIView):
+    serializer_class = StudioSerializer
+    queryset = Studio.objects.all()
+    pass
+
+class StudioView(generics.RetrieveAPIView):
+    serializer_class = StudioSerializer
+
+    def get_object(self):
+        return get_object_or_404(Studio, id=self.kwargs['pk'])

commit d0a7957540c553fa900fa1bfebb9eff1967efb12
Merge: 60f3ad6 8a7f9fc
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 12 19:47:28 2022 -0500

    Merge pull request #5 from nathan-hansen/model_class
    
    Convert DB schema into Models

commit 8a7f9fc2cf6037a94f303b4a7dbaa357b5221de5
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 12 17:32:52 2022 -0500

    modify db here and there

diff --git a/Documents/CSC309.png b/Documents/CSC309.png
index 63c7abd..0c0326e 100644
Binary files a/Documents/CSC309.png and b/Documents/CSC309.png differ
diff --git a/Documents/DBSchema.sql b/Documents/DBSchema.sql
index d730e53..ec02b68 100644
--- a/Documents/DBSchema.sql
+++ b/Documents/DBSchema.sql
@@ -7,7 +7,6 @@ table Account [headercolor: #2D6512] {
   email StringField
   avatar ImageField
   phone_number StringField
-  current_subscription ForeignKey
 }
 
 table Studio [headercolor: #4B82B0] {
@@ -67,11 +66,11 @@ table SubscriptionPlan [headercolor: #79AD51] {
   payment DecimalField
   // one of "monthly", "yearly", etc
   // change if more complexity needed
-  interval StringField
+  interval DurationField
 }
 
 table CurrentSubscription [headercolor: #126E7A] {
-  id int [pk]
+  account ForeignKey
   plan ForeignKey
   expiration DateTimeField
 }
@@ -81,9 +80,11 @@ table PaymentInfo [headercolor: #24BAB1] {
   account ForeignKey
   card_number IntegerField
   card_expiry IntegerField
+  cvv IntegerField
+  name_on_card StringField
 }
 Ref: PaymentInfo.account - Account.id
-Ref: Account.current_subscription - CurrentSubscription.id
+Ref: Account.id - CurrentSubscription.account
 
 table PaymentHistory [headercolor: #24BAB1] {
   id int [pk]

commit 2ac7df98e07f90ecf5bb6e4d05733adfe3521c06
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 12 17:32:09 2022 -0500

    migrate

diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
new file mode 100644
index 0000000..a072b37
--- /dev/null
+++ b/accounts/migrations/0001_initial.py
@@ -0,0 +1,54 @@
+# Generated by Django 4.1.3 on 2022-11-12 22:31
+
+from django.conf import settings
+import django.contrib.auth.models
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('auth', '0012_alter_user_first_name_max_length'),
+        ('classes', '0001_initial'),
+        ('subscriptions', '__first__'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Account',
+            fields=[
+                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
+                ('avatar', models.ImageField(upload_to='')),
+                ('phone_number', models.CharField(max_length=250)),
+            ],
+            options={
+                'verbose_name': 'user',
+                'verbose_name_plural': 'users',
+                'abstract': False,
+            },
+            bases=('auth.user',),
+            managers=[
+                ('objects', django.contrib.auth.models.UserManager()),
+            ],
+        ),
+        migrations.CreateModel(
+            name='EnrollClass',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='accounts.account')),
+                ('classtime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enroll_class', to='classes.classtimetable')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CurrentSubscription',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('expiration', models.DateTimeField()),
+                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='accounts.account')),
+                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_subscription', to='subscriptions.subscriptionplan')),
+            ],
+        ),
+    ]
diff --git a/accounts/models.py b/accounts/models.py
index 768bf95..d128e9b 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -6,7 +6,6 @@ class Account(User):
     # first/last name and email are inherited from User
     avatar = m.ImageField()
     phone_number = m.CharField(max_length=250)
-    current_subscription = m.ForeignKey('subscriptions.CurrentSubscription', on_delete=m.SET_NULL, related_name='account')
 
 class CurrentSubscription(m.Model):
     account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
new file mode 100644
index 0000000..88e945f
--- /dev/null
+++ b/classes/migrations/0001_initial.py
@@ -0,0 +1,44 @@
+# Generated by Django 4.1.3 on 2022-11-12 22:31
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('studios', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Class',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=250)),
+                ('description', models.TextField()),
+                ('coach', models.CharField(max_length=250)),
+                ('duration', models.DurationField()),
+                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tfc_class', to='studios.studio')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Keywords',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('keyword', models.CharField(max_length=250)),
+                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keywords', to='classes.class')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ClassTimeTable',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('time', models.DateTimeField()),
+                ('spotleft', models.IntegerField()),
+                ('classid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable', to='classes.class')),
+            ],
+        ),
+    ]
diff --git a/payments/models.py b/payments/models.py
index 6873cde..da41b3a 100644
--- a/payments/models.py
+++ b/payments/models.py
@@ -2,14 +2,14 @@ from django.db import models as m
 
 
 class PaymentInfo(m.Model):
-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_info')
+    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='payment_info')
     card_number = m.CharField(max_length=250)
     expiry_date = m.DateField()
     cvv = m.IntegerField()
     name_on_card = m.CharField(max_length=250)
 
 class PaymentHistory(m.Model):
-    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_history')
+    account = m.ForeignKey('accounts.Account', on_delete=m.CASCADE, related_name='payment_history')
     timestamp = m.DateTimeField()
     amount = m.FloatField()
     card_number = m.CharField(max_length=250)
diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
new file mode 100644
index 0000000..904fd06
--- /dev/null
+++ b/studios/migrations/0001_initial.py
@@ -0,0 +1,44 @@
+# Generated by Django 4.1.3 on 2022-11-12 22:31
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Studio',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=250)),
+                ('address', models.CharField(max_length=250)),
+                ('latitude', models.FloatField()),
+                ('longitude', models.FloatField()),
+                ('postal_code', models.CharField(max_length=250)),
+                ('phone_number', models.CharField(max_length=250)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='StudioImage',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('image', models.ImageField(upload_to='')),
+                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='studios.studio')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Amenities',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('type', models.CharField(max_length=250)),
+                ('quantity', models.IntegerField()),
+                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='studios.studio')),
+            ],
+        ),
+    ]

commit 7e31469be54fa09be91a46ecce6af2b65b25358d
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 12 17:26:14 2022 -0500

    finish init contribute; remove old migration

diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
deleted file mode 100644
index 30a162f..0000000
--- a/accounts/migrations/0001_initial.py
+++ /dev/null
@@ -1,45 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-11 02:37
-
-from django.conf import settings
-import django.contrib.auth.models
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ("auth", "0012_alter_user_first_name_max_length"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="User",
-            fields=[
-                (
-                    "user_ptr",
-                    models.OneToOneField(
-                        auto_created=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        parent_link=True,
-                        primary_key=True,
-                        serialize=False,
-                        to=settings.AUTH_USER_MODEL,
-                    ),
-                ),
-                ("avatar", models.ImageField(upload_to="")),
-                ("phone_number", models.IntegerField()),
-            ],
-            options={
-                "verbose_name": "user",
-                "verbose_name_plural": "users",
-                "abstract": False,
-            },
-            bases=("auth.user",),
-            managers=[
-                ("objects", django.contrib.auth.models.UserManager()),
-            ],
-        ),
-    ]
diff --git a/accounts/models.py b/accounts/models.py
index 99e3872..768bf95 100644
--- a/accounts/models.py
+++ b/accounts/models.py
@@ -1,6 +1,18 @@
-from django.db import models as m
 from django.contrib.auth.models import User
+from django.db import models as m
+
 
-class User(User):
+class Account(User):
+    # first/last name and email are inherited from User
     avatar = m.ImageField()
-    phone_number = m.IntegerField()
+    phone_number = m.CharField(max_length=250)
+    current_subscription = m.ForeignKey('subscriptions.CurrentSubscription', on_delete=m.SET_NULL, related_name='account')
+
+class CurrentSubscription(m.Model):
+    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='current_subscription')
+    plan = m.ForeignKey('subscriptions.SubscriptionPlan', on_delete=m.CASCADE, related_name='current_subscription')
+    expiration = m.DateTimeField()
+
+class EnrollClass(m.Model):
+    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='enroll_class')
+    classtime = m.ForeignKey('classes.ClassTimeTable', on_delete=m.CASCADE, related_name='enroll_class')
\ No newline at end of file
diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
deleted file mode 100644
index 61a2604..0000000
--- a/classes/migrations/0001_initial.py
+++ /dev/null
@@ -1,45 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-11 02:37
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ("studios", "0001_initial"),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="Class",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("name", models.CharField(max_length=250)),
-                ("description", models.TextField()),
-                ("coach", models.CharField(max_length=250)),
-                ("keywords", models.TextField()),
-                ("capacity", models.IntegerField()),
-                ("start_time", models.DateTimeField()),
-                ("duration", models.DurationField()),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="tfc_class",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-        ),
-    ]
diff --git a/classes/models.py b/classes/models.py
index e3caecc..b9ffe69 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -6,7 +6,13 @@ class Class(m.Model):
     name = m.CharField(max_length=250)
     description = m.TextField()
     coach = m.CharField(max_length=250)
-    keywords = m.TextField()
-    capacity = m.IntegerField()
-    start_time = m.DateTimeField()
     duration = m.DurationField()
+
+class Keywords(m.Model):
+    classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='keywords')
+    keyword = m.CharField(max_length=250)
+
+class ClassTimeTable(m.Model):
+    classid = m.ForeignKey('Class', on_delete=m.CASCADE, related_name='timetable')
+    time = m.DateTimeField()
+    spotleft = m.IntegerField()
\ No newline at end of file
diff --git a/payments/models.py b/payments/models.py
index 90f53fe..6873cde 100644
--- a/payments/models.py
+++ b/payments/models.py
@@ -1,15 +1,16 @@
 from django.db import models as m
 
-class Payment(m.Model):
-    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='user_payment')
-    card_number = m.IntegerField()
-    card_expiry = m.IntegerField()
-    card_security = m.IntegerField()
-    current_subscription = m.ForeignKey('subscriptions.Subscription', null=True, on_delete=m.SET_NULL, related_name='current_subscription_payment')
 
+class PaymentInfo(m.Model):
+    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_info')
+    card_number = m.CharField(max_length=250)
+    expiry_date = m.DateField()
+    cvv = m.IntegerField()
+    name_on_card = m.CharField(max_length=250)
 
 class PaymentHistory(m.Model):
-    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='payment_history')
+    account = m.ForeignKey('Account', on_delete=m.CASCADE, related_name='payment_history')
     timestamp = m.DateTimeField()
-    amount = m.DecimalField(decimal_places=2, max_digits=12)
-
+    amount = m.FloatField()
+    card_number = m.CharField(max_length=250)
+    card_expiry = m.DateField()
\ No newline at end of file
diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
deleted file mode 100644
index 853bc9b..0000000
--- a/studios/migrations/0001_initial.py
+++ /dev/null
@@ -1,57 +0,0 @@
-# Generated by Django 4.1.3 on 2022-11-11 02:37
-
-from django.db import migrations, models
-import django.db.models.deletion
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = []
-
-    operations = [
-        migrations.CreateModel(
-            name="Studio",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("name", models.CharField(max_length=250)),
-                ("address", models.CharField(max_length=250)),
-                ("latitude", models.FloatField()),
-                ("longitude", models.FloatField()),
-                ("postal_code", models.CharField(max_length=250)),
-                ("phone_number", models.IntegerField()),
-            ],
-        ),
-        migrations.CreateModel(
-            name="StudioImage",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("image", models.ImageField(upload_to="")),
-                (
-                    "studio",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="image",
-                        to="studios.studio",
-                    ),
-                ),
-            ],
-        ),
-    ]
diff --git a/studios/models.py b/studios/models.py
index de9629e..be48700 100644
--- a/studios/models.py
+++ b/studios/models.py
@@ -1,14 +1,20 @@
 from django.db import models as m
 
+
 class Studio(m.Model):
     name = m.CharField(max_length=250)
     address = m.CharField(max_length=250)
     latitude = m.FloatField()
     longitude = m.FloatField()
     postal_code = m.CharField(max_length=250)
-    phone_number = m.IntegerField()
+    phone_number = m.CharField(max_length=250)
 
 
 class StudioImage(m.Model):
     studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
     image = m.ImageField()
+
+class Amenities(m.Model):
+    studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='amenities')
+    type = m.CharField(max_length=250)
+    quantity = m.IntegerField()
\ No newline at end of file
diff --git a/subscriptions/models.py b/subscriptions/models.py
index c8b2249..416ad24 100644
--- a/subscriptions/models.py
+++ b/subscriptions/models.py
@@ -1,6 +1,7 @@
 from django.db import models as m
 
-class Subscription(m.Model):
+
+class SubscriptionPlan(m.Model):
     payment = m.DecimalField(decimal_places=2, max_digits=12)
-    # TODO: interval should be one of 'weekly', 'yearly', 'daily', etc
-    interval = m.CharField(max_length=16)
+    interval = m.DurationField()
+

commit af6dee3fed84637a65f0e63716a8d87324983756
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 12 16:44:21 2022 -0500

    init commit

diff --git a/classes/models.py b/classes/models.py
index 7d384d5..e3caecc 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -1,5 +1,6 @@
 from django.db import models as m
 
+
 class Class(m.Model):
     studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='tfc_class')
     name = m.CharField(max_length=250)

commit 60f3ad6e080e69a638a7cdc72b105bb4e84adaa5
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Sat Nov 12 16:40:54 2022 -0500

    change class name

diff --git a/Documents/CSC309.png b/Documents/CSC309.png
index 0bc5406..63c7abd 100644
Binary files a/Documents/CSC309.png and b/Documents/CSC309.png differ
diff --git a/Documents/DBSchema.sql b/Documents/DBSchema.sql
index 9bfa57f..d730e53 100644
--- a/Documents/DBSchema.sql
+++ b/Documents/DBSchema.sql
@@ -48,19 +48,19 @@ Ref: Class.studio > Studio.id
 
 table Keywords [headercolor: #EB801B] {
   keyword StringField
-  class ForeignKey
+  classid ForeignKey
 }
-Ref: Keywords.class > Class.id
+Ref: Keywords.classid > Class.id
 
 // Use this table if you want to cancel 
 // one time in a recursive class
 table ClassTimeTable [headercolor: #EB801B] {
   id int [pk]
-  class ForeignKey
+  classid ForeignKey
   time DateTimeField
   spotleft IntegerField
 }
-Ref: ClassTimeTable.class > Class.id
+Ref: ClassTimeTable.classid > Class.id
 
 table SubscriptionPlan [headercolor: #79AD51] {
   id int [pk]

commit 08c3059f48b7996e8374a69eb60430bcea04418c
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Fri Nov 11 23:16:57 2022 -0500

    added django rest prerequisites

diff --git a/TFC/settings.py b/TFC/settings.py
index 02584ff..eadd068 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -42,8 +42,17 @@ INSTALLED_APPS = [
     "studios",
     "payments",
     "subscriptions",
+    "rest_framework",
 ]
 
+REST_FRAMEWORK = {
+    'DEFAULT_AUTHENTICATION_CLASSES': (
+        'rest_framework_simplejwt.authentication.JWTAuthentication',
+        'rest_framework.authentication.SessionAuthentication',
+        'rest_framework.authentication.BasicAuthentication',
+    ),
+}
+
 MIDDLEWARE = [
     "django.middleware.security.SecurityMiddleware",
     "django.contrib.sessions.middleware.SessionMiddleware",
diff --git a/requirements.txt b/requirements.txt
index 19781b7..09690ed 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,2 +1,4 @@
 Django
+djangorestframework
+djangorestframework-simplejwt
 Pillow

commit e5b42ad50fa7d2d000470c7afcd463938e42fc5e
Merge: 7facdf1 e31c595
Author: Nathan <47332205+nathan-hansen@users.noreply.github.com>
Date:   Fri Nov 11 22:46:34 2022 -0500

    Merge pull request #2 from nathan-hansen/DB-file
    
    Create DBSchema.sql

commit e31c59586870cf9ccb7128bf8b0f345ccfb8632f
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 11 22:44:45 2022 -0500

    add pictures

diff --git a/Documents/CSC309.png b/Documents/CSC309.png
new file mode 100644
index 0000000..0bc5406
Binary files /dev/null and b/Documents/CSC309.png differ
diff --git a/Documents/DBSchema.sql b/Documents/DBSchema.sql
index fa5500a..9bfa57f 100644
--- a/Documents/DBSchema.sql
+++ b/Documents/DBSchema.sql
@@ -1,3 +1,5 @@
+-- Image generated by dbdiagram.io
+
 table Account [headercolor: #2D6512] {
   id int [pk]
   first_name StringField

commit b12e5a58152dee3a010a628ffd2e4be8c6586aa6
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 11 22:42:39 2022 -0500

    fix one-to-one

diff --git a/DBSchema.sql b/Documents/DBSchema.sql
similarity index 68%
rename from DBSchema.sql
rename to Documents/DBSchema.sql
index 0bac5c9..fa5500a 100644
--- a/DBSchema.sql
+++ b/Documents/DBSchema.sql
@@ -1,4 +1,4 @@
-table Account {
+table Account [headercolor: #2D6512] {
   id int [pk]
   first_name StringField
   last_name StringField
@@ -8,7 +8,7 @@ table Account {
   current_subscription ForeignKey
 }
 
-table Studio {
+table Studio [headercolor: #4B82B0] {
   id int [pk]
   name StringField
   address StringField
@@ -19,20 +19,20 @@ table Studio {
   // images
 }
 
-table StudioImage {
+table StudioImage [headercolor: #4B82B0] {
   studio ForeignKey
   image ImageField
 }
 Ref: StudioImage.studio > Studio.id
 
-table Amenities {
+table Amenities [headercolor: #4B82B0] {
   studio ForeignKey
   type StringField
   quantity int
 }
 Ref: Amenities.studio > Studio.id
 
-table Class {
+table Class [headercolor: #EB801B] {
   id int [pk]
   studio ForeignKey
   name StringField
@@ -44,7 +44,7 @@ table Class {
 }
 Ref: Class.studio > Studio.id
 
-table Keywords {
+table Keywords [headercolor: #EB801B] {
   keyword StringField
   class ForeignKey
 }
@@ -52,7 +52,7 @@ Ref: Keywords.class > Class.id
 
 // Use this table if you want to cancel 
 // one time in a recursive class
-table ClassTimeTable {
+table ClassTimeTable [headercolor: #EB801B] {
   id int [pk]
   class ForeignKey
   time DateTimeField
@@ -60,7 +60,7 @@ table ClassTimeTable {
 }
 Ref: ClassTimeTable.class > Class.id
 
-table SubscriptionPlan {
+table SubscriptionPlan [headercolor: #79AD51] {
   id int [pk]
   payment DecimalField
   // one of "monthly", "yearly", etc
@@ -68,22 +68,22 @@ table SubscriptionPlan {
   interval StringField
 }
 
-table CurrentSubscription {
+table CurrentSubscription [headercolor: #126E7A] {
   id int [pk]
   plan ForeignKey
   expiration DateTimeField
 }
-Ref: CurrentSubscription.plan > SubscriptionPlan.id
+Ref: CurrentSubscription.plan - SubscriptionPlan.id
 
-table Payment {
+table PaymentInfo [headercolor: #24BAB1] {
   account ForeignKey
   card_number IntegerField
   card_expiry IntegerField
 }
-Ref: Payment.account > Account.id
-Ref: Account.current_subscription > CurrentSubscription.id
+Ref: PaymentInfo.account - Account.id
+Ref: Account.current_subscription - CurrentSubscription.id
 
-table PaymentHistory {
+table PaymentHistory [headercolor: #24BAB1] {
   id int [pk]
   account ForeignKey
   timestamp DateTimeField
@@ -93,9 +93,9 @@ table PaymentHistory {
 }
 Ref: PaymentHistory.account > Account.id
 
-table EnrollClass {
+table EnrollClass [headercolor: #DE65C3] {
   account ForeignKey
   classtime ForeignKey
 }
 Ref: EnrollClass.account > Account.id
-Ref: EnrollClass.classtime > ClassTimeTable.id
+Ref: EnrollClass.classtime > ClassTimeTable.id
\ No newline at end of file

commit ca372a4d67a8672ee5ea88dbddc262e6aaa9a282
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 11 22:32:52 2022 -0500

    Subscription

diff --git a/DBSchema.sql b/DBSchema.sql
index 186f33a..0bac5c9 100644
--- a/DBSchema.sql
+++ b/DBSchema.sql
@@ -5,7 +5,7 @@ table Account {
   email StringField
   avatar ImageField
   phone_number StringField
-  
+  current_subscription ForeignKey
 }
 
 table Studio {
@@ -60,7 +60,7 @@ table ClassTimeTable {
 }
 Ref: ClassTimeTable.class > Class.id
 
-table Subscription {
+table SubscriptionPlan {
   id int [pk]
   payment DecimalField
   // one of "monthly", "yearly", etc
@@ -68,16 +68,20 @@ table Subscription {
   interval StringField
 }
 
-table Payment {
+table CurrentSubscription {
   id int [pk]
+  plan ForeignKey
+  expiration DateTimeField
+}
+Ref: CurrentSubscription.plan > SubscriptionPlan.id
+
+table Payment {
   account ForeignKey
   card_number IntegerField
   card_expiry IntegerField
-  card_security IntegerField
-  current_subscription ForeignKey
 }
 Ref: Payment.account > Account.id
-Ref: Payment.current_subscription > Subscription.id
+Ref: Account.current_subscription > CurrentSubscription.id
 
 table PaymentHistory {
   id int [pk]
@@ -86,7 +90,6 @@ table PaymentHistory {
   amount DecimalField
   card_number IntegerField
   card_expiry IntegerField
-  card_security IntegerField
 }
 Ref: PaymentHistory.account > Account.id
 

commit d0f8ab3cf382159e02d8c9bb75661008827a8c80
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 11 22:13:10 2022 -0500

    add course booking

diff --git a/DBSchema.sql b/DBSchema.sql
index 63e532e..186f33a 100644
--- a/DBSchema.sql
+++ b/DBSchema.sql
@@ -1,4 +1,4 @@
-table User {
+table Account {
   id int [pk]
   first_name StringField
   last_name StringField
@@ -27,7 +27,7 @@ Ref: StudioImage.studio > Studio.id
 
 table Amenities {
   studio ForeignKey
-  type varchar
+  type StringField
   quantity int
 }
 Ref: Amenities.studio > Studio.id
@@ -40,14 +40,26 @@ table Class {
   coach StringField
   // keywords type could change...
   // assess during implementation
-  keywords TextField
-  capacity IntegerField
-  start_time DateTimeField
-  // this could be end time instead
-  duration DurationField 
+  duration DurationField
 }
 Ref: Class.studio > Studio.id
 
+table Keywords {
+  keyword StringField
+  class ForeignKey
+}
+Ref: Keywords.class > Class.id
+
+// Use this table if you want to cancel 
+// one time in a recursive class
+table ClassTimeTable {
+  id int [pk]
+  class ForeignKey
+  time DateTimeField
+  spotleft IntegerField
+}
+Ref: ClassTimeTable.class > Class.id
+
 table Subscription {
   id int [pk]
   payment DecimalField
@@ -58,23 +70,29 @@ table Subscription {
 
 table Payment {
   id int [pk]
-  user ForeignKey
+  account ForeignKey
   card_number IntegerField
   card_expiry IntegerField
   card_security IntegerField
   current_subscription ForeignKey
 }
-Ref: Payment.user > User.id
+Ref: Payment.account > Account.id
 Ref: Payment.current_subscription > Subscription.id
 
 table PaymentHistory {
   id int [pk]
-  user ForeignKey
+  account ForeignKey
   timestamp DateTimeField
   amount DecimalField
   card_number IntegerField
   card_expiry IntegerField
   card_security IntegerField
 }
-Ref: PaymentHistory.user > User.id
+Ref: PaymentHistory.account > Account.id
 
+table EnrollClass {
+  account ForeignKey
+  classtime ForeignKey
+}
+Ref: EnrollClass.account > Account.id
+Ref: EnrollClass.classtime > ClassTimeTable.id

commit 73f198f950700d04da5b4778114d8918b92cdb7c
Author: RealFakeAccount <63186767+RealFakeAccount@users.noreply.github.com>
Date:   Fri Nov 11 20:57:55 2022 -0500

    Create DBSchema.sql
    
    schema file for collaboration. #1

diff --git a/DBSchema.sql b/DBSchema.sql
new file mode 100644
index 0000000..63e532e
--- /dev/null
+++ b/DBSchema.sql
@@ -0,0 +1,80 @@
+table User {
+  id int [pk]
+  first_name StringField
+  last_name StringField
+  email StringField
+  avatar ImageField
+  phone_number StringField
+  
+}
+
+table Studio {
+  id int [pk]
+  name StringField
+  address StringField
+  latitude FloatField
+  longitude FloatField
+  postal_code StringField
+  phone_number StringField
+  // images
+}
+
+table StudioImage {
+  studio ForeignKey
+  image ImageField
+}
+Ref: StudioImage.studio > Studio.id
+
+table Amenities {
+  studio ForeignKey
+  type varchar
+  quantity int
+}
+Ref: Amenities.studio > Studio.id
+
+table Class {
+  id int [pk]
+  studio ForeignKey
+  name StringField
+  description TextField
+  coach StringField
+  // keywords type could change...
+  // assess during implementation
+  keywords TextField
+  capacity IntegerField
+  start_time DateTimeField
+  // this could be end time instead
+  duration DurationField 
+}
+Ref: Class.studio > Studio.id
+
+table Subscription {
+  id int [pk]
+  payment DecimalField
+  // one of "monthly", "yearly", etc
+  // change if more complexity needed
+  interval StringField
+}
+
+table Payment {
+  id int [pk]
+  user ForeignKey
+  card_number IntegerField
+  card_expiry IntegerField
+  card_security IntegerField
+  current_subscription ForeignKey
+}
+Ref: Payment.user > User.id
+Ref: Payment.current_subscription > Subscription.id
+
+table PaymentHistory {
+  id int [pk]
+  user ForeignKey
+  timestamp DateTimeField
+  amount DecimalField
+  card_number IntegerField
+  card_expiry IntegerField
+  card_security IntegerField
+}
+Ref: PaymentHistory.user > User.id
+

commit 7facdf1dbd3cab7282be958fdb22d4d2f3bb2d8f
Author: ed29leung <edwardleung.ca@gmail.com>
Date:   Thu Nov 10 23:15:15 2022 -0500

    Test Commit - added urls.py file to accounts

diff --git a/TFC/urls.py b/TFC/urls.py
index b705392..3db96a3 100644
--- a/TFC/urls.py
+++ b/TFC/urls.py
@@ -14,8 +14,9 @@ Including another URLconf
     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
 """
 from django.contrib import admin
-from django.urls import path
+from django.urls import path, include
 
 urlpatterns = [
     path("admin/", admin.site.urls),
+    path('accounts/', include('accounts.urls'))
 ]
diff --git a/accounts/urls.py b/accounts/urls.py
new file mode 100644
index 0000000..a7380b3
--- /dev/null
+++ b/accounts/urls.py
@@ -0,0 +1,6 @@
+from django.urls import path
+
+app_name = 'accounts'
+
+urlpatterns = [
+]

commit 4db7802d19f39c868b4034bee6c4d5ce1e5f1799
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Thu Nov 10 21:38:53 2022 -0500

    added initial payments/subscriptions; fixed studio location

diff --git a/TFC/settings.py b/TFC/settings.py
index 5f7ca4f..02584ff 100644
--- a/TFC/settings.py
+++ b/TFC/settings.py
@@ -40,6 +40,8 @@ INSTALLED_APPS = [
     "accounts",
     "classes",
     "studios",
+    "payments",
+    "subscriptions",
 ]
 
 MIDDLEWARE = [
diff --git a/accounts/migrations/0001_initial.py b/accounts/migrations/0001_initial.py
new file mode 100644
index 0000000..30a162f
--- /dev/null
+++ b/accounts/migrations/0001_initial.py
@@ -0,0 +1,45 @@
+# Generated by Django 4.1.3 on 2022-11-11 02:37
+
+from django.conf import settings
+import django.contrib.auth.models
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("auth", "0012_alter_user_first_name_max_length"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="User",
+            fields=[
+                (
+                    "user_ptr",
+                    models.OneToOneField(
+                        auto_created=True,
+                        on_delete=django.db.models.deletion.CASCADE,
+                        parent_link=True,
+                        primary_key=True,
+                        serialize=False,
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+                ("avatar", models.ImageField(upload_to="")),
+                ("phone_number", models.IntegerField()),
+            ],
+            options={
+                "verbose_name": "user",
+                "verbose_name_plural": "users",
+                "abstract": False,
+            },
+            bases=("auth.user",),
+            managers=[
+                ("objects", django.contrib.auth.models.UserManager()),
+            ],
+        ),
+    ]
diff --git a/classes/migrations/0001_initial.py b/classes/migrations/0001_initial.py
new file mode 100644
index 0000000..61a2604
--- /dev/null
+++ b/classes/migrations/0001_initial.py
@@ -0,0 +1,45 @@
+# Generated by Django 4.1.3 on 2022-11-11 02:37
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ("studios", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="Class",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=250)),
+                ("description", models.TextField()),
+                ("coach", models.CharField(max_length=250)),
+                ("keywords", models.TextField()),
+                ("capacity", models.IntegerField()),
+                ("start_time", models.DateTimeField()),
+                ("duration", models.DurationField()),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="tfc_class",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/payments/__init__.py b/payments/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/payments/admin.py b/payments/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/payments/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/payments/apps.py b/payments/apps.py
new file mode 100644
index 0000000..61898af
--- /dev/null
+++ b/payments/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class PaymentsConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "payments"
diff --git a/payments/models.py b/payments/models.py
new file mode 100644
index 0000000..90f53fe
--- /dev/null
+++ b/payments/models.py
@@ -0,0 +1,15 @@
+from django.db import models as m
+
+class Payment(m.Model):
+    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='user_payment')
+    card_number = m.IntegerField()
+    card_expiry = m.IntegerField()
+    card_security = m.IntegerField()
+    current_subscription = m.ForeignKey('subscriptions.Subscription', null=True, on_delete=m.SET_NULL, related_name='current_subscription_payment')
+
+
+class PaymentHistory(m.Model):
+    user = m.ForeignKey('accounts.User', on_delete=m.CASCADE, related_name='payment_history')
+    timestamp = m.DateTimeField()
+    amount = m.DecimalField(decimal_places=2, max_digits=12)
+
diff --git a/payments/tests.py b/payments/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/payments/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/payments/views.py b/payments/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/payments/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/studios/migrations/0001_initial.py b/studios/migrations/0001_initial.py
new file mode 100644
index 0000000..853bc9b
--- /dev/null
+++ b/studios/migrations/0001_initial.py
@@ -0,0 +1,57 @@
+# Generated by Django 4.1.3 on 2022-11-11 02:37
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Studio",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("name", models.CharField(max_length=250)),
+                ("address", models.CharField(max_length=250)),
+                ("latitude", models.FloatField()),
+                ("longitude", models.FloatField()),
+                ("postal_code", models.CharField(max_length=250)),
+                ("phone_number", models.IntegerField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name="StudioImage",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("image", models.ImageField(upload_to="")),
+                (
+                    "studio",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="image",
+                        to="studios.studio",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/studios/models.py b/studios/models.py
index e653092..de9629e 100644
--- a/studios/models.py
+++ b/studios/models.py
@@ -1,10 +1,10 @@
 from django.db import models as m
-from django.contrib.gis.db import models as gm
 
 class Studio(m.Model):
     name = m.CharField(max_length=250)
     address = m.CharField(max_length=250)
-    location = gm.PointField()
+    latitude = m.FloatField()
+    longitude = m.FloatField()
     postal_code = m.CharField(max_length=250)
     phone_number = m.IntegerField()
 
diff --git a/subscriptions/__init__.py b/subscriptions/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/subscriptions/admin.py b/subscriptions/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/subscriptions/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/subscriptions/apps.py b/subscriptions/apps.py
new file mode 100644
index 0000000..040deb2
--- /dev/null
+++ b/subscriptions/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class SubscriptionsConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "subscriptions"
diff --git a/subscriptions/models.py b/subscriptions/models.py
new file mode 100644
index 0000000..c8b2249
--- /dev/null
+++ b/subscriptions/models.py
@@ -0,0 +1,6 @@
+from django.db import models as m
+
+class Subscription(m.Model):
+    payment = m.DecimalField(decimal_places=2, max_digits=12)
+    # TODO: interval should be one of 'weekly', 'yearly', 'daily', etc
+    interval = m.CharField(max_length=16)
diff --git a/subscriptions/tests.py b/subscriptions/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/subscriptions/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/subscriptions/views.py b/subscriptions/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/subscriptions/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.

commit e83bdfcc21927ac6b31a317aa245f7d6952e8025
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Thu Nov 10 16:52:37 2022 -0500

    resolved initial model errors

diff --git a/classes/models.py b/classes/models.py
index 4e55811..7d384d5 100644
--- a/classes/models.py
+++ b/classes/models.py
@@ -1,10 +1,10 @@
 from django.db import models as m
 
 class Class(m.Model):
-    studio = m.ForeignKey('Studio', on_delete=m.SET_NULL, related_name='studio')
-    name = m.CharField()
+    studio = m.ForeignKey('studios.Studio', on_delete=m.CASCADE, related_name='tfc_class')
+    name = m.CharField(max_length=250)
     description = m.TextField()
-    coach = m.CharField()
+    coach = m.CharField(max_length=250)
     keywords = m.TextField()
     capacity = m.IntegerField()
     start_time = m.DateTimeField()
diff --git a/studios/models.py b/studios/models.py
index a53c034..e653092 100644
--- a/studios/models.py
+++ b/studios/models.py
@@ -2,13 +2,13 @@ from django.db import models as m
 from django.contrib.gis.db import models as gm
 
 class Studio(m.Model):
-    name = m.CharField()
-    address = m.CharField()
+    name = m.CharField(max_length=250)
+    address = m.CharField(max_length=250)
     location = gm.PointField()
-    postal_code = m.CharField()
+    postal_code = m.CharField(max_length=250)
     phone_number = m.IntegerField()
 
 
 class StudioImage(m.Model):
-    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
+    studio = m.ForeignKey('Studio', on_delete=m.CASCADE, related_name='image')
     image = m.ImageField()

commit a743d41f16341d60d3a5b5e9f94152ead20c01c5
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Thu Nov 10 16:39:50 2022 -0500

    removed redundant folder

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..4ad4e6a
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,3 @@
+__pycache__/
+db.sqlite3
+env/
diff --git a/TFC/TFC/__init__.py b/TFC/__init__.py
similarity index 100%
rename from TFC/TFC/__init__.py
rename to TFC/__init__.py
diff --git a/TFC/TFC/asgi.py b/TFC/asgi.py
similarity index 100%
rename from TFC/TFC/asgi.py
rename to TFC/asgi.py
diff --git a/TFC/TFC/settings.py b/TFC/settings.py
similarity index 100%
rename from TFC/TFC/settings.py
rename to TFC/settings.py
diff --git a/TFC/TFC/urls.py b/TFC/urls.py
similarity index 100%
rename from TFC/TFC/urls.py
rename to TFC/urls.py
diff --git a/TFC/TFC/wsgi.py b/TFC/wsgi.py
similarity index 100%
rename from TFC/TFC/wsgi.py
rename to TFC/wsgi.py
diff --git a/TFC/accounts/__init__.py b/accounts/__init__.py
similarity index 100%
rename from TFC/accounts/__init__.py
rename to accounts/__init__.py
diff --git a/TFC/accounts/admin.py b/accounts/admin.py
similarity index 100%
rename from TFC/accounts/admin.py
rename to accounts/admin.py
diff --git a/TFC/accounts/apps.py b/accounts/apps.py
similarity index 100%
rename from TFC/accounts/apps.py
rename to accounts/apps.py
diff --git a/TFC/accounts/migrations/__init__.py b/accounts/migrations/__init__.py
similarity index 100%
rename from TFC/accounts/migrations/__init__.py
rename to accounts/migrations/__init__.py
diff --git a/TFC/accounts/models.py b/accounts/models.py
similarity index 60%
rename from TFC/accounts/models.py
rename to accounts/models.py
index fb14e7f..99e3872 100644
--- a/TFC/accounts/models.py
+++ b/accounts/models.py
@@ -2,5 +2,5 @@ from django.db import models as m
 from django.contrib.auth.models import User
 
 class User(User):
-    avatar = ImageField()
-    phone_number = IntegerField()
+    avatar = m.ImageField()
+    phone_number = m.IntegerField()
diff --git a/TFC/accounts/tests.py b/accounts/tests.py
similarity index 100%
rename from TFC/accounts/tests.py
rename to accounts/tests.py
diff --git a/TFC/accounts/views.py b/accounts/views.py
similarity index 100%
rename from TFC/accounts/views.py
rename to accounts/views.py
diff --git a/TFC/classes/__init__.py b/classes/__init__.py
similarity index 100%
rename from TFC/classes/__init__.py
rename to classes/__init__.py
diff --git a/TFC/classes/admin.py b/classes/admin.py
similarity index 100%
rename from TFC/classes/admin.py
rename to classes/admin.py
diff --git a/TFC/classes/apps.py b/classes/apps.py
similarity index 100%
rename from TFC/classes/apps.py
rename to classes/apps.py
diff --git a/TFC/classes/migrations/__init__.py b/classes/migrations/__init__.py
similarity index 100%
rename from TFC/classes/migrations/__init__.py
rename to classes/migrations/__init__.py
diff --git a/TFC/classes/models.py b/classes/models.py
similarity index 76%
rename from TFC/classes/models.py
rename to classes/models.py
index 23df279..4e55811 100644
--- a/TFC/classes/models.py
+++ b/classes/models.py
@@ -1,7 +1,7 @@
 from django.db import models as m
 
 class Class(m.Model):
-    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
+    studio = m.ForeignKey('Studio', on_delete=m.SET_NULL, related_name='studio')
     name = m.CharField()
     description = m.TextField()
     coach = m.CharField()
diff --git a/TFC/classes/tests.py b/classes/tests.py
similarity index 100%
rename from TFC/classes/tests.py
rename to classes/tests.py
diff --git a/TFC/classes/views.py b/classes/views.py
similarity index 100%
rename from TFC/classes/views.py
rename to classes/views.py
diff --git a/TFC/manage.py b/manage.py
similarity index 100%
rename from TFC/manage.py
rename to manage.py
diff --git a/TFC/requirements.txt b/requirements.txt
similarity index 100%
rename from TFC/requirements.txt
rename to requirements.txt
diff --git a/TFC/studios/__init__.py b/studios/__init__.py
similarity index 100%
rename from TFC/studios/__init__.py
rename to studios/__init__.py
diff --git a/TFC/studios/admin.py b/studios/admin.py
similarity index 100%
rename from TFC/studios/admin.py
rename to studios/admin.py
diff --git a/TFC/studios/apps.py b/studios/apps.py
similarity index 100%
rename from TFC/studios/apps.py
rename to studios/apps.py
diff --git a/TFC/studios/migrations/__init__.py b/studios/migrations/__init__.py
similarity index 100%
rename from TFC/studios/migrations/__init__.py
rename to studios/migrations/__init__.py
diff --git a/TFC/studios/models.py b/studios/models.py
similarity index 73%
rename from TFC/studios/models.py
rename to studios/models.py
index db00947..a53c034 100644
--- a/TFC/studios/models.py
+++ b/studios/models.py
@@ -1,13 +1,14 @@
 from django.db import models as m
+from django.contrib.gis.db import models as gm
 
 class Studio(m.Model):
     name = m.CharField()
     address = m.CharField()
-    location = m.PointField()
+    location = gm.PointField()
     postal_code = m.CharField()
     phone_number = m.IntegerField()
 
 
 class StudioImage(m.Model):
     studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
-    image = ImageField()
+    image = m.ImageField()
diff --git a/TFC/studios/tests.py b/studios/tests.py
similarity index 100%
rename from TFC/studios/tests.py
rename to studios/tests.py
diff --git a/TFC/studios/views.py b/studios/views.py
similarity index 100%
rename from TFC/studios/views.py
rename to studios/views.py

commit 821b90e75be808400c01ddd262ac2efaac926dec
Author: Nathan Hansen <nathanajhansen@gmail.com>
Date:   Thu Nov 10 16:19:44 2022 -0500

    initial commit

diff --git a/TFC/.gitignore b/TFC/.gitignore
new file mode 100644
index 0000000..853e982
--- /dev/null
+++ b/TFC/.gitignore
@@ -0,0 +1,4 @@
+# ignore these files
+__pycache__/
+db.sqlite3
+env/
diff --git a/TFC/TFC/__init__.py b/TFC/TFC/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/TFC/asgi.py b/TFC/TFC/asgi.py
new file mode 100644
index 0000000..07b518d
--- /dev/null
+++ b/TFC/TFC/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for TFC project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.1/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
+
+application = get_asgi_application()
diff --git a/TFC/TFC/settings.py b/TFC/TFC/settings.py
new file mode 100644
index 0000000..5f7ca4f
--- /dev/null
+++ b/TFC/TFC/settings.py
@@ -0,0 +1,126 @@
+"""
+Django settings for TFC project.
+
+Generated by 'django-admin startproject' using Django 4.1.2.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.1/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/4.1/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-d$*)b428p&##d4!mjl(zs!k@09c3y2ka00#!a9q=rkgf20rpoq"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+    "accounts",
+    "classes",
+    "studios",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "TFC.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "TFC.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/4.1/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/4.1/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/TFC/TFC/urls.py b/TFC/TFC/urls.py
new file mode 100644
index 0000000..b705392
--- /dev/null
+++ b/TFC/TFC/urls.py
@@ -0,0 +1,21 @@
+"""TFC URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/4.1/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/TFC/TFC/wsgi.py b/TFC/TFC/wsgi.py
new file mode 100644
index 0000000..7030d44
--- /dev/null
+++ b/TFC/TFC/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for TFC project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
+
+application = get_wsgi_application()
diff --git a/TFC/accounts/__init__.py b/TFC/accounts/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/accounts/admin.py b/TFC/accounts/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/TFC/accounts/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/TFC/accounts/apps.py b/TFC/accounts/apps.py
new file mode 100644
index 0000000..0cb51e6
--- /dev/null
+++ b/TFC/accounts/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class AccountsConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "accounts"
diff --git a/TFC/accounts/migrations/__init__.py b/TFC/accounts/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/accounts/models.py b/TFC/accounts/models.py
new file mode 100644
index 0000000..fb14e7f
--- /dev/null
+++ b/TFC/accounts/models.py
@@ -0,0 +1,6 @@
+from django.db import models as m
+from django.contrib.auth.models import User
+
+class User(User):
+    avatar = ImageField()
+    phone_number = IntegerField()
diff --git a/TFC/accounts/tests.py b/TFC/accounts/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/TFC/accounts/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/TFC/accounts/views.py b/TFC/accounts/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/TFC/accounts/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/TFC/classes/__init__.py b/TFC/classes/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/classes/admin.py b/TFC/classes/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/TFC/classes/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/TFC/classes/apps.py b/TFC/classes/apps.py
new file mode 100644
index 0000000..627ea4c
--- /dev/null
+++ b/TFC/classes/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class ClassesConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "classes"
diff --git a/TFC/classes/migrations/__init__.py b/TFC/classes/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/classes/models.py b/TFC/classes/models.py
new file mode 100644
index 0000000..23df279
--- /dev/null
+++ b/TFC/classes/models.py
@@ -0,0 +1,11 @@
+from django.db import models as m
+
+class Class(m.Model):
+    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
+    name = m.CharField()
+    description = m.TextField()
+    coach = m.CharField()
+    keywords = m.TextField()
+    capacity = m.IntegerField()
+    start_time = m.DateTimeField()
+    duration = m.DurationField()
diff --git a/TFC/classes/tests.py b/TFC/classes/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/TFC/classes/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/TFC/classes/views.py b/TFC/classes/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/TFC/classes/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/TFC/manage.py b/TFC/manage.py
new file mode 100755
index 0000000..45e4ff2
--- /dev/null
+++ b/TFC/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TFC.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/TFC/requirements.txt b/TFC/requirements.txt
new file mode 100644
index 0000000..19781b7
--- /dev/null
+++ b/TFC/requirements.txt
@@ -0,0 +1,2 @@
+Django
+Pillow
diff --git a/TFC/studios/__init__.py b/TFC/studios/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/studios/admin.py b/TFC/studios/admin.py
new file mode 100644
index 0000000..8c38f3f
--- /dev/null
+++ b/TFC/studios/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/TFC/studios/apps.py b/TFC/studios/apps.py
new file mode 100644
index 0000000..43f35b4
--- /dev/null
+++ b/TFC/studios/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class StudiosConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "studios"
diff --git a/TFC/studios/migrations/__init__.py b/TFC/studios/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/TFC/studios/models.py b/TFC/studios/models.py
new file mode 100644
index 0000000..db00947
--- /dev/null
+++ b/TFC/studios/models.py
@@ -0,0 +1,13 @@
+from django.db import models as m
+
+class Studio(m.Model):
+    name = m.CharField()
+    address = m.CharField()
+    location = m.PointField()
+    postal_code = m.CharField()
+    phone_number = m.IntegerField()
+
+
+class StudioImage(m.Model):
+    studio = m.ForeignKey(Studio, on_delete=m.SET_NULL, related_name='studio')
+    image = ImageField()
diff --git a/TFC/studios/tests.py b/TFC/studios/tests.py
new file mode 100644
index 0000000..7ce503c
--- /dev/null
+++ b/TFC/studios/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/TFC/studios/views.py b/TFC/studios/views.py
new file mode 100644
index 0000000..91ea44a
--- /dev/null
+++ b/TFC/studios/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
